-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity edgedetect_edgedetect_Pipeline_VITIS_LOOP_85_1_VITIS_LOOP_87_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    filter : IN STD_LOGIC_VECTOR (63 downto 0);
    normal_factor_5_out : OUT STD_LOGIC_VECTOR (11 downto 0);
    normal_factor_5_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of edgedetect_edgedetect_Pipeline_VITIS_LOOP_85_1_VITIS_LOOP_87_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter46 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter47 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter48 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter49 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter50 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter51 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter52 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter53 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter54 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter55 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter56 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter57 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter58 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter59 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter60 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter61 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter62 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter63 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter64 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter65 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter66 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter67 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter68 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter69 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter70 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter71 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter72 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter73 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state73_pp0_stage0_iter72 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln85_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln85_reg_360 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter45_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter46_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter47_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter48_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter49_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter50_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter51_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter52_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter53_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter54_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter55_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter56_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter57_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter58_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter59_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter60_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter61_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter62_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter63_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter64_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter65_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter66_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter67_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter68_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter69_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter70_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_360_pp0_iter71_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln89_2_reg_364 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln89_fu_234_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter13_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter14_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter15_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter16_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter17_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter18_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter19_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter20_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter21_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter22_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter23_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter24_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter25_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter26_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter27_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter28_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter29_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter30_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter31_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter32_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter33_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter34_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter35_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter36_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter37_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter38_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter39_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter40_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter41_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter42_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter43_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter44_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter45_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter46_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter47_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter48_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter49_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter50_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter51_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter52_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter53_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter54_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter55_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter56_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter57_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter58_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter59_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter60_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter61_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter62_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter63_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter64_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter65_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter66_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter67_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter68_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter69_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter70_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter71_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln89_reg_369_pp0_iter72_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal gmem_addr_read_reg_380 : STD_LOGIC_VECTOR (511 downto 0);
    signal sext_ln89_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal normal_factor_fu_76 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal normal_factor_2_fu_316_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter31_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter32_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter33_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter34_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter35_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter36_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter37_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter38_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter39_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter40_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter41_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter42_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter43_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter44_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter45_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter46_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter47_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter48_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter49_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter50_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter51_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter52_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter53_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter54_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter55_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter56_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter57_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter58_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter59_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter60_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter61_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter62_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter63_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter64_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter65_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter66_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter67_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter68_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter69_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter70_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter71_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter72_reg : STD_LOGIC;
    signal c_fu_80 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal add_ln87_fu_238_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_c_load : STD_LOGIC_VECTOR (1 downto 0);
    signal r_fu_84 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal select_ln85_fu_178_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_r_load : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten404_fu_88 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln85_fu_146_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_indvar_flatten404_load : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln87_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln85_1_fu_172_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl_fu_190_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln85_fu_186_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_fu_198_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln75_fu_164_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln87_1_fu_208_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln89_fu_212_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln87_fu_204_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln89_1_fu_218_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln3_fu_272_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln89_fu_279_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln89_fu_283_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln89_1_fu_288_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal abscond3_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg2_fu_292_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal abs4_fu_304_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln89_1_fu_312_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component edgedetect_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component edgedetect_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter72_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter45 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter46 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter47_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter47 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter48_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter48 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter49_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter49 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter50_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter50 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter51_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter51 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter52_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter52 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter53_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter53 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter54_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter54 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter55_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter55 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter56_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter56 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter56 <= ap_enable_reg_pp0_iter55;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter57_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter57 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter57 <= ap_enable_reg_pp0_iter56;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter58_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter58 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter58 <= ap_enable_reg_pp0_iter57;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter59_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter59 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter59 <= ap_enable_reg_pp0_iter58;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter60_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter60 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter60 <= ap_enable_reg_pp0_iter59;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter61_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter61 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter61 <= ap_enable_reg_pp0_iter60;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter62_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter62 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter62 <= ap_enable_reg_pp0_iter61;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter63_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter63 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter63 <= ap_enable_reg_pp0_iter62;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter64_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter64 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter64 <= ap_enable_reg_pp0_iter63;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter65_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter65 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter65 <= ap_enable_reg_pp0_iter64;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter66_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter66 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter66 <= ap_enable_reg_pp0_iter65;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter67_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter67 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter67 <= ap_enable_reg_pp0_iter66;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter68_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter68 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter68 <= ap_enable_reg_pp0_iter67;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter69_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter69 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter69 <= ap_enable_reg_pp0_iter68;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter70_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter70 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter70 <= ap_enable_reg_pp0_iter69;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter71_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter71 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter71 <= ap_enable_reg_pp0_iter70;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter72_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter72 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter72 <= ap_enable_reg_pp0_iter71;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter73_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter73 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter73 <= ap_enable_reg_pp0_iter72;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    c_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln85_fu_140_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    c_fu_80 <= add_ln87_fu_238_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    c_fu_80 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten404_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln85_fu_140_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten404_fu_88 <= add_ln85_fu_146_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten404_fu_88 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    normal_factor_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    normal_factor_fu_76 <= ap_const_lv12_0;
                elsif ((ap_enable_reg_pp0_iter73 = ap_const_logic_1)) then 
                    normal_factor_fu_76 <= normal_factor_2_fu_316_p2;
                end if;
            end if; 
        end if;
    end process;

    r_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln85_fu_140_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    r_fu_84 <= select_ln85_fu_178_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    r_fu_84 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
                ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
                ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
                ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
                ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
                ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
                ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
                ap_loop_exit_ready_pp0_iter37_reg <= ap_loop_exit_ready_pp0_iter36_reg;
                ap_loop_exit_ready_pp0_iter38_reg <= ap_loop_exit_ready_pp0_iter37_reg;
                ap_loop_exit_ready_pp0_iter39_reg <= ap_loop_exit_ready_pp0_iter38_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter40_reg <= ap_loop_exit_ready_pp0_iter39_reg;
                ap_loop_exit_ready_pp0_iter41_reg <= ap_loop_exit_ready_pp0_iter40_reg;
                ap_loop_exit_ready_pp0_iter42_reg <= ap_loop_exit_ready_pp0_iter41_reg;
                ap_loop_exit_ready_pp0_iter43_reg <= ap_loop_exit_ready_pp0_iter42_reg;
                ap_loop_exit_ready_pp0_iter44_reg <= ap_loop_exit_ready_pp0_iter43_reg;
                ap_loop_exit_ready_pp0_iter45_reg <= ap_loop_exit_ready_pp0_iter44_reg;
                ap_loop_exit_ready_pp0_iter46_reg <= ap_loop_exit_ready_pp0_iter45_reg;
                ap_loop_exit_ready_pp0_iter47_reg <= ap_loop_exit_ready_pp0_iter46_reg;
                ap_loop_exit_ready_pp0_iter48_reg <= ap_loop_exit_ready_pp0_iter47_reg;
                ap_loop_exit_ready_pp0_iter49_reg <= ap_loop_exit_ready_pp0_iter48_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter50_reg <= ap_loop_exit_ready_pp0_iter49_reg;
                ap_loop_exit_ready_pp0_iter51_reg <= ap_loop_exit_ready_pp0_iter50_reg;
                ap_loop_exit_ready_pp0_iter52_reg <= ap_loop_exit_ready_pp0_iter51_reg;
                ap_loop_exit_ready_pp0_iter53_reg <= ap_loop_exit_ready_pp0_iter52_reg;
                ap_loop_exit_ready_pp0_iter54_reg <= ap_loop_exit_ready_pp0_iter53_reg;
                ap_loop_exit_ready_pp0_iter55_reg <= ap_loop_exit_ready_pp0_iter54_reg;
                ap_loop_exit_ready_pp0_iter56_reg <= ap_loop_exit_ready_pp0_iter55_reg;
                ap_loop_exit_ready_pp0_iter57_reg <= ap_loop_exit_ready_pp0_iter56_reg;
                ap_loop_exit_ready_pp0_iter58_reg <= ap_loop_exit_ready_pp0_iter57_reg;
                ap_loop_exit_ready_pp0_iter59_reg <= ap_loop_exit_ready_pp0_iter58_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter60_reg <= ap_loop_exit_ready_pp0_iter59_reg;
                ap_loop_exit_ready_pp0_iter61_reg <= ap_loop_exit_ready_pp0_iter60_reg;
                ap_loop_exit_ready_pp0_iter62_reg <= ap_loop_exit_ready_pp0_iter61_reg;
                ap_loop_exit_ready_pp0_iter63_reg <= ap_loop_exit_ready_pp0_iter62_reg;
                ap_loop_exit_ready_pp0_iter64_reg <= ap_loop_exit_ready_pp0_iter63_reg;
                ap_loop_exit_ready_pp0_iter65_reg <= ap_loop_exit_ready_pp0_iter64_reg;
                ap_loop_exit_ready_pp0_iter66_reg <= ap_loop_exit_ready_pp0_iter65_reg;
                ap_loop_exit_ready_pp0_iter67_reg <= ap_loop_exit_ready_pp0_iter66_reg;
                ap_loop_exit_ready_pp0_iter68_reg <= ap_loop_exit_ready_pp0_iter67_reg;
                ap_loop_exit_ready_pp0_iter69_reg <= ap_loop_exit_ready_pp0_iter68_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter70_reg <= ap_loop_exit_ready_pp0_iter69_reg;
                ap_loop_exit_ready_pp0_iter71_reg <= ap_loop_exit_ready_pp0_iter70_reg;
                ap_loop_exit_ready_pp0_iter72_reg <= ap_loop_exit_ready_pp0_iter71_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                gmem_addr_read_reg_380 <= m_axi_gmem_RDATA;
                icmp_ln85_reg_360_pp0_iter10_reg <= icmp_ln85_reg_360_pp0_iter9_reg;
                icmp_ln85_reg_360_pp0_iter11_reg <= icmp_ln85_reg_360_pp0_iter10_reg;
                icmp_ln85_reg_360_pp0_iter12_reg <= icmp_ln85_reg_360_pp0_iter11_reg;
                icmp_ln85_reg_360_pp0_iter13_reg <= icmp_ln85_reg_360_pp0_iter12_reg;
                icmp_ln85_reg_360_pp0_iter14_reg <= icmp_ln85_reg_360_pp0_iter13_reg;
                icmp_ln85_reg_360_pp0_iter15_reg <= icmp_ln85_reg_360_pp0_iter14_reg;
                icmp_ln85_reg_360_pp0_iter16_reg <= icmp_ln85_reg_360_pp0_iter15_reg;
                icmp_ln85_reg_360_pp0_iter17_reg <= icmp_ln85_reg_360_pp0_iter16_reg;
                icmp_ln85_reg_360_pp0_iter18_reg <= icmp_ln85_reg_360_pp0_iter17_reg;
                icmp_ln85_reg_360_pp0_iter19_reg <= icmp_ln85_reg_360_pp0_iter18_reg;
                icmp_ln85_reg_360_pp0_iter20_reg <= icmp_ln85_reg_360_pp0_iter19_reg;
                icmp_ln85_reg_360_pp0_iter21_reg <= icmp_ln85_reg_360_pp0_iter20_reg;
                icmp_ln85_reg_360_pp0_iter22_reg <= icmp_ln85_reg_360_pp0_iter21_reg;
                icmp_ln85_reg_360_pp0_iter23_reg <= icmp_ln85_reg_360_pp0_iter22_reg;
                icmp_ln85_reg_360_pp0_iter24_reg <= icmp_ln85_reg_360_pp0_iter23_reg;
                icmp_ln85_reg_360_pp0_iter25_reg <= icmp_ln85_reg_360_pp0_iter24_reg;
                icmp_ln85_reg_360_pp0_iter26_reg <= icmp_ln85_reg_360_pp0_iter25_reg;
                icmp_ln85_reg_360_pp0_iter27_reg <= icmp_ln85_reg_360_pp0_iter26_reg;
                icmp_ln85_reg_360_pp0_iter28_reg <= icmp_ln85_reg_360_pp0_iter27_reg;
                icmp_ln85_reg_360_pp0_iter29_reg <= icmp_ln85_reg_360_pp0_iter28_reg;
                icmp_ln85_reg_360_pp0_iter2_reg <= icmp_ln85_reg_360_pp0_iter1_reg;
                icmp_ln85_reg_360_pp0_iter30_reg <= icmp_ln85_reg_360_pp0_iter29_reg;
                icmp_ln85_reg_360_pp0_iter31_reg <= icmp_ln85_reg_360_pp0_iter30_reg;
                icmp_ln85_reg_360_pp0_iter32_reg <= icmp_ln85_reg_360_pp0_iter31_reg;
                icmp_ln85_reg_360_pp0_iter33_reg <= icmp_ln85_reg_360_pp0_iter32_reg;
                icmp_ln85_reg_360_pp0_iter34_reg <= icmp_ln85_reg_360_pp0_iter33_reg;
                icmp_ln85_reg_360_pp0_iter35_reg <= icmp_ln85_reg_360_pp0_iter34_reg;
                icmp_ln85_reg_360_pp0_iter36_reg <= icmp_ln85_reg_360_pp0_iter35_reg;
                icmp_ln85_reg_360_pp0_iter37_reg <= icmp_ln85_reg_360_pp0_iter36_reg;
                icmp_ln85_reg_360_pp0_iter38_reg <= icmp_ln85_reg_360_pp0_iter37_reg;
                icmp_ln85_reg_360_pp0_iter39_reg <= icmp_ln85_reg_360_pp0_iter38_reg;
                icmp_ln85_reg_360_pp0_iter3_reg <= icmp_ln85_reg_360_pp0_iter2_reg;
                icmp_ln85_reg_360_pp0_iter40_reg <= icmp_ln85_reg_360_pp0_iter39_reg;
                icmp_ln85_reg_360_pp0_iter41_reg <= icmp_ln85_reg_360_pp0_iter40_reg;
                icmp_ln85_reg_360_pp0_iter42_reg <= icmp_ln85_reg_360_pp0_iter41_reg;
                icmp_ln85_reg_360_pp0_iter43_reg <= icmp_ln85_reg_360_pp0_iter42_reg;
                icmp_ln85_reg_360_pp0_iter44_reg <= icmp_ln85_reg_360_pp0_iter43_reg;
                icmp_ln85_reg_360_pp0_iter45_reg <= icmp_ln85_reg_360_pp0_iter44_reg;
                icmp_ln85_reg_360_pp0_iter46_reg <= icmp_ln85_reg_360_pp0_iter45_reg;
                icmp_ln85_reg_360_pp0_iter47_reg <= icmp_ln85_reg_360_pp0_iter46_reg;
                icmp_ln85_reg_360_pp0_iter48_reg <= icmp_ln85_reg_360_pp0_iter47_reg;
                icmp_ln85_reg_360_pp0_iter49_reg <= icmp_ln85_reg_360_pp0_iter48_reg;
                icmp_ln85_reg_360_pp0_iter4_reg <= icmp_ln85_reg_360_pp0_iter3_reg;
                icmp_ln85_reg_360_pp0_iter50_reg <= icmp_ln85_reg_360_pp0_iter49_reg;
                icmp_ln85_reg_360_pp0_iter51_reg <= icmp_ln85_reg_360_pp0_iter50_reg;
                icmp_ln85_reg_360_pp0_iter52_reg <= icmp_ln85_reg_360_pp0_iter51_reg;
                icmp_ln85_reg_360_pp0_iter53_reg <= icmp_ln85_reg_360_pp0_iter52_reg;
                icmp_ln85_reg_360_pp0_iter54_reg <= icmp_ln85_reg_360_pp0_iter53_reg;
                icmp_ln85_reg_360_pp0_iter55_reg <= icmp_ln85_reg_360_pp0_iter54_reg;
                icmp_ln85_reg_360_pp0_iter56_reg <= icmp_ln85_reg_360_pp0_iter55_reg;
                icmp_ln85_reg_360_pp0_iter57_reg <= icmp_ln85_reg_360_pp0_iter56_reg;
                icmp_ln85_reg_360_pp0_iter58_reg <= icmp_ln85_reg_360_pp0_iter57_reg;
                icmp_ln85_reg_360_pp0_iter59_reg <= icmp_ln85_reg_360_pp0_iter58_reg;
                icmp_ln85_reg_360_pp0_iter5_reg <= icmp_ln85_reg_360_pp0_iter4_reg;
                icmp_ln85_reg_360_pp0_iter60_reg <= icmp_ln85_reg_360_pp0_iter59_reg;
                icmp_ln85_reg_360_pp0_iter61_reg <= icmp_ln85_reg_360_pp0_iter60_reg;
                icmp_ln85_reg_360_pp0_iter62_reg <= icmp_ln85_reg_360_pp0_iter61_reg;
                icmp_ln85_reg_360_pp0_iter63_reg <= icmp_ln85_reg_360_pp0_iter62_reg;
                icmp_ln85_reg_360_pp0_iter64_reg <= icmp_ln85_reg_360_pp0_iter63_reg;
                icmp_ln85_reg_360_pp0_iter65_reg <= icmp_ln85_reg_360_pp0_iter64_reg;
                icmp_ln85_reg_360_pp0_iter66_reg <= icmp_ln85_reg_360_pp0_iter65_reg;
                icmp_ln85_reg_360_pp0_iter67_reg <= icmp_ln85_reg_360_pp0_iter66_reg;
                icmp_ln85_reg_360_pp0_iter68_reg <= icmp_ln85_reg_360_pp0_iter67_reg;
                icmp_ln85_reg_360_pp0_iter69_reg <= icmp_ln85_reg_360_pp0_iter68_reg;
                icmp_ln85_reg_360_pp0_iter6_reg <= icmp_ln85_reg_360_pp0_iter5_reg;
                icmp_ln85_reg_360_pp0_iter70_reg <= icmp_ln85_reg_360_pp0_iter69_reg;
                icmp_ln85_reg_360_pp0_iter71_reg <= icmp_ln85_reg_360_pp0_iter70_reg;
                icmp_ln85_reg_360_pp0_iter7_reg <= icmp_ln85_reg_360_pp0_iter6_reg;
                icmp_ln85_reg_360_pp0_iter8_reg <= icmp_ln85_reg_360_pp0_iter7_reg;
                icmp_ln85_reg_360_pp0_iter9_reg <= icmp_ln85_reg_360_pp0_iter8_reg;
                trunc_ln89_reg_369_pp0_iter10_reg <= trunc_ln89_reg_369_pp0_iter9_reg;
                trunc_ln89_reg_369_pp0_iter11_reg <= trunc_ln89_reg_369_pp0_iter10_reg;
                trunc_ln89_reg_369_pp0_iter12_reg <= trunc_ln89_reg_369_pp0_iter11_reg;
                trunc_ln89_reg_369_pp0_iter13_reg <= trunc_ln89_reg_369_pp0_iter12_reg;
                trunc_ln89_reg_369_pp0_iter14_reg <= trunc_ln89_reg_369_pp0_iter13_reg;
                trunc_ln89_reg_369_pp0_iter15_reg <= trunc_ln89_reg_369_pp0_iter14_reg;
                trunc_ln89_reg_369_pp0_iter16_reg <= trunc_ln89_reg_369_pp0_iter15_reg;
                trunc_ln89_reg_369_pp0_iter17_reg <= trunc_ln89_reg_369_pp0_iter16_reg;
                trunc_ln89_reg_369_pp0_iter18_reg <= trunc_ln89_reg_369_pp0_iter17_reg;
                trunc_ln89_reg_369_pp0_iter19_reg <= trunc_ln89_reg_369_pp0_iter18_reg;
                trunc_ln89_reg_369_pp0_iter20_reg <= trunc_ln89_reg_369_pp0_iter19_reg;
                trunc_ln89_reg_369_pp0_iter21_reg <= trunc_ln89_reg_369_pp0_iter20_reg;
                trunc_ln89_reg_369_pp0_iter22_reg <= trunc_ln89_reg_369_pp0_iter21_reg;
                trunc_ln89_reg_369_pp0_iter23_reg <= trunc_ln89_reg_369_pp0_iter22_reg;
                trunc_ln89_reg_369_pp0_iter24_reg <= trunc_ln89_reg_369_pp0_iter23_reg;
                trunc_ln89_reg_369_pp0_iter25_reg <= trunc_ln89_reg_369_pp0_iter24_reg;
                trunc_ln89_reg_369_pp0_iter26_reg <= trunc_ln89_reg_369_pp0_iter25_reg;
                trunc_ln89_reg_369_pp0_iter27_reg <= trunc_ln89_reg_369_pp0_iter26_reg;
                trunc_ln89_reg_369_pp0_iter28_reg <= trunc_ln89_reg_369_pp0_iter27_reg;
                trunc_ln89_reg_369_pp0_iter29_reg <= trunc_ln89_reg_369_pp0_iter28_reg;
                trunc_ln89_reg_369_pp0_iter2_reg <= trunc_ln89_reg_369_pp0_iter1_reg;
                trunc_ln89_reg_369_pp0_iter30_reg <= trunc_ln89_reg_369_pp0_iter29_reg;
                trunc_ln89_reg_369_pp0_iter31_reg <= trunc_ln89_reg_369_pp0_iter30_reg;
                trunc_ln89_reg_369_pp0_iter32_reg <= trunc_ln89_reg_369_pp0_iter31_reg;
                trunc_ln89_reg_369_pp0_iter33_reg <= trunc_ln89_reg_369_pp0_iter32_reg;
                trunc_ln89_reg_369_pp0_iter34_reg <= trunc_ln89_reg_369_pp0_iter33_reg;
                trunc_ln89_reg_369_pp0_iter35_reg <= trunc_ln89_reg_369_pp0_iter34_reg;
                trunc_ln89_reg_369_pp0_iter36_reg <= trunc_ln89_reg_369_pp0_iter35_reg;
                trunc_ln89_reg_369_pp0_iter37_reg <= trunc_ln89_reg_369_pp0_iter36_reg;
                trunc_ln89_reg_369_pp0_iter38_reg <= trunc_ln89_reg_369_pp0_iter37_reg;
                trunc_ln89_reg_369_pp0_iter39_reg <= trunc_ln89_reg_369_pp0_iter38_reg;
                trunc_ln89_reg_369_pp0_iter3_reg <= trunc_ln89_reg_369_pp0_iter2_reg;
                trunc_ln89_reg_369_pp0_iter40_reg <= trunc_ln89_reg_369_pp0_iter39_reg;
                trunc_ln89_reg_369_pp0_iter41_reg <= trunc_ln89_reg_369_pp0_iter40_reg;
                trunc_ln89_reg_369_pp0_iter42_reg <= trunc_ln89_reg_369_pp0_iter41_reg;
                trunc_ln89_reg_369_pp0_iter43_reg <= trunc_ln89_reg_369_pp0_iter42_reg;
                trunc_ln89_reg_369_pp0_iter44_reg <= trunc_ln89_reg_369_pp0_iter43_reg;
                trunc_ln89_reg_369_pp0_iter45_reg <= trunc_ln89_reg_369_pp0_iter44_reg;
                trunc_ln89_reg_369_pp0_iter46_reg <= trunc_ln89_reg_369_pp0_iter45_reg;
                trunc_ln89_reg_369_pp0_iter47_reg <= trunc_ln89_reg_369_pp0_iter46_reg;
                trunc_ln89_reg_369_pp0_iter48_reg <= trunc_ln89_reg_369_pp0_iter47_reg;
                trunc_ln89_reg_369_pp0_iter49_reg <= trunc_ln89_reg_369_pp0_iter48_reg;
                trunc_ln89_reg_369_pp0_iter4_reg <= trunc_ln89_reg_369_pp0_iter3_reg;
                trunc_ln89_reg_369_pp0_iter50_reg <= trunc_ln89_reg_369_pp0_iter49_reg;
                trunc_ln89_reg_369_pp0_iter51_reg <= trunc_ln89_reg_369_pp0_iter50_reg;
                trunc_ln89_reg_369_pp0_iter52_reg <= trunc_ln89_reg_369_pp0_iter51_reg;
                trunc_ln89_reg_369_pp0_iter53_reg <= trunc_ln89_reg_369_pp0_iter52_reg;
                trunc_ln89_reg_369_pp0_iter54_reg <= trunc_ln89_reg_369_pp0_iter53_reg;
                trunc_ln89_reg_369_pp0_iter55_reg <= trunc_ln89_reg_369_pp0_iter54_reg;
                trunc_ln89_reg_369_pp0_iter56_reg <= trunc_ln89_reg_369_pp0_iter55_reg;
                trunc_ln89_reg_369_pp0_iter57_reg <= trunc_ln89_reg_369_pp0_iter56_reg;
                trunc_ln89_reg_369_pp0_iter58_reg <= trunc_ln89_reg_369_pp0_iter57_reg;
                trunc_ln89_reg_369_pp0_iter59_reg <= trunc_ln89_reg_369_pp0_iter58_reg;
                trunc_ln89_reg_369_pp0_iter5_reg <= trunc_ln89_reg_369_pp0_iter4_reg;
                trunc_ln89_reg_369_pp0_iter60_reg <= trunc_ln89_reg_369_pp0_iter59_reg;
                trunc_ln89_reg_369_pp0_iter61_reg <= trunc_ln89_reg_369_pp0_iter60_reg;
                trunc_ln89_reg_369_pp0_iter62_reg <= trunc_ln89_reg_369_pp0_iter61_reg;
                trunc_ln89_reg_369_pp0_iter63_reg <= trunc_ln89_reg_369_pp0_iter62_reg;
                trunc_ln89_reg_369_pp0_iter64_reg <= trunc_ln89_reg_369_pp0_iter63_reg;
                trunc_ln89_reg_369_pp0_iter65_reg <= trunc_ln89_reg_369_pp0_iter64_reg;
                trunc_ln89_reg_369_pp0_iter66_reg <= trunc_ln89_reg_369_pp0_iter65_reg;
                trunc_ln89_reg_369_pp0_iter67_reg <= trunc_ln89_reg_369_pp0_iter66_reg;
                trunc_ln89_reg_369_pp0_iter68_reg <= trunc_ln89_reg_369_pp0_iter67_reg;
                trunc_ln89_reg_369_pp0_iter69_reg <= trunc_ln89_reg_369_pp0_iter68_reg;
                trunc_ln89_reg_369_pp0_iter6_reg <= trunc_ln89_reg_369_pp0_iter5_reg;
                trunc_ln89_reg_369_pp0_iter70_reg <= trunc_ln89_reg_369_pp0_iter69_reg;
                trunc_ln89_reg_369_pp0_iter71_reg <= trunc_ln89_reg_369_pp0_iter70_reg;
                trunc_ln89_reg_369_pp0_iter72_reg <= trunc_ln89_reg_369_pp0_iter71_reg;
                trunc_ln89_reg_369_pp0_iter7_reg <= trunc_ln89_reg_369_pp0_iter6_reg;
                trunc_ln89_reg_369_pp0_iter8_reg <= trunc_ln89_reg_369_pp0_iter7_reg;
                trunc_ln89_reg_369_pp0_iter9_reg <= trunc_ln89_reg_369_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln85_reg_360 <= icmp_ln85_fu_140_p2;
                icmp_ln85_reg_360_pp0_iter1_reg <= icmp_ln85_reg_360;
                trunc_ln89_2_reg_364 <= add_ln89_1_fu_218_p2(63 downto 6);
                trunc_ln89_reg_369 <= trunc_ln89_fu_234_p1;
                trunc_ln89_reg_369_pp0_iter1_reg <= trunc_ln89_reg_369;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    abs4_fu_304_p3 <= 
        trunc_ln89_1_fu_288_p1 when (abscond3_fu_298_p2(0) = '1') else 
        neg2_fu_292_p2;
    abscond3_fu_298_p2 <= "0" when (trunc_ln89_1_fu_288_p1 = ap_const_lv8_0) else "1";
    add_ln85_1_fu_172_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_r_load) + unsigned(ap_const_lv2_1));
    add_ln85_fu_146_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten404_load) + unsigned(ap_const_lv4_1));
    add_ln87_fu_238_p2 <= std_logic_vector(unsigned(select_ln75_fu_164_p3) + unsigned(ap_const_lv2_1));
    add_ln89_1_fu_218_p2 <= std_logic_vector(unsigned(add_ln89_fu_212_p2) + unsigned(zext_ln87_fu_204_p1));
    add_ln89_fu_212_p2 <= std_logic_vector(unsigned(zext_ln87_1_fu_208_p1) + unsigned(filter));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter72, ap_block_state73_pp0_stage0_iter72)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter72 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state73_pp0_stage0_iter72));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter72, m_axi_gmem_ARREADY, ap_block_state73_pp0_stage0_iter72)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter72 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state73_pp0_stage0_iter72)) or ((m_axi_gmem_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter72, m_axi_gmem_ARREADY, ap_block_state73_pp0_stage0_iter72)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter72 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state73_pp0_stage0_iter72)) or ((m_axi_gmem_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state73_pp0_stage0_iter72_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state73_pp0_stage0_iter72 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln85_fu_140_p2)
    begin
        if (((icmp_ln85_fu_140_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter72_reg, ap_done_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter72_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45, ap_enable_reg_pp0_iter46, ap_enable_reg_pp0_iter47, ap_enable_reg_pp0_iter48, ap_enable_reg_pp0_iter49, ap_enable_reg_pp0_iter50, ap_enable_reg_pp0_iter51, ap_enable_reg_pp0_iter52, ap_enable_reg_pp0_iter53, ap_enable_reg_pp0_iter54, ap_enable_reg_pp0_iter55, ap_enable_reg_pp0_iter56, ap_enable_reg_pp0_iter57, ap_enable_reg_pp0_iter58, ap_enable_reg_pp0_iter59, ap_enable_reg_pp0_iter60, ap_enable_reg_pp0_iter61, ap_enable_reg_pp0_iter62, ap_enable_reg_pp0_iter63, ap_enable_reg_pp0_iter64, ap_enable_reg_pp0_iter65, ap_enable_reg_pp0_iter66, ap_enable_reg_pp0_iter67, ap_enable_reg_pp0_iter68, ap_enable_reg_pp0_iter69, ap_enable_reg_pp0_iter70, ap_enable_reg_pp0_iter71, ap_enable_reg_pp0_iter72, ap_enable_reg_pp0_iter73)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = 
    ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter73 = ap_const_logic_0) and (ap_enable_reg_pp0_iter72 = ap_const_logic_0) and (ap_enable_reg_pp0_iter71 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter70 = ap_const_logic_0) and (ap_enable_reg_pp0_iter69 = ap_const_logic_0) and (ap_enable_reg_pp0_iter68 = ap_const_logic_0) and (ap_enable_reg_pp0_iter67 = ap_const_logic_0) and (ap_enable_reg_pp0_iter66 = ap_const_logic_0) and (ap_enable_reg_pp0_iter65 = ap_const_logic_0) and (ap_enable_reg_pp0_iter64 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter63 = ap_const_logic_0) and (ap_enable_reg_pp0_iter62 = ap_const_logic_0) and (ap_enable_reg_pp0_iter61 = ap_const_logic_0) and (ap_enable_reg_pp0_iter60 = ap_const_logic_0) and (ap_enable_reg_pp0_iter59 
    = ap_const_logic_0) and (ap_enable_reg_pp0_iter58 = ap_const_logic_0) and (ap_enable_reg_pp0_iter57 = ap_const_logic_0) and (ap_enable_reg_pp0_iter56 = ap_const_logic_0) and (ap_enable_reg_pp0_iter55 = ap_const_logic_0) and (ap_enable_reg_pp0_iter54 = ap_const_logic_0) and (ap_enable_reg_pp0_iter53 = ap_const_logic_0) and (ap_enable_reg_pp0_iter52 = ap_const_logic_0) and (ap_enable_reg_pp0_iter51 = ap_const_logic_0) and (ap_enable_reg_pp0_iter50 = ap_const_logic_0) and (ap_enable_reg_pp0_iter49 = ap_const_logic_0) and (ap_enable_reg_pp0_iter48 = ap_const_logic_0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_0) and (ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 
    = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_c_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, c_fu_80)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_c_load <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_c_load <= c_fu_80;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten404_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten404_fu_88)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten404_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_indvar_flatten404_load <= indvar_flatten404_fu_88;
        end if; 
    end process;


    ap_sig_allocacmp_r_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, r_fu_84)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_r_load <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_r_load <= r_fu_84;
        end if; 
    end process;

    empty_fu_198_p2 <= std_logic_vector(unsigned(p_shl_fu_190_p3) - unsigned(zext_ln85_fu_186_p1));

    gmem_blk_n_AR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_gmem_ARREADY, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter72, m_axi_gmem_RVALID, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter72 = ap_const_logic_1))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln85_fu_140_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten404_load = ap_const_lv4_9) else "0";
    icmp_ln87_fu_158_p2 <= "1" when (ap_sig_allocacmp_c_load = ap_const_lv2_3) else "0";
    lshr_ln89_fu_283_p2 <= std_logic_vector(shift_right(unsigned(gmem_addr_read_reg_380),to_integer(unsigned('0' & zext_ln89_fu_279_p1(31-1 downto 0)))));
    m_axi_gmem_ARADDR <= sext_ln89_fu_259_p1;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv64_1(32 - 1 downto 0);
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;

    m_axi_gmem_RREADY_assign_proc : process(ap_enable_reg_pp0_iter72, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter72 = ap_const_logic_1))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= ap_const_lv512_lc_1;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv64_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
    neg2_fu_292_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(trunc_ln89_1_fu_288_p1));
    normal_factor_2_fu_316_p2 <= std_logic_vector(unsigned(zext_ln89_1_fu_312_p1) + unsigned(normal_factor_fu_76));
    normal_factor_5_out <= normal_factor_fu_76;

    normal_factor_5_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln85_reg_360_pp0_iter71_reg, ap_loop_exit_ready_pp0_iter72_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter72_reg = ap_const_logic_1) and (icmp_ln85_reg_360_pp0_iter71_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            normal_factor_5_out_ap_vld <= ap_const_logic_1;
        else 
            normal_factor_5_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_shl_fu_190_p3 <= (select_ln85_fu_178_p3 & ap_const_lv2_0);
    select_ln75_fu_164_p3 <= 
        ap_const_lv2_0 when (icmp_ln87_fu_158_p2(0) = '1') else 
        ap_sig_allocacmp_c_load;
    select_ln85_fu_178_p3 <= 
        add_ln85_1_fu_172_p2 when (icmp_ln87_fu_158_p2(0) = '1') else 
        ap_sig_allocacmp_r_load;
        sext_ln89_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln89_2_reg_364),64));

    shl_ln3_fu_272_p3 <= (trunc_ln89_reg_369_pp0_iter72_reg & ap_const_lv3_0);
    trunc_ln89_1_fu_288_p1 <= lshr_ln89_fu_283_p2(8 - 1 downto 0);
    trunc_ln89_fu_234_p1 <= add_ln89_1_fu_218_p2(6 - 1 downto 0);
    zext_ln85_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln85_fu_178_p3),4));
    zext_ln87_1_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln75_fu_164_p3),64));
    zext_ln87_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_198_p2),64));
    zext_ln89_1_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(abs4_fu_304_p3),12));
    zext_ln89_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln3_fu_272_p3),512));
end behav;
