-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity edgedetect_edgedetect_Pipeline_VITIS_LOOP_60_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    empty_28 : IN STD_LOGIC_VECTOR (18 downto 0);
    image_gray_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    image_gray_ce0 : OUT STD_LOGIC;
    image_gray_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    image_gray_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    image_gray_ce1 : OUT STD_LOGIC;
    image_gray_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    image_gray_1_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    image_gray_1_ce0 : OUT STD_LOGIC;
    image_gray_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    image_gray_1_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    image_gray_1_ce1 : OUT STD_LOGIC;
    image_gray_1_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    image_gray_2_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    image_gray_2_ce0 : OUT STD_LOGIC;
    image_gray_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    image_gray_2_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    image_gray_2_ce1 : OUT STD_LOGIC;
    image_gray_2_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    image_gray_3_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    image_gray_3_ce0 : OUT STD_LOGIC;
    image_gray_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    image_gray_3_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    image_gray_3_ce1 : OUT STD_LOGIC;
    image_gray_3_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    image_gray_4_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    image_gray_4_ce0 : OUT STD_LOGIC;
    image_gray_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    image_gray_4_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    image_gray_4_ce1 : OUT STD_LOGIC;
    image_gray_4_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    image_gray_5_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    image_gray_5_ce0 : OUT STD_LOGIC;
    image_gray_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    image_gray_5_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    image_gray_5_ce1 : OUT STD_LOGIC;
    image_gray_5_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    empty_29 : IN STD_LOGIC_VECTOR (18 downto 0);
    empty : IN STD_LOGIC_VECTOR (18 downto 0);
    normal_factor_2_reload : IN STD_LOGIC_VECTOR (5 downto 0);
    icmp_ln55 : IN STD_LOGIC_VECTOR (0 downto 0);
    p_cast42 : IN STD_LOGIC_VECTOR (18 downto 0);
    output_r : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of edgedetect_edgedetect_Pipeline_VITIS_LOOP_60_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_27E : STD_LOGIC_VECTOR (9 downto 0) := "1001111110";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv39_AAAAB : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000010101010101010101011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv19_6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000110";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv11_281 : STD_LOGIC_VECTOR (10 downto 0) := "01010000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter46 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter47 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter48 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter49 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter50 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter51 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter52 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter53 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter54 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter55 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter56 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter57 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter58 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter59 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter60 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter61 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter62 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter63 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter64 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter65 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter66 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter67 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter68 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter69 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter70 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter71 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter72 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter73 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter74 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter75 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter76 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter77 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter78 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter79 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter80 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter81 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter82 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter83 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter84 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter85 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter86 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter87 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter88 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter89 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter90 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter91 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter92 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter93 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter94 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter95 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter96 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter97 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter98 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter99 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter100 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter101 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter102 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter103 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter104 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter105 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter106 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter107 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter108 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter109 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state110_pp0_stage0_iter109 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln60_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem_blk_n_W : STD_LOGIC;
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_cast42_cast_fu_687_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast42_cast_reg_1620 : STD_LOGIC_VECTOR (63 downto 0);
    signal c_1_reg_1625 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter10_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter11_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter12_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter13_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter14_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter15_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter16_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter17_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter18_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter19_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter20_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter21_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter22_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter23_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter24_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter25_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter26_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter27_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter28_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter29_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter30_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter31_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter32_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter33_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter34_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter35_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter36_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter37_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_reg_1625_pp0_iter38_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln67_1_fu_705_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln67_1_reg_1635 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln67_1_reg_1635_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln67_1_reg_1635_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln67_1_reg_1635_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln67_1_reg_1635_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln67_1_reg_1635_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln67_1_reg_1635_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln67_1_reg_1635_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln67_1_reg_1635_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln67_1_reg_1635_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln67_1_reg_1635_pp0_iter10_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln67_1_reg_1635_pp0_iter11_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln67_1_reg_1635_pp0_iter12_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln67_1_reg_1635_pp0_iter13_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln67_1_reg_1635_pp0_iter14_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln67_1_reg_1635_pp0_iter15_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln67_1_reg_1635_pp0_iter16_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln67_1_reg_1635_pp0_iter17_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln67_1_reg_1635_pp0_iter18_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln67_1_reg_1635_pp0_iter19_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln67_1_reg_1635_pp0_iter20_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln67_1_reg_1635_pp0_iter21_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln67_1_reg_1635_pp0_iter22_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln60_1_fu_711_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln60_1_reg_1640 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln60_1_reg_1640_pp0_iter1_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln60_1_reg_1640_pp0_iter2_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln60_1_reg_1640_pp0_iter3_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln60_1_reg_1640_pp0_iter4_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln60_1_reg_1640_pp0_iter5_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln60_1_reg_1640_pp0_iter6_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln60_1_reg_1640_pp0_iter7_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln60_1_reg_1640_pp0_iter8_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln60_1_reg_1640_pp0_iter9_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln60_1_reg_1640_pp0_iter10_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln60_1_reg_1640_pp0_iter11_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln60_1_reg_1640_pp0_iter12_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln60_1_reg_1640_pp0_iter13_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln60_1_reg_1640_pp0_iter14_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln60_1_reg_1640_pp0_iter15_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln60_1_reg_1640_pp0_iter16_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln60_1_reg_1640_pp0_iter17_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln60_1_reg_1640_pp0_iter18_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln60_1_reg_1640_pp0_iter19_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln60_1_reg_1640_pp0_iter20_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln60_1_reg_1640_pp0_iter21_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln60_1_reg_1640_pp0_iter22_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln67_fu_715_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_11_reg_1651 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_11_reg_1651_pp0_iter1_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_11_reg_1651_pp0_iter2_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_11_reg_1651_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_11_reg_1651_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_11_reg_1651_pp0_iter5_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_11_reg_1651_pp0_iter6_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_11_reg_1651_pp0_iter7_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_11_reg_1651_pp0_iter8_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_11_reg_1651_pp0_iter9_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_11_reg_1651_pp0_iter10_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_11_reg_1651_pp0_iter11_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_11_reg_1651_pp0_iter12_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_11_reg_1651_pp0_iter13_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_11_reg_1651_pp0_iter14_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_11_reg_1651_pp0_iter15_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_11_reg_1651_pp0_iter16_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_11_reg_1651_pp0_iter17_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_11_reg_1651_pp0_iter18_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_11_reg_1651_pp0_iter19_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_11_reg_1651_pp0_iter20_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_11_reg_1651_pp0_iter21_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_11_reg_1651_pp0_iter22_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln67_fu_752_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln67_reg_1656 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln67_reg_1656_pp0_iter23_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln67_3_fu_756_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln67_3_reg_1669 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_1186_p15 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_reg_1944 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln67_11_fu_1403_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln67_11_reg_1949 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln67_14_fu_1419_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln67_14_reg_1954 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_1_fu_1444_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln70_fu_1478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1969 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1969_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1969_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1969_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1969_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1969_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1969_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1969_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1969_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1969_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1969_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1969_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1969_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1969_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1969_pp0_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln71_fu_1507_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln71_reg_1974 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln71_1_reg_1980 : STD_LOGIC_VECTOR (57 downto 0);
    signal shl_ln71_fu_1545_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln71_reg_1985 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln71_1_fu_1562_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln71_1_reg_1990 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln67_fu_761_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_2_fu_798_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_4_fu_836_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_6_fu_870_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_7_fu_905_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_9_fu_940_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_10_fu_974_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_12_fu_1009_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_13_fu_1044_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln71_fu_1568_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal c_fu_140 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_c_1 : STD_LOGIC_VECTOR (9 downto 0);
    signal image_gray_ce1_local : STD_LOGIC;
    signal image_gray_address1_local : STD_LOGIC_VECTOR (15 downto 0);
    signal image_gray_ce0_local : STD_LOGIC;
    signal image_gray_address0_local : STD_LOGIC_VECTOR (15 downto 0);
    signal image_gray_1_ce1_local : STD_LOGIC;
    signal image_gray_1_address1_local : STD_LOGIC_VECTOR (15 downto 0);
    signal image_gray_1_ce0_local : STD_LOGIC;
    signal image_gray_1_address0_local : STD_LOGIC_VECTOR (15 downto 0);
    signal image_gray_2_ce1_local : STD_LOGIC;
    signal image_gray_2_address1_local : STD_LOGIC_VECTOR (15 downto 0);
    signal image_gray_2_ce0_local : STD_LOGIC;
    signal image_gray_2_address0_local : STD_LOGIC_VECTOR (15 downto 0);
    signal image_gray_3_ce1_local : STD_LOGIC;
    signal image_gray_3_address1_local : STD_LOGIC_VECTOR (15 downto 0);
    signal image_gray_3_ce0_local : STD_LOGIC;
    signal image_gray_3_address0_local : STD_LOGIC_VECTOR (15 downto 0);
    signal image_gray_4_ce1_local : STD_LOGIC;
    signal image_gray_4_address1_local : STD_LOGIC_VECTOR (15 downto 0);
    signal image_gray_4_ce0_local : STD_LOGIC;
    signal image_gray_4_address0_local : STD_LOGIC_VECTOR (15 downto 0);
    signal image_gray_5_ce1_local : STD_LOGIC;
    signal image_gray_5_address1_local : STD_LOGIC_VECTOR (15 downto 0);
    signal image_gray_5_ce0_local : STD_LOGIC;
    signal image_gray_5_address0_local : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln67_fu_725_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln67_fu_725_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln67_fu_725_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_741_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_741_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln67_1_fu_770_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln67_2_fu_773_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln67_1_fu_782_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln67_1_fu_782_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln67_1_fu_782_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_12_fu_788_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln67_3_fu_808_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln67_4_fu_811_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln67_2_fu_820_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln67_2_fu_820_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln67_2_fu_820_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_13_fu_826_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln67_5_fu_846_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln67_3_fu_854_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln67_3_fu_854_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln67_3_fu_854_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_14_fu_860_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln67_6_fu_880_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln67_4_fu_889_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln67_4_fu_889_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln67_4_fu_889_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_15_fu_895_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln67_7_fu_915_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln67_5_fu_924_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln67_5_fu_924_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln67_5_fu_924_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_16_fu_930_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln67_8_fu_950_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln67_6_fu_958_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln67_6_fu_958_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln67_6_fu_958_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_17_fu_964_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln67_9_fu_984_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln67_7_fu_993_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln67_7_fu_993_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln67_7_fu_993_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_18_fu_999_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln67_10_fu_1019_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln67_8_fu_1028_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln67_8_fu_1028_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln67_8_fu_1028_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_19_fu_1034_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal sum_fu_1054_p13 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_fu_1054_p15 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_1089_p13 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_1120_p13 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_1120_p15 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_1155_p13 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_1186_p13 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_1217_p13 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_1248_p13 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_1248_p15 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_1283_p13 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_1314_p13 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_1314_p15 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_1089_p15 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_1155_p15 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_1217_p15 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_1283_p15 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_cast_fu_1353_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_cast_fu_1349_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp8_fu_1365_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_cast_fu_1357_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_cast_fu_1361_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp9_fu_1375_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp9_cast_fu_1381_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp8_cast_fu_1371_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp21_fu_1385_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp3_fu_1391_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln67_15_fu_1399_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln67_5_fu_1151_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln67_11_fu_1279_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln67_14_fu_1345_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln67_13_fu_1409_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln67_16_fu_1415_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln33_fu_1085_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln1_fu_1425_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln67_cast_fu_1432_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln67_17_fu_1441_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln67_12_fu_1436_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln70_fu_1450_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1460_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln70_1_fu_1474_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p2y_fu_1466_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln60_fu_1484_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln71_2_fu_1491_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln71_fu_1497_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln71_1_fu_1487_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln71_fu_1501_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1460_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln70_fu_1521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln70_fu_1526_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixel_fu_1530_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln71_2_fu_1542_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln71_2_fu_1551_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln71_1_fu_1538_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln71_3_fu_1558_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_fu_741_ce : STD_LOGIC;
    signal grp_fu_1460_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter31_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter32_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter33_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter34_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter35_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter36_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter37_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter38_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter39_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter40_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter41_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter42_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter43_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter44_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter45_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter46_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter47_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter48_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter49_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter50_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter51_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter52_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter53_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter54_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter55_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter56_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter57_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter58_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter59_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter60_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter61_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter62_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter63_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter64_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter65_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter66_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter67_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter68_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter69_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter70_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter71_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter72_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter73_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter74_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter75_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter76_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter77_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter78_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter79_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter80_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter81_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter82_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter83_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter84_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter85_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter86_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter87_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter88_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter89_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter90_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter91_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter92_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter93_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter94_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter95_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter96_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter97_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter98_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter99_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter100_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter101_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter102_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter103_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter104_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter105_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter106_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter107_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter108_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal grp_fu_1460_p10 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln67_1_fu_782_p00 : STD_LOGIC_VECTOR (38 downto 0);
    signal mul_ln67_2_fu_820_p00 : STD_LOGIC_VECTOR (38 downto 0);
    signal mul_ln67_3_fu_854_p00 : STD_LOGIC_VECTOR (38 downto 0);
    signal mul_ln67_4_fu_889_p00 : STD_LOGIC_VECTOR (38 downto 0);
    signal mul_ln67_5_fu_924_p00 : STD_LOGIC_VECTOR (38 downto 0);
    signal mul_ln67_6_fu_958_p00 : STD_LOGIC_VECTOR (38 downto 0);
    signal mul_ln67_7_fu_993_p00 : STD_LOGIC_VECTOR (38 downto 0);
    signal mul_ln67_8_fu_1028_p00 : STD_LOGIC_VECTOR (38 downto 0);
    signal mul_ln67_fu_725_p00 : STD_LOGIC_VECTOR (38 downto 0);
    signal sum_fu_1054_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_fu_1054_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_fu_1054_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_fu_1054_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_fu_1054_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_fu_1054_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_1089_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_1089_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_1089_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_1089_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_1089_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_1089_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_1120_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_1120_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_1120_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_1120_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_1120_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_1120_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_1155_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_1155_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_1155_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_1155_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_1155_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_1155_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_fu_1186_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_fu_1186_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_fu_1186_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_fu_1186_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_fu_1186_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_fu_1186_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_1217_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_1217_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_1217_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_1217_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_1217_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_1217_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_1248_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_1248_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_1248_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_1248_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_1248_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_1248_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_1283_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_1283_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_1283_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_1283_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_1283_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_1283_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_1314_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_1314_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_1314_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_1314_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_1314_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_1314_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component edgedetect_mul_19ns_21ns_39_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (20 downto 0);
        dout : OUT STD_LOGIC_VECTOR (38 downto 0) );
    end component;


    component edgedetect_urem_19ns_4ns_3_23_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component edgedetect_sparsemux_13_3_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (2 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (2 downto 0);
        din5_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        def : IN STD_LOGIC_VECTOR (7 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component edgedetect_udiv_12ns_6ns_8_16_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component edgedetect_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_19ns_21ns_39_1_1_U35 : component edgedetect_mul_19ns_21ns_39_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 21,
        dout_WIDTH => 39)
    port map (
        din0 => mul_ln67_fu_725_p0,
        din1 => mul_ln67_fu_725_p1,
        dout => mul_ln67_fu_725_p2);

    urem_19ns_4ns_3_23_1_U36 : component edgedetect_urem_19ns_4ns_3_23_1
    generic map (
        ID => 1,
        NUM_STAGE => 23,
        din0_WIDTH => 19,
        din1_WIDTH => 4,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln67_fu_715_p2,
        din1 => grp_fu_741_p1,
        ce => grp_fu_741_ce,
        dout => grp_fu_741_p2);

    mul_19ns_21ns_39_1_1_U37 : component edgedetect_mul_19ns_21ns_39_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 21,
        dout_WIDTH => 39)
    port map (
        din0 => mul_ln67_1_fu_782_p0,
        din1 => mul_ln67_1_fu_782_p1,
        dout => mul_ln67_1_fu_782_p2);

    mul_19ns_21ns_39_1_1_U38 : component edgedetect_mul_19ns_21ns_39_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 21,
        dout_WIDTH => 39)
    port map (
        din0 => mul_ln67_2_fu_820_p0,
        din1 => mul_ln67_2_fu_820_p1,
        dout => mul_ln67_2_fu_820_p2);

    mul_19ns_21ns_39_1_1_U39 : component edgedetect_mul_19ns_21ns_39_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 21,
        dout_WIDTH => 39)
    port map (
        din0 => mul_ln67_3_fu_854_p0,
        din1 => mul_ln67_3_fu_854_p1,
        dout => mul_ln67_3_fu_854_p2);

    mul_19ns_21ns_39_1_1_U40 : component edgedetect_mul_19ns_21ns_39_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 21,
        dout_WIDTH => 39)
    port map (
        din0 => mul_ln67_4_fu_889_p0,
        din1 => mul_ln67_4_fu_889_p1,
        dout => mul_ln67_4_fu_889_p2);

    mul_19ns_21ns_39_1_1_U41 : component edgedetect_mul_19ns_21ns_39_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 21,
        dout_WIDTH => 39)
    port map (
        din0 => mul_ln67_5_fu_924_p0,
        din1 => mul_ln67_5_fu_924_p1,
        dout => mul_ln67_5_fu_924_p2);

    mul_19ns_21ns_39_1_1_U42 : component edgedetect_mul_19ns_21ns_39_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 21,
        dout_WIDTH => 39)
    port map (
        din0 => mul_ln67_6_fu_958_p0,
        din1 => mul_ln67_6_fu_958_p1,
        dout => mul_ln67_6_fu_958_p2);

    mul_19ns_21ns_39_1_1_U43 : component edgedetect_mul_19ns_21ns_39_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 21,
        dout_WIDTH => 39)
    port map (
        din0 => mul_ln67_7_fu_993_p0,
        din1 => mul_ln67_7_fu_993_p1,
        dout => mul_ln67_7_fu_993_p2);

    mul_19ns_21ns_39_1_1_U44 : component edgedetect_mul_19ns_21ns_39_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 21,
        dout_WIDTH => 39)
    port map (
        din0 => mul_ln67_8_fu_1028_p0,
        din1 => mul_ln67_8_fu_1028_p1,
        dout => mul_ln67_8_fu_1028_p2);

    sparsemux_13_3_8_1_1_U45 : component edgedetect_sparsemux_13_3_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 8,
        CASE1 => "001",
        din1_WIDTH => 8,
        CASE2 => "010",
        din2_WIDTH => 8,
        CASE3 => "011",
        din3_WIDTH => 8,
        CASE4 => "100",
        din4_WIDTH => 8,
        CASE5 => "101",
        din5_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => image_gray_q1,
        din1 => image_gray_1_q1,
        din2 => image_gray_2_q1,
        din3 => image_gray_3_q1,
        din4 => image_gray_4_q1,
        din5 => image_gray_5_q1,
        def => sum_fu_1054_p13,
        sel => trunc_ln67_reg_1656_pp0_iter23_reg,
        dout => sum_fu_1054_p15);

    sparsemux_13_3_8_1_1_U46 : component edgedetect_sparsemux_13_3_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "101",
        din0_WIDTH => 8,
        CASE1 => "000",
        din1_WIDTH => 8,
        CASE2 => "001",
        din2_WIDTH => 8,
        CASE3 => "010",
        din3_WIDTH => 8,
        CASE4 => "011",
        din4_WIDTH => 8,
        CASE5 => "100",
        din5_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => image_gray_q0,
        din1 => image_gray_1_q0,
        din2 => image_gray_2_q0,
        din3 => image_gray_3_q0,
        din4 => image_gray_4_q0,
        din5 => image_gray_5_q0,
        def => tmp_4_fu_1089_p13,
        sel => trunc_ln67_reg_1656_pp0_iter23_reg,
        dout => tmp_4_fu_1089_p15);

    sparsemux_13_3_8_1_1_U47 : component edgedetect_sparsemux_13_3_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "100",
        din0_WIDTH => 8,
        CASE1 => "101",
        din1_WIDTH => 8,
        CASE2 => "000",
        din2_WIDTH => 8,
        CASE3 => "001",
        din3_WIDTH => 8,
        CASE4 => "010",
        din4_WIDTH => 8,
        CASE5 => "011",
        din5_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => image_gray_q1,
        din1 => image_gray_1_q1,
        din2 => image_gray_2_q1,
        din3 => image_gray_3_q1,
        din4 => image_gray_4_q1,
        din5 => image_gray_5_q1,
        def => tmp_5_fu_1120_p13,
        sel => trunc_ln67_reg_1656_pp0_iter23_reg,
        dout => tmp_5_fu_1120_p15);

    sparsemux_13_3_8_1_1_U48 : component edgedetect_sparsemux_13_3_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "010",
        din0_WIDTH => 8,
        CASE1 => "011",
        din1_WIDTH => 8,
        CASE2 => "100",
        din2_WIDTH => 8,
        CASE3 => "101",
        din3_WIDTH => 8,
        CASE4 => "000",
        din4_WIDTH => 8,
        CASE5 => "001",
        din5_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => image_gray_q1,
        din1 => image_gray_1_q1,
        din2 => image_gray_2_q1,
        din3 => image_gray_3_q1,
        din4 => image_gray_4_q1,
        din5 => image_gray_5_q1,
        def => tmp_6_fu_1155_p13,
        sel => trunc_ln67_reg_1656_pp0_iter23_reg,
        dout => tmp_6_fu_1155_p15);

    sparsemux_13_3_8_1_1_U49 : component edgedetect_sparsemux_13_3_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "001",
        din0_WIDTH => 8,
        CASE1 => "010",
        din1_WIDTH => 8,
        CASE2 => "011",
        din2_WIDTH => 8,
        CASE3 => "100",
        din3_WIDTH => 8,
        CASE4 => "101",
        din4_WIDTH => 8,
        CASE5 => "000",
        din5_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => image_gray_q0,
        din1 => image_gray_1_q0,
        din2 => image_gray_2_q0,
        din3 => image_gray_3_q0,
        din4 => image_gray_4_q0,
        din5 => image_gray_5_q0,
        def => tmp_7_fu_1186_p13,
        sel => trunc_ln67_reg_1656_pp0_iter23_reg,
        dout => tmp_7_fu_1186_p15);

    sparsemux_13_3_8_1_1_U50 : component edgedetect_sparsemux_13_3_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 8,
        CASE1 => "001",
        din1_WIDTH => 8,
        CASE2 => "010",
        din2_WIDTH => 8,
        CASE3 => "011",
        din3_WIDTH => 8,
        CASE4 => "100",
        din4_WIDTH => 8,
        CASE5 => "101",
        din5_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => image_gray_q0,
        din1 => image_gray_1_q0,
        din2 => image_gray_2_q0,
        din3 => image_gray_3_q0,
        din4 => image_gray_4_q0,
        din5 => image_gray_5_q0,
        def => tmp_8_fu_1217_p13,
        sel => trunc_ln67_reg_1656_pp0_iter23_reg,
        dout => tmp_8_fu_1217_p15);

    sparsemux_13_3_8_1_1_U51 : component edgedetect_sparsemux_13_3_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "100",
        din0_WIDTH => 8,
        CASE1 => "101",
        din1_WIDTH => 8,
        CASE2 => "000",
        din2_WIDTH => 8,
        CASE3 => "001",
        din3_WIDTH => 8,
        CASE4 => "010",
        din4_WIDTH => 8,
        CASE5 => "011",
        din5_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => image_gray_q0,
        din1 => image_gray_1_q0,
        din2 => image_gray_2_q0,
        din3 => image_gray_3_q0,
        din4 => image_gray_4_q0,
        din5 => image_gray_5_q0,
        def => tmp_9_fu_1248_p13,
        sel => trunc_ln67_reg_1656_pp0_iter23_reg,
        dout => tmp_9_fu_1248_p15);

    sparsemux_13_3_8_1_1_U52 : component edgedetect_sparsemux_13_3_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "011",
        din0_WIDTH => 8,
        CASE1 => "100",
        din1_WIDTH => 8,
        CASE2 => "101",
        din2_WIDTH => 8,
        CASE3 => "000",
        din3_WIDTH => 8,
        CASE4 => "001",
        din4_WIDTH => 8,
        CASE5 => "010",
        din5_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => image_gray_q0,
        din1 => image_gray_1_q0,
        din2 => image_gray_2_q0,
        din3 => image_gray_3_q0,
        din4 => image_gray_4_q0,
        din5 => image_gray_5_q0,
        def => tmp_1_fu_1283_p13,
        sel => trunc_ln67_reg_1656_pp0_iter23_reg,
        dout => tmp_1_fu_1283_p15);

    sparsemux_13_3_8_1_1_U53 : component edgedetect_sparsemux_13_3_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "010",
        din0_WIDTH => 8,
        CASE1 => "011",
        din1_WIDTH => 8,
        CASE2 => "100",
        din2_WIDTH => 8,
        CASE3 => "101",
        din3_WIDTH => 8,
        CASE4 => "000",
        din4_WIDTH => 8,
        CASE5 => "001",
        din5_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => image_gray_q0,
        din1 => image_gray_1_q0,
        din2 => image_gray_2_q0,
        din3 => image_gray_3_q0,
        din4 => image_gray_4_q0,
        din5 => image_gray_5_q0,
        def => tmp_2_fu_1314_p13,
        sel => trunc_ln67_reg_1656_pp0_iter23_reg,
        dout => tmp_2_fu_1314_p15);

    udiv_12ns_6ns_8_16_1_U54 : component edgedetect_udiv_12ns_6ns_8_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 12,
        din1_WIDTH => 6,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_1_fu_1444_p2,
        din1 => grp_fu_1460_p1,
        ce => grp_fu_1460_ce,
        dout => grp_fu_1460_p2);

    flow_control_loop_pipe_sequential_init_U : component edgedetect_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter108_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter100_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter100 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter100 <= ap_enable_reg_pp0_iter99;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter101_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter101 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter101 <= ap_enable_reg_pp0_iter100;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter102_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter102 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter102 <= ap_enable_reg_pp0_iter101;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter103_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter103 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter103 <= ap_enable_reg_pp0_iter102;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter104_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter104 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter104 <= ap_enable_reg_pp0_iter103;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter105_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter105 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter105 <= ap_enable_reg_pp0_iter104;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter106_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter106 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter106 <= ap_enable_reg_pp0_iter105;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter107_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter107 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter107 <= ap_enable_reg_pp0_iter106;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter108_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter108 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter108 <= ap_enable_reg_pp0_iter107;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter109_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter109 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter109 <= ap_enable_reg_pp0_iter108;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter45 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter46 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter47_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter47 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter48_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter48 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter49_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter49 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter50_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter50 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter51_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter51 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter52_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter52 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter53_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter53 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter54_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter54 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter55_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter55 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter56_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter56 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter56 <= ap_enable_reg_pp0_iter55;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter57_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter57 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter57 <= ap_enable_reg_pp0_iter56;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter58_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter58 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter58 <= ap_enable_reg_pp0_iter57;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter59_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter59 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter59 <= ap_enable_reg_pp0_iter58;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter60_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter60 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter60 <= ap_enable_reg_pp0_iter59;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter61_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter61 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter61 <= ap_enable_reg_pp0_iter60;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter62_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter62 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter62 <= ap_enable_reg_pp0_iter61;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter63_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter63 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter63 <= ap_enable_reg_pp0_iter62;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter64_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter64 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter64 <= ap_enable_reg_pp0_iter63;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter65_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter65 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter65 <= ap_enable_reg_pp0_iter64;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter66_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter66 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter66 <= ap_enable_reg_pp0_iter65;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter67_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter67 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter67 <= ap_enable_reg_pp0_iter66;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter68_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter68 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter68 <= ap_enable_reg_pp0_iter67;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter69_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter69 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter69 <= ap_enable_reg_pp0_iter68;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter70_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter70 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter70 <= ap_enable_reg_pp0_iter69;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter71_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter71 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter71 <= ap_enable_reg_pp0_iter70;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter72_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter72 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter72 <= ap_enable_reg_pp0_iter71;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter73_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter73 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter73 <= ap_enable_reg_pp0_iter72;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter74_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter74 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter74 <= ap_enable_reg_pp0_iter73;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter75_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter75 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter75 <= ap_enable_reg_pp0_iter74;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter76_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter76 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter76 <= ap_enable_reg_pp0_iter75;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter77_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter77 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter77 <= ap_enable_reg_pp0_iter76;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter78_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter78 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter78 <= ap_enable_reg_pp0_iter77;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter79_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter79 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter79 <= ap_enable_reg_pp0_iter78;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter80_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter80 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter80 <= ap_enable_reg_pp0_iter79;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter81_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter81 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter81 <= ap_enable_reg_pp0_iter80;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter82_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter82 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter82 <= ap_enable_reg_pp0_iter81;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter83_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter83 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter83 <= ap_enable_reg_pp0_iter82;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter84_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter84 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter84 <= ap_enable_reg_pp0_iter83;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter85_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter85 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter85 <= ap_enable_reg_pp0_iter84;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter86_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter86 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter86 <= ap_enable_reg_pp0_iter85;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter87_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter87 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter87 <= ap_enable_reg_pp0_iter86;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter88_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter88 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter88 <= ap_enable_reg_pp0_iter87;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter89_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter89 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter89 <= ap_enable_reg_pp0_iter88;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter90_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter90 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter90 <= ap_enable_reg_pp0_iter89;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter91_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter91 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter91 <= ap_enable_reg_pp0_iter90;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter92_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter92 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter92 <= ap_enable_reg_pp0_iter91;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter93_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter93 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter93 <= ap_enable_reg_pp0_iter92;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter94_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter94 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter94 <= ap_enable_reg_pp0_iter93;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter95_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter95 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter95 <= ap_enable_reg_pp0_iter94;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter96_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter96 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter96 <= ap_enable_reg_pp0_iter95;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter97_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter97 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter97 <= ap_enable_reg_pp0_iter96;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter98_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter98 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter98 <= ap_enable_reg_pp0_iter97;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter99_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter99 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter99 <= ap_enable_reg_pp0_iter98;
                end if; 
            end if;
        end if;
    end process;


    c_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln60_fu_699_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    c_fu_140 <= add_ln67_1_fu_705_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    c_fu_140 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln67_11_reg_1949 <= add_ln67_11_fu_1403_p2;
                add_ln67_14_reg_1954 <= add_ln67_14_fu_1419_p2;
                add_ln67_1_reg_1635_pp0_iter10_reg <= add_ln67_1_reg_1635_pp0_iter9_reg;
                add_ln67_1_reg_1635_pp0_iter11_reg <= add_ln67_1_reg_1635_pp0_iter10_reg;
                add_ln67_1_reg_1635_pp0_iter12_reg <= add_ln67_1_reg_1635_pp0_iter11_reg;
                add_ln67_1_reg_1635_pp0_iter13_reg <= add_ln67_1_reg_1635_pp0_iter12_reg;
                add_ln67_1_reg_1635_pp0_iter14_reg <= add_ln67_1_reg_1635_pp0_iter13_reg;
                add_ln67_1_reg_1635_pp0_iter15_reg <= add_ln67_1_reg_1635_pp0_iter14_reg;
                add_ln67_1_reg_1635_pp0_iter16_reg <= add_ln67_1_reg_1635_pp0_iter15_reg;
                add_ln67_1_reg_1635_pp0_iter17_reg <= add_ln67_1_reg_1635_pp0_iter16_reg;
                add_ln67_1_reg_1635_pp0_iter18_reg <= add_ln67_1_reg_1635_pp0_iter17_reg;
                add_ln67_1_reg_1635_pp0_iter19_reg <= add_ln67_1_reg_1635_pp0_iter18_reg;
                add_ln67_1_reg_1635_pp0_iter20_reg <= add_ln67_1_reg_1635_pp0_iter19_reg;
                add_ln67_1_reg_1635_pp0_iter21_reg <= add_ln67_1_reg_1635_pp0_iter20_reg;
                add_ln67_1_reg_1635_pp0_iter22_reg <= add_ln67_1_reg_1635_pp0_iter21_reg;
                add_ln67_1_reg_1635_pp0_iter2_reg <= add_ln67_1_reg_1635_pp0_iter1_reg;
                add_ln67_1_reg_1635_pp0_iter3_reg <= add_ln67_1_reg_1635_pp0_iter2_reg;
                add_ln67_1_reg_1635_pp0_iter4_reg <= add_ln67_1_reg_1635_pp0_iter3_reg;
                add_ln67_1_reg_1635_pp0_iter5_reg <= add_ln67_1_reg_1635_pp0_iter4_reg;
                add_ln67_1_reg_1635_pp0_iter6_reg <= add_ln67_1_reg_1635_pp0_iter5_reg;
                add_ln67_1_reg_1635_pp0_iter7_reg <= add_ln67_1_reg_1635_pp0_iter6_reg;
                add_ln67_1_reg_1635_pp0_iter8_reg <= add_ln67_1_reg_1635_pp0_iter7_reg;
                add_ln67_1_reg_1635_pp0_iter9_reg <= add_ln67_1_reg_1635_pp0_iter8_reg;
                add_ln67_3_reg_1669 <= add_ln67_3_fu_756_p2;
                ap_loop_exit_ready_pp0_iter100_reg <= ap_loop_exit_ready_pp0_iter99_reg;
                ap_loop_exit_ready_pp0_iter101_reg <= ap_loop_exit_ready_pp0_iter100_reg;
                ap_loop_exit_ready_pp0_iter102_reg <= ap_loop_exit_ready_pp0_iter101_reg;
                ap_loop_exit_ready_pp0_iter103_reg <= ap_loop_exit_ready_pp0_iter102_reg;
                ap_loop_exit_ready_pp0_iter104_reg <= ap_loop_exit_ready_pp0_iter103_reg;
                ap_loop_exit_ready_pp0_iter105_reg <= ap_loop_exit_ready_pp0_iter104_reg;
                ap_loop_exit_ready_pp0_iter106_reg <= ap_loop_exit_ready_pp0_iter105_reg;
                ap_loop_exit_ready_pp0_iter107_reg <= ap_loop_exit_ready_pp0_iter106_reg;
                ap_loop_exit_ready_pp0_iter108_reg <= ap_loop_exit_ready_pp0_iter107_reg;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
                ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
                ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
                ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
                ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
                ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
                ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
                ap_loop_exit_ready_pp0_iter37_reg <= ap_loop_exit_ready_pp0_iter36_reg;
                ap_loop_exit_ready_pp0_iter38_reg <= ap_loop_exit_ready_pp0_iter37_reg;
                ap_loop_exit_ready_pp0_iter39_reg <= ap_loop_exit_ready_pp0_iter38_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter40_reg <= ap_loop_exit_ready_pp0_iter39_reg;
                ap_loop_exit_ready_pp0_iter41_reg <= ap_loop_exit_ready_pp0_iter40_reg;
                ap_loop_exit_ready_pp0_iter42_reg <= ap_loop_exit_ready_pp0_iter41_reg;
                ap_loop_exit_ready_pp0_iter43_reg <= ap_loop_exit_ready_pp0_iter42_reg;
                ap_loop_exit_ready_pp0_iter44_reg <= ap_loop_exit_ready_pp0_iter43_reg;
                ap_loop_exit_ready_pp0_iter45_reg <= ap_loop_exit_ready_pp0_iter44_reg;
                ap_loop_exit_ready_pp0_iter46_reg <= ap_loop_exit_ready_pp0_iter45_reg;
                ap_loop_exit_ready_pp0_iter47_reg <= ap_loop_exit_ready_pp0_iter46_reg;
                ap_loop_exit_ready_pp0_iter48_reg <= ap_loop_exit_ready_pp0_iter47_reg;
                ap_loop_exit_ready_pp0_iter49_reg <= ap_loop_exit_ready_pp0_iter48_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter50_reg <= ap_loop_exit_ready_pp0_iter49_reg;
                ap_loop_exit_ready_pp0_iter51_reg <= ap_loop_exit_ready_pp0_iter50_reg;
                ap_loop_exit_ready_pp0_iter52_reg <= ap_loop_exit_ready_pp0_iter51_reg;
                ap_loop_exit_ready_pp0_iter53_reg <= ap_loop_exit_ready_pp0_iter52_reg;
                ap_loop_exit_ready_pp0_iter54_reg <= ap_loop_exit_ready_pp0_iter53_reg;
                ap_loop_exit_ready_pp0_iter55_reg <= ap_loop_exit_ready_pp0_iter54_reg;
                ap_loop_exit_ready_pp0_iter56_reg <= ap_loop_exit_ready_pp0_iter55_reg;
                ap_loop_exit_ready_pp0_iter57_reg <= ap_loop_exit_ready_pp0_iter56_reg;
                ap_loop_exit_ready_pp0_iter58_reg <= ap_loop_exit_ready_pp0_iter57_reg;
                ap_loop_exit_ready_pp0_iter59_reg <= ap_loop_exit_ready_pp0_iter58_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter60_reg <= ap_loop_exit_ready_pp0_iter59_reg;
                ap_loop_exit_ready_pp0_iter61_reg <= ap_loop_exit_ready_pp0_iter60_reg;
                ap_loop_exit_ready_pp0_iter62_reg <= ap_loop_exit_ready_pp0_iter61_reg;
                ap_loop_exit_ready_pp0_iter63_reg <= ap_loop_exit_ready_pp0_iter62_reg;
                ap_loop_exit_ready_pp0_iter64_reg <= ap_loop_exit_ready_pp0_iter63_reg;
                ap_loop_exit_ready_pp0_iter65_reg <= ap_loop_exit_ready_pp0_iter64_reg;
                ap_loop_exit_ready_pp0_iter66_reg <= ap_loop_exit_ready_pp0_iter65_reg;
                ap_loop_exit_ready_pp0_iter67_reg <= ap_loop_exit_ready_pp0_iter66_reg;
                ap_loop_exit_ready_pp0_iter68_reg <= ap_loop_exit_ready_pp0_iter67_reg;
                ap_loop_exit_ready_pp0_iter69_reg <= ap_loop_exit_ready_pp0_iter68_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter70_reg <= ap_loop_exit_ready_pp0_iter69_reg;
                ap_loop_exit_ready_pp0_iter71_reg <= ap_loop_exit_ready_pp0_iter70_reg;
                ap_loop_exit_ready_pp0_iter72_reg <= ap_loop_exit_ready_pp0_iter71_reg;
                ap_loop_exit_ready_pp0_iter73_reg <= ap_loop_exit_ready_pp0_iter72_reg;
                ap_loop_exit_ready_pp0_iter74_reg <= ap_loop_exit_ready_pp0_iter73_reg;
                ap_loop_exit_ready_pp0_iter75_reg <= ap_loop_exit_ready_pp0_iter74_reg;
                ap_loop_exit_ready_pp0_iter76_reg <= ap_loop_exit_ready_pp0_iter75_reg;
                ap_loop_exit_ready_pp0_iter77_reg <= ap_loop_exit_ready_pp0_iter76_reg;
                ap_loop_exit_ready_pp0_iter78_reg <= ap_loop_exit_ready_pp0_iter77_reg;
                ap_loop_exit_ready_pp0_iter79_reg <= ap_loop_exit_ready_pp0_iter78_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter80_reg <= ap_loop_exit_ready_pp0_iter79_reg;
                ap_loop_exit_ready_pp0_iter81_reg <= ap_loop_exit_ready_pp0_iter80_reg;
                ap_loop_exit_ready_pp0_iter82_reg <= ap_loop_exit_ready_pp0_iter81_reg;
                ap_loop_exit_ready_pp0_iter83_reg <= ap_loop_exit_ready_pp0_iter82_reg;
                ap_loop_exit_ready_pp0_iter84_reg <= ap_loop_exit_ready_pp0_iter83_reg;
                ap_loop_exit_ready_pp0_iter85_reg <= ap_loop_exit_ready_pp0_iter84_reg;
                ap_loop_exit_ready_pp0_iter86_reg <= ap_loop_exit_ready_pp0_iter85_reg;
                ap_loop_exit_ready_pp0_iter87_reg <= ap_loop_exit_ready_pp0_iter86_reg;
                ap_loop_exit_ready_pp0_iter88_reg <= ap_loop_exit_ready_pp0_iter87_reg;
                ap_loop_exit_ready_pp0_iter89_reg <= ap_loop_exit_ready_pp0_iter88_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter90_reg <= ap_loop_exit_ready_pp0_iter89_reg;
                ap_loop_exit_ready_pp0_iter91_reg <= ap_loop_exit_ready_pp0_iter90_reg;
                ap_loop_exit_ready_pp0_iter92_reg <= ap_loop_exit_ready_pp0_iter91_reg;
                ap_loop_exit_ready_pp0_iter93_reg <= ap_loop_exit_ready_pp0_iter92_reg;
                ap_loop_exit_ready_pp0_iter94_reg <= ap_loop_exit_ready_pp0_iter93_reg;
                ap_loop_exit_ready_pp0_iter95_reg <= ap_loop_exit_ready_pp0_iter94_reg;
                ap_loop_exit_ready_pp0_iter96_reg <= ap_loop_exit_ready_pp0_iter95_reg;
                ap_loop_exit_ready_pp0_iter97_reg <= ap_loop_exit_ready_pp0_iter96_reg;
                ap_loop_exit_ready_pp0_iter98_reg <= ap_loop_exit_ready_pp0_iter97_reg;
                ap_loop_exit_ready_pp0_iter99_reg <= ap_loop_exit_ready_pp0_iter98_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                c_1_reg_1625_pp0_iter10_reg <= c_1_reg_1625_pp0_iter9_reg;
                c_1_reg_1625_pp0_iter11_reg <= c_1_reg_1625_pp0_iter10_reg;
                c_1_reg_1625_pp0_iter12_reg <= c_1_reg_1625_pp0_iter11_reg;
                c_1_reg_1625_pp0_iter13_reg <= c_1_reg_1625_pp0_iter12_reg;
                c_1_reg_1625_pp0_iter14_reg <= c_1_reg_1625_pp0_iter13_reg;
                c_1_reg_1625_pp0_iter15_reg <= c_1_reg_1625_pp0_iter14_reg;
                c_1_reg_1625_pp0_iter16_reg <= c_1_reg_1625_pp0_iter15_reg;
                c_1_reg_1625_pp0_iter17_reg <= c_1_reg_1625_pp0_iter16_reg;
                c_1_reg_1625_pp0_iter18_reg <= c_1_reg_1625_pp0_iter17_reg;
                c_1_reg_1625_pp0_iter19_reg <= c_1_reg_1625_pp0_iter18_reg;
                c_1_reg_1625_pp0_iter20_reg <= c_1_reg_1625_pp0_iter19_reg;
                c_1_reg_1625_pp0_iter21_reg <= c_1_reg_1625_pp0_iter20_reg;
                c_1_reg_1625_pp0_iter22_reg <= c_1_reg_1625_pp0_iter21_reg;
                c_1_reg_1625_pp0_iter23_reg <= c_1_reg_1625_pp0_iter22_reg;
                c_1_reg_1625_pp0_iter24_reg <= c_1_reg_1625_pp0_iter23_reg;
                c_1_reg_1625_pp0_iter25_reg <= c_1_reg_1625_pp0_iter24_reg;
                c_1_reg_1625_pp0_iter26_reg <= c_1_reg_1625_pp0_iter25_reg;
                c_1_reg_1625_pp0_iter27_reg <= c_1_reg_1625_pp0_iter26_reg;
                c_1_reg_1625_pp0_iter28_reg <= c_1_reg_1625_pp0_iter27_reg;
                c_1_reg_1625_pp0_iter29_reg <= c_1_reg_1625_pp0_iter28_reg;
                c_1_reg_1625_pp0_iter2_reg <= c_1_reg_1625_pp0_iter1_reg;
                c_1_reg_1625_pp0_iter30_reg <= c_1_reg_1625_pp0_iter29_reg;
                c_1_reg_1625_pp0_iter31_reg <= c_1_reg_1625_pp0_iter30_reg;
                c_1_reg_1625_pp0_iter32_reg <= c_1_reg_1625_pp0_iter31_reg;
                c_1_reg_1625_pp0_iter33_reg <= c_1_reg_1625_pp0_iter32_reg;
                c_1_reg_1625_pp0_iter34_reg <= c_1_reg_1625_pp0_iter33_reg;
                c_1_reg_1625_pp0_iter35_reg <= c_1_reg_1625_pp0_iter34_reg;
                c_1_reg_1625_pp0_iter36_reg <= c_1_reg_1625_pp0_iter35_reg;
                c_1_reg_1625_pp0_iter37_reg <= c_1_reg_1625_pp0_iter36_reg;
                c_1_reg_1625_pp0_iter38_reg <= c_1_reg_1625_pp0_iter37_reg;
                c_1_reg_1625_pp0_iter3_reg <= c_1_reg_1625_pp0_iter2_reg;
                c_1_reg_1625_pp0_iter4_reg <= c_1_reg_1625_pp0_iter3_reg;
                c_1_reg_1625_pp0_iter5_reg <= c_1_reg_1625_pp0_iter4_reg;
                c_1_reg_1625_pp0_iter6_reg <= c_1_reg_1625_pp0_iter5_reg;
                c_1_reg_1625_pp0_iter7_reg <= c_1_reg_1625_pp0_iter6_reg;
                c_1_reg_1625_pp0_iter8_reg <= c_1_reg_1625_pp0_iter7_reg;
                c_1_reg_1625_pp0_iter9_reg <= c_1_reg_1625_pp0_iter8_reg;
                icmp_ln70_reg_1969 <= icmp_ln70_fu_1478_p2;
                icmp_ln70_reg_1969_pp0_iter26_reg <= icmp_ln70_reg_1969;
                icmp_ln70_reg_1969_pp0_iter27_reg <= icmp_ln70_reg_1969_pp0_iter26_reg;
                icmp_ln70_reg_1969_pp0_iter28_reg <= icmp_ln70_reg_1969_pp0_iter27_reg;
                icmp_ln70_reg_1969_pp0_iter29_reg <= icmp_ln70_reg_1969_pp0_iter28_reg;
                icmp_ln70_reg_1969_pp0_iter30_reg <= icmp_ln70_reg_1969_pp0_iter29_reg;
                icmp_ln70_reg_1969_pp0_iter31_reg <= icmp_ln70_reg_1969_pp0_iter30_reg;
                icmp_ln70_reg_1969_pp0_iter32_reg <= icmp_ln70_reg_1969_pp0_iter31_reg;
                icmp_ln70_reg_1969_pp0_iter33_reg <= icmp_ln70_reg_1969_pp0_iter32_reg;
                icmp_ln70_reg_1969_pp0_iter34_reg <= icmp_ln70_reg_1969_pp0_iter33_reg;
                icmp_ln70_reg_1969_pp0_iter35_reg <= icmp_ln70_reg_1969_pp0_iter34_reg;
                icmp_ln70_reg_1969_pp0_iter36_reg <= icmp_ln70_reg_1969_pp0_iter35_reg;
                icmp_ln70_reg_1969_pp0_iter37_reg <= icmp_ln70_reg_1969_pp0_iter36_reg;
                icmp_ln70_reg_1969_pp0_iter38_reg <= icmp_ln70_reg_1969_pp0_iter37_reg;
                icmp_ln70_reg_1969_pp0_iter39_reg <= icmp_ln70_reg_1969_pp0_iter38_reg;
                shl_ln71_1_reg_1990 <= shl_ln71_1_fu_1562_p2;
                shl_ln71_reg_1985 <= shl_ln71_fu_1545_p2;
                tmp_11_reg_1651_pp0_iter10_reg <= tmp_11_reg_1651_pp0_iter9_reg;
                tmp_11_reg_1651_pp0_iter11_reg <= tmp_11_reg_1651_pp0_iter10_reg;
                tmp_11_reg_1651_pp0_iter12_reg <= tmp_11_reg_1651_pp0_iter11_reg;
                tmp_11_reg_1651_pp0_iter13_reg <= tmp_11_reg_1651_pp0_iter12_reg;
                tmp_11_reg_1651_pp0_iter14_reg <= tmp_11_reg_1651_pp0_iter13_reg;
                tmp_11_reg_1651_pp0_iter15_reg <= tmp_11_reg_1651_pp0_iter14_reg;
                tmp_11_reg_1651_pp0_iter16_reg <= tmp_11_reg_1651_pp0_iter15_reg;
                tmp_11_reg_1651_pp0_iter17_reg <= tmp_11_reg_1651_pp0_iter16_reg;
                tmp_11_reg_1651_pp0_iter18_reg <= tmp_11_reg_1651_pp0_iter17_reg;
                tmp_11_reg_1651_pp0_iter19_reg <= tmp_11_reg_1651_pp0_iter18_reg;
                tmp_11_reg_1651_pp0_iter20_reg <= tmp_11_reg_1651_pp0_iter19_reg;
                tmp_11_reg_1651_pp0_iter21_reg <= tmp_11_reg_1651_pp0_iter20_reg;
                tmp_11_reg_1651_pp0_iter22_reg <= tmp_11_reg_1651_pp0_iter21_reg;
                tmp_11_reg_1651_pp0_iter2_reg <= tmp_11_reg_1651_pp0_iter1_reg;
                tmp_11_reg_1651_pp0_iter3_reg <= tmp_11_reg_1651_pp0_iter2_reg;
                tmp_11_reg_1651_pp0_iter4_reg <= tmp_11_reg_1651_pp0_iter3_reg;
                tmp_11_reg_1651_pp0_iter5_reg <= tmp_11_reg_1651_pp0_iter4_reg;
                tmp_11_reg_1651_pp0_iter6_reg <= tmp_11_reg_1651_pp0_iter5_reg;
                tmp_11_reg_1651_pp0_iter7_reg <= tmp_11_reg_1651_pp0_iter6_reg;
                tmp_11_reg_1651_pp0_iter8_reg <= tmp_11_reg_1651_pp0_iter7_reg;
                tmp_11_reg_1651_pp0_iter9_reg <= tmp_11_reg_1651_pp0_iter8_reg;
                tmp_7_reg_1944 <= tmp_7_fu_1186_p15;
                trunc_ln67_reg_1656 <= trunc_ln67_fu_752_p1;
                trunc_ln67_reg_1656_pp0_iter23_reg <= trunc_ln67_reg_1656;
                trunc_ln71_1_reg_1980 <= add_ln71_fu_1501_p2(63 downto 6);
                trunc_ln71_reg_1974 <= trunc_ln71_fu_1507_p1;
                    zext_ln60_1_reg_1640_pp0_iter10_reg(9 downto 0) <= zext_ln60_1_reg_1640_pp0_iter9_reg(9 downto 0);
                    zext_ln60_1_reg_1640_pp0_iter11_reg(9 downto 0) <= zext_ln60_1_reg_1640_pp0_iter10_reg(9 downto 0);
                    zext_ln60_1_reg_1640_pp0_iter12_reg(9 downto 0) <= zext_ln60_1_reg_1640_pp0_iter11_reg(9 downto 0);
                    zext_ln60_1_reg_1640_pp0_iter13_reg(9 downto 0) <= zext_ln60_1_reg_1640_pp0_iter12_reg(9 downto 0);
                    zext_ln60_1_reg_1640_pp0_iter14_reg(9 downto 0) <= zext_ln60_1_reg_1640_pp0_iter13_reg(9 downto 0);
                    zext_ln60_1_reg_1640_pp0_iter15_reg(9 downto 0) <= zext_ln60_1_reg_1640_pp0_iter14_reg(9 downto 0);
                    zext_ln60_1_reg_1640_pp0_iter16_reg(9 downto 0) <= zext_ln60_1_reg_1640_pp0_iter15_reg(9 downto 0);
                    zext_ln60_1_reg_1640_pp0_iter17_reg(9 downto 0) <= zext_ln60_1_reg_1640_pp0_iter16_reg(9 downto 0);
                    zext_ln60_1_reg_1640_pp0_iter18_reg(9 downto 0) <= zext_ln60_1_reg_1640_pp0_iter17_reg(9 downto 0);
                    zext_ln60_1_reg_1640_pp0_iter19_reg(9 downto 0) <= zext_ln60_1_reg_1640_pp0_iter18_reg(9 downto 0);
                    zext_ln60_1_reg_1640_pp0_iter20_reg(9 downto 0) <= zext_ln60_1_reg_1640_pp0_iter19_reg(9 downto 0);
                    zext_ln60_1_reg_1640_pp0_iter21_reg(9 downto 0) <= zext_ln60_1_reg_1640_pp0_iter20_reg(9 downto 0);
                    zext_ln60_1_reg_1640_pp0_iter22_reg(9 downto 0) <= zext_ln60_1_reg_1640_pp0_iter21_reg(9 downto 0);
                    zext_ln60_1_reg_1640_pp0_iter2_reg(9 downto 0) <= zext_ln60_1_reg_1640_pp0_iter1_reg(9 downto 0);
                    zext_ln60_1_reg_1640_pp0_iter3_reg(9 downto 0) <= zext_ln60_1_reg_1640_pp0_iter2_reg(9 downto 0);
                    zext_ln60_1_reg_1640_pp0_iter4_reg(9 downto 0) <= zext_ln60_1_reg_1640_pp0_iter3_reg(9 downto 0);
                    zext_ln60_1_reg_1640_pp0_iter5_reg(9 downto 0) <= zext_ln60_1_reg_1640_pp0_iter4_reg(9 downto 0);
                    zext_ln60_1_reg_1640_pp0_iter6_reg(9 downto 0) <= zext_ln60_1_reg_1640_pp0_iter5_reg(9 downto 0);
                    zext_ln60_1_reg_1640_pp0_iter7_reg(9 downto 0) <= zext_ln60_1_reg_1640_pp0_iter6_reg(9 downto 0);
                    zext_ln60_1_reg_1640_pp0_iter8_reg(9 downto 0) <= zext_ln60_1_reg_1640_pp0_iter7_reg(9 downto 0);
                    zext_ln60_1_reg_1640_pp0_iter9_reg(9 downto 0) <= zext_ln60_1_reg_1640_pp0_iter8_reg(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln67_1_reg_1635 <= add_ln67_1_fu_705_p2;
                add_ln67_1_reg_1635_pp0_iter1_reg <= add_ln67_1_reg_1635;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                c_1_reg_1625 <= ap_sig_allocacmp_c_1;
                c_1_reg_1625_pp0_iter1_reg <= c_1_reg_1625;
                    p_cast42_cast_reg_1620(18 downto 0) <= p_cast42_cast_fu_687_p1(18 downto 0);
                tmp_11_reg_1651 <= mul_ln67_fu_725_p2(38 downto 22);
                tmp_11_reg_1651_pp0_iter1_reg <= tmp_11_reg_1651;
                    zext_ln60_1_reg_1640(9 downto 0) <= zext_ln60_1_fu_711_p1(9 downto 0);
                    zext_ln60_1_reg_1640_pp0_iter1_reg(9 downto 0) <= zext_ln60_1_reg_1640(9 downto 0);
            end if;
        end if;
    end process;
    p_cast42_cast_reg_1620(63 downto 19) <= "000000000000000000000000000000000000000000000";
    zext_ln60_1_reg_1640(18 downto 10) <= "000000000";
    zext_ln60_1_reg_1640_pp0_iter1_reg(18 downto 10) <= "000000000";
    zext_ln60_1_reg_1640_pp0_iter2_reg(18 downto 10) <= "000000000";
    zext_ln60_1_reg_1640_pp0_iter3_reg(18 downto 10) <= "000000000";
    zext_ln60_1_reg_1640_pp0_iter4_reg(18 downto 10) <= "000000000";
    zext_ln60_1_reg_1640_pp0_iter5_reg(18 downto 10) <= "000000000";
    zext_ln60_1_reg_1640_pp0_iter6_reg(18 downto 10) <= "000000000";
    zext_ln60_1_reg_1640_pp0_iter7_reg(18 downto 10) <= "000000000";
    zext_ln60_1_reg_1640_pp0_iter8_reg(18 downto 10) <= "000000000";
    zext_ln60_1_reg_1640_pp0_iter9_reg(18 downto 10) <= "000000000";
    zext_ln60_1_reg_1640_pp0_iter10_reg(18 downto 10) <= "000000000";
    zext_ln60_1_reg_1640_pp0_iter11_reg(18 downto 10) <= "000000000";
    zext_ln60_1_reg_1640_pp0_iter12_reg(18 downto 10) <= "000000000";
    zext_ln60_1_reg_1640_pp0_iter13_reg(18 downto 10) <= "000000000";
    zext_ln60_1_reg_1640_pp0_iter14_reg(18 downto 10) <= "000000000";
    zext_ln60_1_reg_1640_pp0_iter15_reg(18 downto 10) <= "000000000";
    zext_ln60_1_reg_1640_pp0_iter16_reg(18 downto 10) <= "000000000";
    zext_ln60_1_reg_1640_pp0_iter17_reg(18 downto 10) <= "000000000";
    zext_ln60_1_reg_1640_pp0_iter18_reg(18 downto 10) <= "000000000";
    zext_ln60_1_reg_1640_pp0_iter19_reg(18 downto 10) <= "000000000";
    zext_ln60_1_reg_1640_pp0_iter20_reg(18 downto 10) <= "000000000";
    zext_ln60_1_reg_1640_pp0_iter21_reg(18 downto 10) <= "000000000";
    zext_ln60_1_reg_1640_pp0_iter22_reg(18 downto 10) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln67_10_fu_1019_p2 <= std_logic_vector(unsigned(zext_ln67_3_fu_808_p1) + unsigned(empty));
    add_ln67_11_fu_1403_p2 <= std_logic_vector(unsigned(zext_ln67_15_fu_1399_p1) + unsigned(zext_ln67_5_fu_1151_p1));
    add_ln67_12_fu_1436_p2 <= std_logic_vector(unsigned(add_ln67_11_reg_1949) + unsigned(shl_ln67_cast_fu_1432_p1));
    add_ln67_13_fu_1409_p2 <= std_logic_vector(unsigned(zext_ln67_11_fu_1279_p1) + unsigned(zext_ln67_14_fu_1345_p1));
    add_ln67_14_fu_1419_p2 <= std_logic_vector(unsigned(zext_ln67_16_fu_1415_p1) + unsigned(zext_ln33_fu_1085_p1));
    add_ln67_1_fu_705_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_c_1) + unsigned(ap_const_lv10_1));
    add_ln67_2_fu_773_p2 <= std_logic_vector(unsigned(zext_ln67_1_fu_770_p1) + unsigned(empty_28));
    add_ln67_3_fu_756_p2 <= std_logic_vector(unsigned(c_1_reg_1625_pp0_iter21_reg) + unsigned(ap_const_lv10_2));
    add_ln67_4_fu_811_p2 <= std_logic_vector(unsigned(zext_ln67_3_fu_808_p1) + unsigned(empty_28));
    add_ln67_5_fu_846_p2 <= std_logic_vector(unsigned(zext_ln60_1_reg_1640_pp0_iter22_reg) + unsigned(empty_29));
    add_ln67_6_fu_880_p2 <= std_logic_vector(unsigned(zext_ln67_1_fu_770_p1) + unsigned(empty_29));
    add_ln67_7_fu_915_p2 <= std_logic_vector(unsigned(zext_ln67_3_fu_808_p1) + unsigned(empty_29));
    add_ln67_8_fu_950_p2 <= std_logic_vector(unsigned(zext_ln60_1_reg_1640_pp0_iter22_reg) + unsigned(empty));
    add_ln67_9_fu_984_p2 <= std_logic_vector(unsigned(zext_ln67_1_fu_770_p1) + unsigned(empty));
    add_ln67_fu_715_p2 <= std_logic_vector(unsigned(zext_ln60_1_fu_711_p1) + unsigned(empty_28));
    add_ln71_1_fu_1487_p2 <= std_logic_vector(unsigned(p_cast42_cast_reg_1620) + unsigned(output_r));
    add_ln71_2_fu_1491_p2 <= std_logic_vector(unsigned(zext_ln60_fu_1484_p1) + unsigned(ap_const_lv11_281));
    add_ln71_fu_1501_p2 <= std_logic_vector(unsigned(zext_ln71_fu_1497_p1) + unsigned(add_ln71_1_fu_1487_p2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter109, ap_block_state110_pp0_stage0_iter109)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter109 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state110_pp0_stage0_iter109));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter109, m_axi_gmem_AWREADY, m_axi_gmem_WREADY, ap_block_state110_pp0_stage0_iter109)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter109 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state110_pp0_stage0_iter109)) or ((m_axi_gmem_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_1)) or ((m_axi_gmem_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter109, m_axi_gmem_AWREADY, m_axi_gmem_WREADY, ap_block_state110_pp0_stage0_iter109)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter109 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state110_pp0_stage0_iter109)) or ((m_axi_gmem_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_1)) or ((m_axi_gmem_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1)));
    end process;


    ap_block_state110_pp0_stage0_iter109_assign_proc : process(m_axi_gmem_BVALID)
    begin
                ap_block_state110_pp0_stage0_iter109 <= (m_axi_gmem_BVALID = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln60_fu_699_p2)
    begin
        if (((icmp_ln60_fu_699_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter108_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter108_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45, ap_enable_reg_pp0_iter46, ap_enable_reg_pp0_iter47, ap_enable_reg_pp0_iter48, ap_enable_reg_pp0_iter49, ap_enable_reg_pp0_iter50, ap_enable_reg_pp0_iter51, ap_enable_reg_pp0_iter52, ap_enable_reg_pp0_iter53, ap_enable_reg_pp0_iter54, ap_enable_reg_pp0_iter55, ap_enable_reg_pp0_iter56, ap_enable_reg_pp0_iter57, ap_enable_reg_pp0_iter58, ap_enable_reg_pp0_iter59, ap_enable_reg_pp0_iter60, ap_enable_reg_pp0_iter61, ap_enable_reg_pp0_iter62, ap_enable_reg_pp0_iter63, ap_enable_reg_pp0_iter64, ap_enable_reg_pp0_iter65, ap_enable_reg_pp0_iter66, ap_enable_reg_pp0_iter67, ap_enable_reg_pp0_iter68, ap_enable_reg_pp0_iter69, ap_enable_reg_pp0_iter70, ap_enable_reg_pp0_iter71, ap_enable_reg_pp0_iter72, ap_enable_reg_pp0_iter73, ap_enable_reg_pp0_iter74, ap_enable_reg_pp0_iter75, ap_enable_reg_pp0_iter76, ap_enable_reg_pp0_iter77, ap_enable_reg_pp0_iter78, ap_enable_reg_pp0_iter79, ap_enable_reg_pp0_iter80, ap_enable_reg_pp0_iter81, ap_enable_reg_pp0_iter82, ap_enable_reg_pp0_iter83, ap_enable_reg_pp0_iter84, ap_enable_reg_pp0_iter85, ap_enable_reg_pp0_iter86, ap_enable_reg_pp0_iter87, ap_enable_reg_pp0_iter88, ap_enable_reg_pp0_iter89, ap_enable_reg_pp0_iter90, ap_enable_reg_pp0_iter91, ap_enable_reg_pp0_iter92, ap_enable_reg_pp0_iter93, ap_enable_reg_pp0_iter94, ap_enable_reg_pp0_iter95, ap_enable_reg_pp0_iter96, ap_enable_reg_pp0_iter97, ap_enable_reg_pp0_iter98, ap_enable_reg_pp0_iter99, ap_enable_reg_pp0_iter100, ap_enable_reg_pp0_iter101, ap_enable_reg_pp0_iter102, ap_enable_reg_pp0_iter103, ap_enable_reg_pp0_iter104, ap_enable_reg_pp0_iter105, ap_enable_reg_pp0_iter106, ap_enable_reg_pp0_iter107, ap_enable_reg_pp0_iter108, ap_enable_reg_pp0_iter109)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = 
    ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter109 = ap_const_logic_0) and (ap_enable_reg_pp0_iter108 = ap_const_logic_0) and (ap_enable_reg_pp0_iter107 = ap_const_logic_0) and (ap_enable_reg_pp0_iter106 = ap_const_logic_0) and (ap_enable_reg_pp0_iter105 = ap_const_logic_0) and (ap_enable_reg_pp0_iter104 = ap_const_logic_0) and (ap_enable_reg_pp0_iter103 = ap_const_logic_0) and (ap_enable_reg_pp0_iter102 = ap_const_logic_0) and (ap_enable_reg_pp0_iter101 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter100 = ap_const_logic_0) and (ap_enable_reg_pp0_iter99 = ap_const_logic_0) and (ap_enable_reg_pp0_iter98 = ap_const_logic_0) and (ap_enable_reg_pp0_iter97 = ap_const_logic_0) and (ap_enable_reg_pp0_iter96 = ap_const_logic_0) and (ap_enable_reg_pp0_iter95 = ap_const_logic_0) and (ap_enable_reg_pp0_iter94 = ap_const_logic_0) and (ap_enable_reg_pp0_iter93 = ap_const_logic_0) and (ap_enable_reg_pp0_iter92 = ap_const_logic_0) 
    and (ap_enable_reg_pp0_iter91 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter90 = ap_const_logic_0) and (ap_enable_reg_pp0_iter89 = ap_const_logic_0) and (ap_enable_reg_pp0_iter88 = ap_const_logic_0) and (ap_enable_reg_pp0_iter87 = ap_const_logic_0) and (ap_enable_reg_pp0_iter86 = ap_const_logic_0) and (ap_enable_reg_pp0_iter85 = ap_const_logic_0) and (ap_enable_reg_pp0_iter84 = ap_const_logic_0) and (ap_enable_reg_pp0_iter83 = ap_const_logic_0) and (ap_enable_reg_pp0_iter82 = ap_const_logic_0) and (ap_enable_reg_pp0_iter81 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter80 = ap_const_logic_0) and (ap_enable_reg_pp0_iter79 = ap_const_logic_0) and (ap_enable_reg_pp0_iter78 = ap_const_logic_0) and (ap_enable_reg_pp0_iter77 = ap_const_logic_0) and (ap_enable_reg_pp0_iter76 = ap_const_logic_0) and (ap_enable_reg_pp0_iter75 = ap_const_logic_0) and (ap_enable_reg_pp0_iter74 = ap_const_logic_0) and (ap_enable_reg_pp0_iter73 
    = ap_const_logic_0) and (ap_enable_reg_pp0_iter72 = ap_const_logic_0) and (ap_enable_reg_pp0_iter71 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter70 = ap_const_logic_0) and (ap_enable_reg_pp0_iter69 = ap_const_logic_0) and (ap_enable_reg_pp0_iter68 = ap_const_logic_0) and (ap_enable_reg_pp0_iter67 = ap_const_logic_0) and (ap_enable_reg_pp0_iter66 = ap_const_logic_0) and (ap_enable_reg_pp0_iter65 = ap_const_logic_0) and (ap_enable_reg_pp0_iter64 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter63 = ap_const_logic_0) and (ap_enable_reg_pp0_iter62 = ap_const_logic_0) and (ap_enable_reg_pp0_iter61 = ap_const_logic_0) and (ap_enable_reg_pp0_iter60 = ap_const_logic_0) and (ap_enable_reg_pp0_iter59 = ap_const_logic_0) and (ap_enable_reg_pp0_iter58 = ap_const_logic_0) and (ap_enable_reg_pp0_iter57 = ap_const_logic_0) and (ap_enable_reg_pp0_iter56 = ap_const_logic_0) and (ap_enable_reg_pp0_iter55 = ap_const_logic_0) and (ap_enable_reg_pp0_iter54 
    = ap_const_logic_0) and (ap_enable_reg_pp0_iter53 = ap_const_logic_0) and (ap_enable_reg_pp0_iter52 = ap_const_logic_0) and (ap_enable_reg_pp0_iter51 = ap_const_logic_0) and (ap_enable_reg_pp0_iter50 = ap_const_logic_0) and (ap_enable_reg_pp0_iter49 = ap_const_logic_0) and (ap_enable_reg_pp0_iter48 = ap_const_logic_0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_0) and (ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 
    = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_c_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, c_fu_140, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_c_1 <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_c_1 <= c_fu_140;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter40, m_axi_gmem_AWREADY, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter109, m_axi_gmem_BVALID, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter109 = ap_const_logic_1))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter41, m_axi_gmem_WREADY, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_1))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_1460_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1460_ce <= ap_const_logic_1;
        else 
            grp_fu_1460_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1460_p1 <= grp_fu_1460_p10(6 - 1 downto 0);
    grp_fu_1460_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln70_fu_1450_p3),12));

    grp_fu_741_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_741_ce <= ap_const_logic_1;
        else 
            grp_fu_741_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_741_p1 <= ap_const_lv19_6(4 - 1 downto 0);
    icmp_ln60_fu_699_p2 <= "1" when (ap_sig_allocacmp_c_1 = ap_const_lv10_27E) else "0";
    icmp_ln70_fu_1478_p2 <= "1" when (unsigned(zext_ln70_1_fu_1474_p1) < unsigned(p2y_fu_1466_p3)) else "0";
    image_gray_1_address0 <= image_gray_1_address0_local;

    image_gray_1_address0_local_assign_proc : process(ap_enable_reg_pp0_iter23, ap_block_pp0_stage0, trunc_ln67_reg_1656, zext_ln67_2_fu_798_p1, zext_ln67_7_fu_905_p1, zext_ln67_9_fu_940_p1, zext_ln67_10_fu_974_p1, zext_ln67_12_fu_1009_p1, zext_ln67_13_fu_1044_p1)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if ((trunc_ln67_reg_1656 = ap_const_lv3_3)) then 
                image_gray_1_address0_local <= zext_ln67_13_fu_1044_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_4)) then 
                image_gray_1_address0_local <= zext_ln67_12_fu_1009_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_5)) then 
                image_gray_1_address0_local <= zext_ln67_10_fu_974_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_1)) then 
                image_gray_1_address0_local <= zext_ln67_9_fu_940_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_2)) then 
                image_gray_1_address0_local <= zext_ln67_7_fu_905_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_0)) then 
                image_gray_1_address0_local <= zext_ln67_2_fu_798_p1(16 - 1 downto 0);
            else 
                image_gray_1_address0_local <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            image_gray_1_address0_local <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    image_gray_1_address1 <= image_gray_1_address1_local;

    image_gray_1_address1_local_assign_proc : process(ap_enable_reg_pp0_iter23, ap_block_pp0_stage0, trunc_ln67_reg_1656, zext_ln67_fu_761_p1, zext_ln67_4_fu_836_p1, zext_ln67_6_fu_870_p1)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if ((trunc_ln67_reg_1656 = ap_const_lv3_3)) then 
                image_gray_1_address1_local <= zext_ln67_6_fu_870_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_5)) then 
                image_gray_1_address1_local <= zext_ln67_4_fu_836_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_1)) then 
                image_gray_1_address1_local <= zext_ln67_fu_761_p1(16 - 1 downto 0);
            else 
                image_gray_1_address1_local <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            image_gray_1_address1_local <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    image_gray_1_ce0 <= image_gray_1_ce0_local;

    image_gray_1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter23, ap_block_pp0_stage0_11001, trunc_ln67_reg_1656)
    begin
        if ((((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_5)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_4)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_3)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_2)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_1)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_0)))) then 
            image_gray_1_ce0_local <= ap_const_logic_1;
        else 
            image_gray_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    image_gray_1_ce1 <= image_gray_1_ce1_local;

    image_gray_1_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter23, ap_block_pp0_stage0_11001, trunc_ln67_reg_1656)
    begin
        if ((((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_5)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_3)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_1)))) then 
            image_gray_1_ce1_local <= ap_const_logic_1;
        else 
            image_gray_1_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    image_gray_2_address0 <= image_gray_2_address0_local;

    image_gray_2_address0_local_assign_proc : process(ap_enable_reg_pp0_iter23, ap_block_pp0_stage0, trunc_ln67_reg_1656, zext_ln67_2_fu_798_p1, zext_ln67_7_fu_905_p1, zext_ln67_9_fu_940_p1, zext_ln67_10_fu_974_p1, zext_ln67_12_fu_1009_p1, zext_ln67_13_fu_1044_p1)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if ((trunc_ln67_reg_1656 = ap_const_lv3_4)) then 
                image_gray_2_address0_local <= zext_ln67_13_fu_1044_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_5)) then 
                image_gray_2_address0_local <= zext_ln67_12_fu_1009_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_0)) then 
                image_gray_2_address0_local <= zext_ln67_10_fu_974_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_2)) then 
                image_gray_2_address0_local <= zext_ln67_9_fu_940_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_3)) then 
                image_gray_2_address0_local <= zext_ln67_7_fu_905_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_1)) then 
                image_gray_2_address0_local <= zext_ln67_2_fu_798_p1(16 - 1 downto 0);
            else 
                image_gray_2_address0_local <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            image_gray_2_address0_local <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    image_gray_2_address1 <= image_gray_2_address1_local;

    image_gray_2_address1_local_assign_proc : process(ap_enable_reg_pp0_iter23, ap_block_pp0_stage0, trunc_ln67_reg_1656, zext_ln67_fu_761_p1, zext_ln67_4_fu_836_p1, zext_ln67_6_fu_870_p1)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if ((trunc_ln67_reg_1656 = ap_const_lv3_4)) then 
                image_gray_2_address1_local <= zext_ln67_6_fu_870_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_0)) then 
                image_gray_2_address1_local <= zext_ln67_4_fu_836_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_2)) then 
                image_gray_2_address1_local <= zext_ln67_fu_761_p1(16 - 1 downto 0);
            else 
                image_gray_2_address1_local <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            image_gray_2_address1_local <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    image_gray_2_ce0 <= image_gray_2_ce0_local;

    image_gray_2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter23, ap_block_pp0_stage0_11001, trunc_ln67_reg_1656)
    begin
        if ((((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_5)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_4)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_3)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_2)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_1)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_0)))) then 
            image_gray_2_ce0_local <= ap_const_logic_1;
        else 
            image_gray_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    image_gray_2_ce1 <= image_gray_2_ce1_local;

    image_gray_2_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter23, ap_block_pp0_stage0_11001, trunc_ln67_reg_1656)
    begin
        if ((((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_4)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_2)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_0)))) then 
            image_gray_2_ce1_local <= ap_const_logic_1;
        else 
            image_gray_2_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    image_gray_3_address0 <= image_gray_3_address0_local;

    image_gray_3_address0_local_assign_proc : process(ap_enable_reg_pp0_iter23, ap_block_pp0_stage0, trunc_ln67_reg_1656, zext_ln67_2_fu_798_p1, zext_ln67_7_fu_905_p1, zext_ln67_9_fu_940_p1, zext_ln67_10_fu_974_p1, zext_ln67_12_fu_1009_p1, zext_ln67_13_fu_1044_p1)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if ((trunc_ln67_reg_1656 = ap_const_lv3_5)) then 
                image_gray_3_address0_local <= zext_ln67_13_fu_1044_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_0)) then 
                image_gray_3_address0_local <= zext_ln67_12_fu_1009_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_1)) then 
                image_gray_3_address0_local <= zext_ln67_10_fu_974_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_3)) then 
                image_gray_3_address0_local <= zext_ln67_9_fu_940_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_4)) then 
                image_gray_3_address0_local <= zext_ln67_7_fu_905_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_2)) then 
                image_gray_3_address0_local <= zext_ln67_2_fu_798_p1(16 - 1 downto 0);
            else 
                image_gray_3_address0_local <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            image_gray_3_address0_local <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    image_gray_3_address1 <= image_gray_3_address1_local;

    image_gray_3_address1_local_assign_proc : process(ap_enable_reg_pp0_iter23, ap_block_pp0_stage0, trunc_ln67_reg_1656, zext_ln67_fu_761_p1, zext_ln67_4_fu_836_p1, zext_ln67_6_fu_870_p1)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if ((trunc_ln67_reg_1656 = ap_const_lv3_5)) then 
                image_gray_3_address1_local <= zext_ln67_6_fu_870_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_1)) then 
                image_gray_3_address1_local <= zext_ln67_4_fu_836_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_3)) then 
                image_gray_3_address1_local <= zext_ln67_fu_761_p1(16 - 1 downto 0);
            else 
                image_gray_3_address1_local <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            image_gray_3_address1_local <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    image_gray_3_ce0 <= image_gray_3_ce0_local;

    image_gray_3_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter23, ap_block_pp0_stage0_11001, trunc_ln67_reg_1656)
    begin
        if ((((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_5)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_4)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_3)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_2)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_1)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_0)))) then 
            image_gray_3_ce0_local <= ap_const_logic_1;
        else 
            image_gray_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    image_gray_3_ce1 <= image_gray_3_ce1_local;

    image_gray_3_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter23, ap_block_pp0_stage0_11001, trunc_ln67_reg_1656)
    begin
        if ((((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_5)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_3)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_1)))) then 
            image_gray_3_ce1_local <= ap_const_logic_1;
        else 
            image_gray_3_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    image_gray_4_address0 <= image_gray_4_address0_local;

    image_gray_4_address0_local_assign_proc : process(ap_enable_reg_pp0_iter23, ap_block_pp0_stage0, trunc_ln67_reg_1656, zext_ln67_2_fu_798_p1, zext_ln67_7_fu_905_p1, zext_ln67_9_fu_940_p1, zext_ln67_10_fu_974_p1, zext_ln67_12_fu_1009_p1, zext_ln67_13_fu_1044_p1)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if ((trunc_ln67_reg_1656 = ap_const_lv3_0)) then 
                image_gray_4_address0_local <= zext_ln67_13_fu_1044_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_1)) then 
                image_gray_4_address0_local <= zext_ln67_12_fu_1009_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_2)) then 
                image_gray_4_address0_local <= zext_ln67_10_fu_974_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_4)) then 
                image_gray_4_address0_local <= zext_ln67_9_fu_940_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_5)) then 
                image_gray_4_address0_local <= zext_ln67_7_fu_905_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_3)) then 
                image_gray_4_address0_local <= zext_ln67_2_fu_798_p1(16 - 1 downto 0);
            else 
                image_gray_4_address0_local <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            image_gray_4_address0_local <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    image_gray_4_address1 <= image_gray_4_address1_local;

    image_gray_4_address1_local_assign_proc : process(ap_enable_reg_pp0_iter23, ap_block_pp0_stage0, trunc_ln67_reg_1656, zext_ln67_fu_761_p1, zext_ln67_4_fu_836_p1, zext_ln67_6_fu_870_p1)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if ((trunc_ln67_reg_1656 = ap_const_lv3_0)) then 
                image_gray_4_address1_local <= zext_ln67_6_fu_870_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_2)) then 
                image_gray_4_address1_local <= zext_ln67_4_fu_836_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_4)) then 
                image_gray_4_address1_local <= zext_ln67_fu_761_p1(16 - 1 downto 0);
            else 
                image_gray_4_address1_local <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            image_gray_4_address1_local <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    image_gray_4_ce0 <= image_gray_4_ce0_local;

    image_gray_4_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter23, ap_block_pp0_stage0_11001, trunc_ln67_reg_1656)
    begin
        if ((((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_5)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_4)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_3)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_2)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_1)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_0)))) then 
            image_gray_4_ce0_local <= ap_const_logic_1;
        else 
            image_gray_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    image_gray_4_ce1 <= image_gray_4_ce1_local;

    image_gray_4_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter23, ap_block_pp0_stage0_11001, trunc_ln67_reg_1656)
    begin
        if ((((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_4)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_2)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_0)))) then 
            image_gray_4_ce1_local <= ap_const_logic_1;
        else 
            image_gray_4_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    image_gray_5_address0 <= image_gray_5_address0_local;

    image_gray_5_address0_local_assign_proc : process(ap_enable_reg_pp0_iter23, ap_block_pp0_stage0, trunc_ln67_reg_1656, zext_ln67_2_fu_798_p1, zext_ln67_7_fu_905_p1, zext_ln67_9_fu_940_p1, zext_ln67_10_fu_974_p1, zext_ln67_12_fu_1009_p1, zext_ln67_13_fu_1044_p1)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if ((trunc_ln67_reg_1656 = ap_const_lv3_1)) then 
                image_gray_5_address0_local <= zext_ln67_13_fu_1044_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_2)) then 
                image_gray_5_address0_local <= zext_ln67_12_fu_1009_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_3)) then 
                image_gray_5_address0_local <= zext_ln67_10_fu_974_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_5)) then 
                image_gray_5_address0_local <= zext_ln67_9_fu_940_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_0)) then 
                image_gray_5_address0_local <= zext_ln67_7_fu_905_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_4)) then 
                image_gray_5_address0_local <= zext_ln67_2_fu_798_p1(16 - 1 downto 0);
            else 
                image_gray_5_address0_local <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            image_gray_5_address0_local <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    image_gray_5_address1 <= image_gray_5_address1_local;

    image_gray_5_address1_local_assign_proc : process(ap_enable_reg_pp0_iter23, ap_block_pp0_stage0, trunc_ln67_reg_1656, zext_ln67_fu_761_p1, zext_ln67_4_fu_836_p1, zext_ln67_6_fu_870_p1)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if ((trunc_ln67_reg_1656 = ap_const_lv3_1)) then 
                image_gray_5_address1_local <= zext_ln67_6_fu_870_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_3)) then 
                image_gray_5_address1_local <= zext_ln67_4_fu_836_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_5)) then 
                image_gray_5_address1_local <= zext_ln67_fu_761_p1(16 - 1 downto 0);
            else 
                image_gray_5_address1_local <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            image_gray_5_address1_local <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    image_gray_5_ce0 <= image_gray_5_ce0_local;

    image_gray_5_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter23, ap_block_pp0_stage0_11001, trunc_ln67_reg_1656)
    begin
        if ((((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_5)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_4)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_3)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_2)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_1)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_0)))) then 
            image_gray_5_ce0_local <= ap_const_logic_1;
        else 
            image_gray_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    image_gray_5_ce1 <= image_gray_5_ce1_local;

    image_gray_5_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter23, ap_block_pp0_stage0_11001, trunc_ln67_reg_1656)
    begin
        if ((((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_5)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_3)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_1)))) then 
            image_gray_5_ce1_local <= ap_const_logic_1;
        else 
            image_gray_5_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    image_gray_address0 <= image_gray_address0_local;

    image_gray_address0_local_assign_proc : process(ap_enable_reg_pp0_iter23, ap_block_pp0_stage0, trunc_ln67_reg_1656, zext_ln67_2_fu_798_p1, zext_ln67_7_fu_905_p1, zext_ln67_9_fu_940_p1, zext_ln67_10_fu_974_p1, zext_ln67_12_fu_1009_p1, zext_ln67_13_fu_1044_p1)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if ((trunc_ln67_reg_1656 = ap_const_lv3_2)) then 
                image_gray_address0_local <= zext_ln67_13_fu_1044_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_3)) then 
                image_gray_address0_local <= zext_ln67_12_fu_1009_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_4)) then 
                image_gray_address0_local <= zext_ln67_10_fu_974_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_0)) then 
                image_gray_address0_local <= zext_ln67_9_fu_940_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_1)) then 
                image_gray_address0_local <= zext_ln67_7_fu_905_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_5)) then 
                image_gray_address0_local <= zext_ln67_2_fu_798_p1(16 - 1 downto 0);
            else 
                image_gray_address0_local <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            image_gray_address0_local <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    image_gray_address1 <= image_gray_address1_local;

    image_gray_address1_local_assign_proc : process(ap_enable_reg_pp0_iter23, ap_block_pp0_stage0, trunc_ln67_reg_1656, zext_ln67_fu_761_p1, zext_ln67_4_fu_836_p1, zext_ln67_6_fu_870_p1)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if ((trunc_ln67_reg_1656 = ap_const_lv3_2)) then 
                image_gray_address1_local <= zext_ln67_6_fu_870_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_4)) then 
                image_gray_address1_local <= zext_ln67_4_fu_836_p1(16 - 1 downto 0);
            elsif ((trunc_ln67_reg_1656 = ap_const_lv3_0)) then 
                image_gray_address1_local <= zext_ln67_fu_761_p1(16 - 1 downto 0);
            else 
                image_gray_address1_local <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            image_gray_address1_local <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    image_gray_ce0 <= image_gray_ce0_local;

    image_gray_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter23, ap_block_pp0_stage0_11001, trunc_ln67_reg_1656)
    begin
        if ((((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_5)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_4)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_3)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_2)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_1)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_0)))) then 
            image_gray_ce0_local <= ap_const_logic_1;
        else 
            image_gray_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    image_gray_ce1 <= image_gray_ce1_local;

    image_gray_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter23, ap_block_pp0_stage0_11001, trunc_ln67_reg_1656)
    begin
        if ((((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_4)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_2)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln67_reg_1656 = ap_const_lv3_0)))) then 
            image_gray_ce1_local <= ap_const_logic_1;
        else 
            image_gray_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_ARVALID <= ap_const_logic_0;
    m_axi_gmem_AWADDR <= sext_ln71_fu_1568_p1;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv64_1(32 - 1 downto 0);
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            m_axi_gmem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_BREADY_assign_proc : process(ap_enable_reg_pp0_iter109, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter109 = ap_const_logic_1))) then 
            m_axi_gmem_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_RREADY <= ap_const_logic_0;
    m_axi_gmem_WDATA <= shl_ln71_1_reg_1990;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= shl_ln71_reg_1985;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(ap_enable_reg_pp0_iter41, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter41 = ap_const_logic_1))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln67_1_fu_782_p0 <= mul_ln67_1_fu_782_p00(19 - 1 downto 0);
    mul_ln67_1_fu_782_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln67_2_fu_773_p2),39));
    mul_ln67_1_fu_782_p1 <= ap_const_lv39_AAAAB(21 - 1 downto 0);
    mul_ln67_2_fu_820_p0 <= mul_ln67_2_fu_820_p00(19 - 1 downto 0);
    mul_ln67_2_fu_820_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln67_4_fu_811_p2),39));
    mul_ln67_2_fu_820_p1 <= ap_const_lv39_AAAAB(21 - 1 downto 0);
    mul_ln67_3_fu_854_p0 <= mul_ln67_3_fu_854_p00(19 - 1 downto 0);
    mul_ln67_3_fu_854_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln67_5_fu_846_p2),39));
    mul_ln67_3_fu_854_p1 <= ap_const_lv39_AAAAB(21 - 1 downto 0);
    mul_ln67_4_fu_889_p0 <= mul_ln67_4_fu_889_p00(19 - 1 downto 0);
    mul_ln67_4_fu_889_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln67_6_fu_880_p2),39));
    mul_ln67_4_fu_889_p1 <= ap_const_lv39_AAAAB(21 - 1 downto 0);
    mul_ln67_5_fu_924_p0 <= mul_ln67_5_fu_924_p00(19 - 1 downto 0);
    mul_ln67_5_fu_924_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln67_7_fu_915_p2),39));
    mul_ln67_5_fu_924_p1 <= ap_const_lv39_AAAAB(21 - 1 downto 0);
    mul_ln67_6_fu_958_p0 <= mul_ln67_6_fu_958_p00(19 - 1 downto 0);
    mul_ln67_6_fu_958_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln67_8_fu_950_p2),39));
    mul_ln67_6_fu_958_p1 <= ap_const_lv39_AAAAB(21 - 1 downto 0);
    mul_ln67_7_fu_993_p0 <= mul_ln67_7_fu_993_p00(19 - 1 downto 0);
    mul_ln67_7_fu_993_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln67_9_fu_984_p2),39));
    mul_ln67_7_fu_993_p1 <= ap_const_lv39_AAAAB(21 - 1 downto 0);
    mul_ln67_8_fu_1028_p0 <= mul_ln67_8_fu_1028_p00(19 - 1 downto 0);
    mul_ln67_8_fu_1028_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln67_10_fu_1019_p2),39));
    mul_ln67_8_fu_1028_p1 <= ap_const_lv39_AAAAB(21 - 1 downto 0);
    mul_ln67_fu_725_p0 <= mul_ln67_fu_725_p00(19 - 1 downto 0);
    mul_ln67_fu_725_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln67_fu_715_p2),39));
    mul_ln67_fu_725_p1 <= ap_const_lv39_AAAAB(21 - 1 downto 0);
    p2y_fu_1466_p3 <= (select_ln70_fu_1450_p3 & ap_const_lv8_0);
    p_cast42_cast_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_cast42),64));
    pixel_fu_1530_p3 <= 
        ap_const_lv8_FF when (xor_ln70_fu_1521_p2(0) = '1') else 
        trunc_ln70_fu_1526_p1;
    select_ln70_fu_1450_p3 <= 
        ap_const_lv6_1 when (icmp_ln55(0) = '1') else 
        normal_factor_2_reload;
        sext_ln71_fu_1568_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln71_1_reg_1980),64));

    shl_ln1_fu_1425_p3 <= (tmp_7_reg_1944 & ap_const_lv2_0);
    shl_ln67_cast_fu_1432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_1425_p3),12));
    shl_ln71_1_fu_1562_p2 <= std_logic_vector(shift_left(unsigned(zext_ln71_1_fu_1538_p1),to_integer(unsigned('0' & zext_ln71_3_fu_1558_p1(31-1 downto 0)))));
    shl_ln71_2_fu_1551_p3 <= (trunc_ln71_reg_1974 & ap_const_lv3_0);
    shl_ln71_fu_1545_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & zext_ln71_2_fu_1542_p1(31-1 downto 0)))));
    sum_1_fu_1444_p2 <= std_logic_vector(unsigned(zext_ln67_17_fu_1441_p1) + unsigned(add_ln67_12_fu_1436_p2));
    sum_fu_1054_p13 <= "XXXXXXXX";
    tmp21_fu_1385_p2 <= std_logic_vector(unsigned(tmp9_cast_fu_1381_p1) + unsigned(tmp8_cast_fu_1371_p1));
    tmp3_fu_1391_p3 <= (tmp21_fu_1385_p2 & ap_const_lv1_0);
    tmp8_cast_fu_1371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp8_fu_1365_p2),10));
    tmp8_fu_1365_p2 <= std_logic_vector(unsigned(tmp_6_cast_fu_1353_p1) + unsigned(tmp_4_cast_fu_1349_p1));
    tmp9_cast_fu_1381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp9_fu_1375_p2),10));
    tmp9_fu_1375_p2 <= std_logic_vector(unsigned(tmp_8_cast_fu_1357_p1) + unsigned(tmp_1_cast_fu_1361_p1));
    tmp_12_fu_788_p4 <= mul_ln67_1_fu_782_p2(38 downto 22);
    tmp_13_fu_826_p4 <= mul_ln67_2_fu_820_p2(38 downto 22);
    tmp_14_fu_860_p4 <= mul_ln67_3_fu_854_p2(38 downto 22);
    tmp_15_fu_895_p4 <= mul_ln67_4_fu_889_p2(38 downto 22);
    tmp_16_fu_930_p4 <= mul_ln67_5_fu_924_p2(38 downto 22);
    tmp_17_fu_964_p4 <= mul_ln67_6_fu_958_p2(38 downto 22);
    tmp_18_fu_999_p4 <= mul_ln67_7_fu_993_p2(38 downto 22);
    tmp_19_fu_1034_p4 <= mul_ln67_8_fu_1028_p2(38 downto 22);
    tmp_1_cast_fu_1361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_1283_p15),9));
    tmp_1_fu_1283_p13 <= "XXXXXXXX";
    tmp_2_fu_1314_p13 <= "XXXXXXXX";
    tmp_4_cast_fu_1349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_1089_p15),9));
    tmp_4_fu_1089_p13 <= "XXXXXXXX";
    tmp_5_fu_1120_p13 <= "XXXXXXXX";
    tmp_6_cast_fu_1353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_1155_p15),9));
    tmp_6_fu_1155_p13 <= "XXXXXXXX";
    tmp_7_fu_1186_p13 <= "XXXXXXXX";
    tmp_8_cast_fu_1357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_1217_p15),9));
    tmp_8_fu_1217_p13 <= "XXXXXXXX";
    tmp_9_fu_1248_p13 <= "XXXXXXXX";
    trunc_ln67_fu_752_p1 <= grp_fu_741_p2(3 - 1 downto 0);
    trunc_ln70_fu_1526_p1 <= grp_fu_1460_p2(8 - 1 downto 0);
    trunc_ln71_fu_1507_p1 <= add_ln71_fu_1501_p2(6 - 1 downto 0);
    xor_ln70_fu_1521_p2 <= (icmp_ln70_reg_1969_pp0_iter39_reg xor ap_const_lv1_1);
    zext_ln33_fu_1085_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_1054_p15),10));
    zext_ln60_1_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_c_1),19));
    zext_ln60_fu_1484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_1_reg_1625_pp0_iter38_reg),11));
    zext_ln67_10_fu_974_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_964_p4),64));
    zext_ln67_11_fu_1279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_1248_p15),9));
    zext_ln67_12_fu_1009_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_999_p4),64));
    zext_ln67_13_fu_1044_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_1034_p4),64));
    zext_ln67_14_fu_1345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_1314_p15),9));
    zext_ln67_15_fu_1399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_fu_1391_p3),12));
    zext_ln67_16_fu_1415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln67_13_fu_1409_p2),10));
    zext_ln67_17_fu_1441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln67_14_reg_1954),12));
    zext_ln67_1_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln67_1_reg_1635_pp0_iter22_reg),19));
    zext_ln67_2_fu_798_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_788_p4),64));
    zext_ln67_3_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln67_3_reg_1669),19));
    zext_ln67_4_fu_836_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_826_p4),64));
    zext_ln67_5_fu_1151_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_1120_p15),12));
    zext_ln67_6_fu_870_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_860_p4),64));
    zext_ln67_7_fu_905_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_895_p4),64));
    zext_ln67_9_fu_940_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_930_p4),64));
    zext_ln67_fu_761_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_reg_1651_pp0_iter22_reg),64));
    zext_ln70_1_fu_1474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_1_fu_1444_p2),14));
    zext_ln71_1_fu_1538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_fu_1530_p3),512));
    zext_ln71_2_fu_1542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln71_reg_1974),64));
    zext_ln71_3_fu_1558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln71_2_fu_1551_p3),512));
    zext_ln71_fu_1497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln71_2_fu_1491_p2),64));
end behav;
