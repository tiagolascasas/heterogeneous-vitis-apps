-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity edgedetect_edgedetect_Pipeline_VITIS_LOOP_183_1_VITIS_LOOP_185_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln183 : IN STD_LOGIC_VECTOR (57 downto 0);
    image_gray_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    image_gray_ce0 : OUT STD_LOGIC;
    image_gray_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    image_gray_1_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    image_gray_1_ce0 : OUT STD_LOGIC;
    image_gray_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    image_gray_2_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    image_gray_2_ce0 : OUT STD_LOGIC;
    image_gray_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    image_gray_3_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    image_gray_3_ce0 : OUT STD_LOGIC;
    image_gray_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    image_gray_4_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    image_gray_4_ce0 : OUT STD_LOGIC;
    image_gray_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    image_gray_5_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    image_gray_5_ce0 : OUT STD_LOGIC;
    image_gray_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    temp_buf_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    temp_buf_ce0 : OUT STD_LOGIC;
    temp_buf_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of edgedetect_edgedetect_Pipeline_VITIS_LOOP_183_1_VITIS_LOOP_185_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv497_lc_1 : STD_LOGIC_VECTOR (496 downto
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv19_4B000 : STD_LOGIC_VECTOR (18 downto 0) := "1001011000000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv19_6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000110";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv39_AAAAB : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000010101010101010101011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln191_1_reg_631 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_1_reg_631_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state26_io : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln183_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln185_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_619 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_619_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_619_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_619_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_619_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_619_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_619_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_619_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_619_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_619_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_619_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_619_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_619_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_619_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_619_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_619_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_619_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_619_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_619_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_619_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_619_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_619_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_619_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln188_fu_352_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln188_reg_624 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln188_reg_624_pp0_iter2_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln188_reg_624_pp0_iter3_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln188_reg_624_pp0_iter4_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln188_reg_624_pp0_iter5_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln188_reg_624_pp0_iter6_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln188_reg_624_pp0_iter7_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln188_reg_624_pp0_iter8_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln188_reg_624_pp0_iter9_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln188_reg_624_pp0_iter10_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln188_reg_624_pp0_iter11_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln188_reg_624_pp0_iter12_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln188_reg_624_pp0_iter13_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln188_reg_624_pp0_iter14_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln188_reg_624_pp0_iter15_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln188_reg_624_pp0_iter16_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln188_reg_624_pp0_iter17_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln188_reg_624_pp0_iter18_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln188_reg_624_pp0_iter19_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln188_reg_624_pp0_iter20_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln188_reg_624_pp0_iter21_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal icmp_ln191_1_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_1_reg_631_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_1_reg_631_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_1_reg_631_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_1_reg_631_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_1_reg_631_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_1_reg_631_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_1_reg_631_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_1_reg_631_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_1_reg_631_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_1_reg_631_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_1_reg_631_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_1_reg_631_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_1_reg_631_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_1_reg_631_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_1_reg_631_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_1_reg_631_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_1_reg_631_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_1_reg_631_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_1_reg_631_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_1_reg_631_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_1_reg_631_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_1_reg_631_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal image_gray_load_reg_666 : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_load_reg_666_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_load_reg_666_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_load_reg_666_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_load_reg_666_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_load_reg_666_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_load_reg_666_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_load_reg_666_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_load_reg_666_pp0_iter11_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_load_reg_666_pp0_iter12_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_load_reg_666_pp0_iter13_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_load_reg_666_pp0_iter14_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_load_reg_666_pp0_iter15_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_load_reg_666_pp0_iter16_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_load_reg_666_pp0_iter17_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_load_reg_666_pp0_iter18_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_load_reg_666_pp0_iter19_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_load_reg_666_pp0_iter20_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_load_reg_666_pp0_iter21_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_load_reg_666_pp0_iter22_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_1_load_reg_671 : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_1_load_reg_671_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_1_load_reg_671_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_1_load_reg_671_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_1_load_reg_671_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_1_load_reg_671_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_1_load_reg_671_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_1_load_reg_671_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_1_load_reg_671_pp0_iter11_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_1_load_reg_671_pp0_iter12_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_1_load_reg_671_pp0_iter13_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_1_load_reg_671_pp0_iter14_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_1_load_reg_671_pp0_iter15_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_1_load_reg_671_pp0_iter16_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_1_load_reg_671_pp0_iter17_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_1_load_reg_671_pp0_iter18_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_1_load_reg_671_pp0_iter19_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_1_load_reg_671_pp0_iter20_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_1_load_reg_671_pp0_iter21_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_1_load_reg_671_pp0_iter22_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_2_load_reg_676 : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_2_load_reg_676_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_2_load_reg_676_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_2_load_reg_676_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_2_load_reg_676_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_2_load_reg_676_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_2_load_reg_676_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_2_load_reg_676_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_2_load_reg_676_pp0_iter11_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_2_load_reg_676_pp0_iter12_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_2_load_reg_676_pp0_iter13_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_2_load_reg_676_pp0_iter14_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_2_load_reg_676_pp0_iter15_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_2_load_reg_676_pp0_iter16_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_2_load_reg_676_pp0_iter17_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_2_load_reg_676_pp0_iter18_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_2_load_reg_676_pp0_iter19_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_2_load_reg_676_pp0_iter20_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_2_load_reg_676_pp0_iter21_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_2_load_reg_676_pp0_iter22_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_3_load_reg_681 : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_3_load_reg_681_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_3_load_reg_681_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_3_load_reg_681_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_3_load_reg_681_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_3_load_reg_681_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_3_load_reg_681_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_3_load_reg_681_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_3_load_reg_681_pp0_iter11_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_3_load_reg_681_pp0_iter12_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_3_load_reg_681_pp0_iter13_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_3_load_reg_681_pp0_iter14_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_3_load_reg_681_pp0_iter15_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_3_load_reg_681_pp0_iter16_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_3_load_reg_681_pp0_iter17_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_3_load_reg_681_pp0_iter18_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_3_load_reg_681_pp0_iter19_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_3_load_reg_681_pp0_iter20_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_3_load_reg_681_pp0_iter21_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_3_load_reg_681_pp0_iter22_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_4_load_reg_686 : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_4_load_reg_686_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_4_load_reg_686_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_4_load_reg_686_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_4_load_reg_686_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_4_load_reg_686_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_4_load_reg_686_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_4_load_reg_686_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_4_load_reg_686_pp0_iter11_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_4_load_reg_686_pp0_iter12_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_4_load_reg_686_pp0_iter13_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_4_load_reg_686_pp0_iter14_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_4_load_reg_686_pp0_iter15_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_4_load_reg_686_pp0_iter16_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_4_load_reg_686_pp0_iter17_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_4_load_reg_686_pp0_iter18_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_4_load_reg_686_pp0_iter19_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_4_load_reg_686_pp0_iter20_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_4_load_reg_686_pp0_iter21_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_4_load_reg_686_pp0_iter22_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_5_load_reg_691 : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_5_load_reg_691_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_5_load_reg_691_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_5_load_reg_691_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_5_load_reg_691_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_5_load_reg_691_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_5_load_reg_691_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_5_load_reg_691_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_5_load_reg_691_pp0_iter11_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_5_load_reg_691_pp0_iter12_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_5_load_reg_691_pp0_iter13_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_5_load_reg_691_pp0_iter14_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_5_load_reg_691_pp0_iter15_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_5_load_reg_691_pp0_iter16_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_5_load_reg_691_pp0_iter17_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_5_load_reg_691_pp0_iter18_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_5_load_reg_691_pp0_iter19_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_5_load_reg_691_pp0_iter20_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_5_load_reg_691_pp0_iter21_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_5_load_reg_691_pp0_iter22_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln191_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_reg_701 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_reg_701_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln178_1_fu_521_p3 : STD_LOGIC_VECTOR (496 downto 0);
    signal select_ln178_1_reg_707 : STD_LOGIC_VECTOR (496 downto 0);
    signal zext_ln188_1_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln188_fu_424_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal phi_ln191_fu_124 : STD_LOGIC_VECTOR (496 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal select_ln191_fu_549_p3 : STD_LOGIC_VECTOR (496 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_128 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal add_ln185_fu_374_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_fu_132 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal select_ln183_fu_310_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten55_fu_136 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    signal add_ln183_fu_278_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal image_gray_ce0_local : STD_LOGIC;
    signal image_gray_1_ce0_local : STD_LOGIC;
    signal image_gray_2_ce0_local : STD_LOGIC;
    signal image_gray_3_ce0_local : STD_LOGIC;
    signal image_gray_4_ce0_local : STD_LOGIC;
    signal image_gray_5_ce0_local : STD_LOGIC;
    signal temp_buf_ce0_local : STD_LOGIC;
    signal add_ln183_1_fu_304_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_318_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_20_fu_330_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln178_fu_296_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_fu_326_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_shl11_fu_338_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal empty_fu_346_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln185_fu_342_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_362_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln188_fu_358_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln188_fu_398_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln188_fu_398_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln188_fu_398_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_21_fu_404_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_362_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_432_p13 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_432_p14 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_432_p15 : STD_LOGIC_VECTOR (7 downto 0);
    signal abscond13_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg12_fu_458_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal abscond16_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg15_fu_478_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp1_fu_470_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp2_fu_490_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln190_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp3_fu_504_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_528_p4 : STD_LOGIC_VECTOR (488 downto 0);
    signal sext_ln185_fu_538_p1 : STD_LOGIC_VECTOR (495 downto 0);
    signal tmp_s_fu_542_p3 : STD_LOGIC_VECTOR (496 downto 0);
    signal sext_ln183_1_fu_567_p1 : STD_LOGIC_VECTOR (503 downto 0);
    signal or_ln_fu_570_p3 : STD_LOGIC_VECTOR (504 downto 0);
    signal grp_fu_362_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal mul_ln188_fu_398_p00 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_3_fu_432_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_432_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_432_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_432_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_432_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_432_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component edgedetect_urem_19ns_4ns_3_23_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component edgedetect_mul_19ns_21ns_39_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (20 downto 0);
        dout : OUT STD_LOGIC_VECTOR (38 downto 0) );
    end component;


    component edgedetect_sparsemux_13_3_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (2 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (2 downto 0);
        din5_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        def : IN STD_LOGIC_VECTOR (7 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component edgedetect_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    urem_19ns_4ns_3_23_1_U100 : component edgedetect_urem_19ns_4ns_3_23_1
    generic map (
        ID => 1,
        NUM_STAGE => 23,
        din0_WIDTH => 19,
        din1_WIDTH => 4,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln188_fu_352_p2,
        din1 => grp_fu_362_p1,
        ce => grp_fu_362_ce,
        dout => grp_fu_362_p2);

    mul_19ns_21ns_39_1_1_U101 : component edgedetect_mul_19ns_21ns_39_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 21,
        dout_WIDTH => 39)
    port map (
        din0 => mul_ln188_fu_398_p0,
        din1 => mul_ln188_fu_398_p1,
        dout => mul_ln188_fu_398_p2);

    sparsemux_13_3_8_1_1_U102 : component edgedetect_sparsemux_13_3_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 8,
        CASE1 => "001",
        din1_WIDTH => 8,
        CASE2 => "010",
        din2_WIDTH => 8,
        CASE3 => "011",
        din3_WIDTH => 8,
        CASE4 => "100",
        din4_WIDTH => 8,
        CASE5 => "101",
        din5_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => image_gray_load_reg_666_pp0_iter22_reg,
        din1 => image_gray_1_load_reg_671_pp0_iter22_reg,
        din2 => image_gray_2_load_reg_676_pp0_iter22_reg,
        din3 => image_gray_3_load_reg_681_pp0_iter22_reg,
        din4 => image_gray_4_load_reg_686_pp0_iter22_reg,
        din5 => image_gray_5_load_reg_691_pp0_iter22_reg,
        def => tmp_3_fu_432_p13,
        sel => tmp_3_fu_432_p14,
        dout => tmp_3_fu_432_p15);

    flow_control_loop_pipe_sequential_init_U : component edgedetect_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter24_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_132 <= ap_const_lv9_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln183_fu_272_p2 = ap_const_lv1_0))) then 
                    i_fu_132 <= select_ln183_fu_310_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten55_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten55_fu_136 <= ap_const_lv19_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln183_fu_272_p2 = ap_const_lv1_0))) then 
                    indvar_flatten55_fu_136 <= add_ln183_fu_278_p2;
                end if;
            end if; 
        end if;
    end process;

    j_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_128 <= ap_const_lv10_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln183_fu_272_p2 = ap_const_lv1_0))) then 
                    j_fu_128 <= add_ln185_fu_374_p2;
                end if;
            end if; 
        end if;
    end process;

    phi_ln191_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    phi_ln191_fu_124 <= ap_const_lv497_lc_1;
                elsif ((ap_enable_reg_pp0_iter24 = ap_const_logic_1)) then 
                    phi_ln191_fu_124 <= select_ln191_fu_549_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln188_reg_624 <= add_ln188_fu_352_p2;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln185_reg_619 <= icmp_ln185_fu_290_p2;
                icmp_ln191_1_reg_631 <= icmp_ln191_1_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln188_reg_624_pp0_iter10_reg <= add_ln188_reg_624_pp0_iter9_reg;
                add_ln188_reg_624_pp0_iter11_reg <= add_ln188_reg_624_pp0_iter10_reg;
                add_ln188_reg_624_pp0_iter12_reg <= add_ln188_reg_624_pp0_iter11_reg;
                add_ln188_reg_624_pp0_iter13_reg <= add_ln188_reg_624_pp0_iter12_reg;
                add_ln188_reg_624_pp0_iter14_reg <= add_ln188_reg_624_pp0_iter13_reg;
                add_ln188_reg_624_pp0_iter15_reg <= add_ln188_reg_624_pp0_iter14_reg;
                add_ln188_reg_624_pp0_iter16_reg <= add_ln188_reg_624_pp0_iter15_reg;
                add_ln188_reg_624_pp0_iter17_reg <= add_ln188_reg_624_pp0_iter16_reg;
                add_ln188_reg_624_pp0_iter18_reg <= add_ln188_reg_624_pp0_iter17_reg;
                add_ln188_reg_624_pp0_iter19_reg <= add_ln188_reg_624_pp0_iter18_reg;
                add_ln188_reg_624_pp0_iter20_reg <= add_ln188_reg_624_pp0_iter19_reg;
                add_ln188_reg_624_pp0_iter21_reg <= add_ln188_reg_624_pp0_iter20_reg;
                add_ln188_reg_624_pp0_iter2_reg <= add_ln188_reg_624;
                add_ln188_reg_624_pp0_iter3_reg <= add_ln188_reg_624_pp0_iter2_reg;
                add_ln188_reg_624_pp0_iter4_reg <= add_ln188_reg_624_pp0_iter3_reg;
                add_ln188_reg_624_pp0_iter5_reg <= add_ln188_reg_624_pp0_iter4_reg;
                add_ln188_reg_624_pp0_iter6_reg <= add_ln188_reg_624_pp0_iter5_reg;
                add_ln188_reg_624_pp0_iter7_reg <= add_ln188_reg_624_pp0_iter6_reg;
                add_ln188_reg_624_pp0_iter8_reg <= add_ln188_reg_624_pp0_iter7_reg;
                add_ln188_reg_624_pp0_iter9_reg <= add_ln188_reg_624_pp0_iter8_reg;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln185_reg_619_pp0_iter10_reg <= icmp_ln185_reg_619_pp0_iter9_reg;
                icmp_ln185_reg_619_pp0_iter11_reg <= icmp_ln185_reg_619_pp0_iter10_reg;
                icmp_ln185_reg_619_pp0_iter12_reg <= icmp_ln185_reg_619_pp0_iter11_reg;
                icmp_ln185_reg_619_pp0_iter13_reg <= icmp_ln185_reg_619_pp0_iter12_reg;
                icmp_ln185_reg_619_pp0_iter14_reg <= icmp_ln185_reg_619_pp0_iter13_reg;
                icmp_ln185_reg_619_pp0_iter15_reg <= icmp_ln185_reg_619_pp0_iter14_reg;
                icmp_ln185_reg_619_pp0_iter16_reg <= icmp_ln185_reg_619_pp0_iter15_reg;
                icmp_ln185_reg_619_pp0_iter17_reg <= icmp_ln185_reg_619_pp0_iter16_reg;
                icmp_ln185_reg_619_pp0_iter18_reg <= icmp_ln185_reg_619_pp0_iter17_reg;
                icmp_ln185_reg_619_pp0_iter19_reg <= icmp_ln185_reg_619_pp0_iter18_reg;
                icmp_ln185_reg_619_pp0_iter20_reg <= icmp_ln185_reg_619_pp0_iter19_reg;
                icmp_ln185_reg_619_pp0_iter21_reg <= icmp_ln185_reg_619_pp0_iter20_reg;
                icmp_ln185_reg_619_pp0_iter22_reg <= icmp_ln185_reg_619_pp0_iter21_reg;
                icmp_ln185_reg_619_pp0_iter23_reg <= icmp_ln185_reg_619_pp0_iter22_reg;
                icmp_ln185_reg_619_pp0_iter2_reg <= icmp_ln185_reg_619;
                icmp_ln185_reg_619_pp0_iter3_reg <= icmp_ln185_reg_619_pp0_iter2_reg;
                icmp_ln185_reg_619_pp0_iter4_reg <= icmp_ln185_reg_619_pp0_iter3_reg;
                icmp_ln185_reg_619_pp0_iter5_reg <= icmp_ln185_reg_619_pp0_iter4_reg;
                icmp_ln185_reg_619_pp0_iter6_reg <= icmp_ln185_reg_619_pp0_iter5_reg;
                icmp_ln185_reg_619_pp0_iter7_reg <= icmp_ln185_reg_619_pp0_iter6_reg;
                icmp_ln185_reg_619_pp0_iter8_reg <= icmp_ln185_reg_619_pp0_iter7_reg;
                icmp_ln185_reg_619_pp0_iter9_reg <= icmp_ln185_reg_619_pp0_iter8_reg;
                icmp_ln191_1_reg_631_pp0_iter10_reg <= icmp_ln191_1_reg_631_pp0_iter9_reg;
                icmp_ln191_1_reg_631_pp0_iter11_reg <= icmp_ln191_1_reg_631_pp0_iter10_reg;
                icmp_ln191_1_reg_631_pp0_iter12_reg <= icmp_ln191_1_reg_631_pp0_iter11_reg;
                icmp_ln191_1_reg_631_pp0_iter13_reg <= icmp_ln191_1_reg_631_pp0_iter12_reg;
                icmp_ln191_1_reg_631_pp0_iter14_reg <= icmp_ln191_1_reg_631_pp0_iter13_reg;
                icmp_ln191_1_reg_631_pp0_iter15_reg <= icmp_ln191_1_reg_631_pp0_iter14_reg;
                icmp_ln191_1_reg_631_pp0_iter16_reg <= icmp_ln191_1_reg_631_pp0_iter15_reg;
                icmp_ln191_1_reg_631_pp0_iter17_reg <= icmp_ln191_1_reg_631_pp0_iter16_reg;
                icmp_ln191_1_reg_631_pp0_iter18_reg <= icmp_ln191_1_reg_631_pp0_iter17_reg;
                icmp_ln191_1_reg_631_pp0_iter19_reg <= icmp_ln191_1_reg_631_pp0_iter18_reg;
                icmp_ln191_1_reg_631_pp0_iter20_reg <= icmp_ln191_1_reg_631_pp0_iter19_reg;
                icmp_ln191_1_reg_631_pp0_iter21_reg <= icmp_ln191_1_reg_631_pp0_iter20_reg;
                icmp_ln191_1_reg_631_pp0_iter22_reg <= icmp_ln191_1_reg_631_pp0_iter21_reg;
                icmp_ln191_1_reg_631_pp0_iter23_reg <= icmp_ln191_1_reg_631_pp0_iter22_reg;
                icmp_ln191_1_reg_631_pp0_iter24_reg <= icmp_ln191_1_reg_631_pp0_iter23_reg;
                icmp_ln191_1_reg_631_pp0_iter2_reg <= icmp_ln191_1_reg_631;
                icmp_ln191_1_reg_631_pp0_iter3_reg <= icmp_ln191_1_reg_631_pp0_iter2_reg;
                icmp_ln191_1_reg_631_pp0_iter4_reg <= icmp_ln191_1_reg_631_pp0_iter3_reg;
                icmp_ln191_1_reg_631_pp0_iter5_reg <= icmp_ln191_1_reg_631_pp0_iter4_reg;
                icmp_ln191_1_reg_631_pp0_iter6_reg <= icmp_ln191_1_reg_631_pp0_iter5_reg;
                icmp_ln191_1_reg_631_pp0_iter7_reg <= icmp_ln191_1_reg_631_pp0_iter6_reg;
                icmp_ln191_1_reg_631_pp0_iter8_reg <= icmp_ln191_1_reg_631_pp0_iter7_reg;
                icmp_ln191_1_reg_631_pp0_iter9_reg <= icmp_ln191_1_reg_631_pp0_iter8_reg;
                icmp_ln191_reg_701 <= icmp_ln191_fu_512_p2;
                icmp_ln191_reg_701_pp0_iter24_reg <= icmp_ln191_reg_701;
                image_gray_1_load_reg_671 <= image_gray_1_q0;
                image_gray_1_load_reg_671_pp0_iter10_reg <= image_gray_1_load_reg_671_pp0_iter9_reg;
                image_gray_1_load_reg_671_pp0_iter11_reg <= image_gray_1_load_reg_671_pp0_iter10_reg;
                image_gray_1_load_reg_671_pp0_iter12_reg <= image_gray_1_load_reg_671_pp0_iter11_reg;
                image_gray_1_load_reg_671_pp0_iter13_reg <= image_gray_1_load_reg_671_pp0_iter12_reg;
                image_gray_1_load_reg_671_pp0_iter14_reg <= image_gray_1_load_reg_671_pp0_iter13_reg;
                image_gray_1_load_reg_671_pp0_iter15_reg <= image_gray_1_load_reg_671_pp0_iter14_reg;
                image_gray_1_load_reg_671_pp0_iter16_reg <= image_gray_1_load_reg_671_pp0_iter15_reg;
                image_gray_1_load_reg_671_pp0_iter17_reg <= image_gray_1_load_reg_671_pp0_iter16_reg;
                image_gray_1_load_reg_671_pp0_iter18_reg <= image_gray_1_load_reg_671_pp0_iter17_reg;
                image_gray_1_load_reg_671_pp0_iter19_reg <= image_gray_1_load_reg_671_pp0_iter18_reg;
                image_gray_1_load_reg_671_pp0_iter20_reg <= image_gray_1_load_reg_671_pp0_iter19_reg;
                image_gray_1_load_reg_671_pp0_iter21_reg <= image_gray_1_load_reg_671_pp0_iter20_reg;
                image_gray_1_load_reg_671_pp0_iter22_reg <= image_gray_1_load_reg_671_pp0_iter21_reg;
                image_gray_1_load_reg_671_pp0_iter4_reg <= image_gray_1_load_reg_671;
                image_gray_1_load_reg_671_pp0_iter5_reg <= image_gray_1_load_reg_671_pp0_iter4_reg;
                image_gray_1_load_reg_671_pp0_iter6_reg <= image_gray_1_load_reg_671_pp0_iter5_reg;
                image_gray_1_load_reg_671_pp0_iter7_reg <= image_gray_1_load_reg_671_pp0_iter6_reg;
                image_gray_1_load_reg_671_pp0_iter8_reg <= image_gray_1_load_reg_671_pp0_iter7_reg;
                image_gray_1_load_reg_671_pp0_iter9_reg <= image_gray_1_load_reg_671_pp0_iter8_reg;
                image_gray_2_load_reg_676 <= image_gray_2_q0;
                image_gray_2_load_reg_676_pp0_iter10_reg <= image_gray_2_load_reg_676_pp0_iter9_reg;
                image_gray_2_load_reg_676_pp0_iter11_reg <= image_gray_2_load_reg_676_pp0_iter10_reg;
                image_gray_2_load_reg_676_pp0_iter12_reg <= image_gray_2_load_reg_676_pp0_iter11_reg;
                image_gray_2_load_reg_676_pp0_iter13_reg <= image_gray_2_load_reg_676_pp0_iter12_reg;
                image_gray_2_load_reg_676_pp0_iter14_reg <= image_gray_2_load_reg_676_pp0_iter13_reg;
                image_gray_2_load_reg_676_pp0_iter15_reg <= image_gray_2_load_reg_676_pp0_iter14_reg;
                image_gray_2_load_reg_676_pp0_iter16_reg <= image_gray_2_load_reg_676_pp0_iter15_reg;
                image_gray_2_load_reg_676_pp0_iter17_reg <= image_gray_2_load_reg_676_pp0_iter16_reg;
                image_gray_2_load_reg_676_pp0_iter18_reg <= image_gray_2_load_reg_676_pp0_iter17_reg;
                image_gray_2_load_reg_676_pp0_iter19_reg <= image_gray_2_load_reg_676_pp0_iter18_reg;
                image_gray_2_load_reg_676_pp0_iter20_reg <= image_gray_2_load_reg_676_pp0_iter19_reg;
                image_gray_2_load_reg_676_pp0_iter21_reg <= image_gray_2_load_reg_676_pp0_iter20_reg;
                image_gray_2_load_reg_676_pp0_iter22_reg <= image_gray_2_load_reg_676_pp0_iter21_reg;
                image_gray_2_load_reg_676_pp0_iter4_reg <= image_gray_2_load_reg_676;
                image_gray_2_load_reg_676_pp0_iter5_reg <= image_gray_2_load_reg_676_pp0_iter4_reg;
                image_gray_2_load_reg_676_pp0_iter6_reg <= image_gray_2_load_reg_676_pp0_iter5_reg;
                image_gray_2_load_reg_676_pp0_iter7_reg <= image_gray_2_load_reg_676_pp0_iter6_reg;
                image_gray_2_load_reg_676_pp0_iter8_reg <= image_gray_2_load_reg_676_pp0_iter7_reg;
                image_gray_2_load_reg_676_pp0_iter9_reg <= image_gray_2_load_reg_676_pp0_iter8_reg;
                image_gray_3_load_reg_681 <= image_gray_3_q0;
                image_gray_3_load_reg_681_pp0_iter10_reg <= image_gray_3_load_reg_681_pp0_iter9_reg;
                image_gray_3_load_reg_681_pp0_iter11_reg <= image_gray_3_load_reg_681_pp0_iter10_reg;
                image_gray_3_load_reg_681_pp0_iter12_reg <= image_gray_3_load_reg_681_pp0_iter11_reg;
                image_gray_3_load_reg_681_pp0_iter13_reg <= image_gray_3_load_reg_681_pp0_iter12_reg;
                image_gray_3_load_reg_681_pp0_iter14_reg <= image_gray_3_load_reg_681_pp0_iter13_reg;
                image_gray_3_load_reg_681_pp0_iter15_reg <= image_gray_3_load_reg_681_pp0_iter14_reg;
                image_gray_3_load_reg_681_pp0_iter16_reg <= image_gray_3_load_reg_681_pp0_iter15_reg;
                image_gray_3_load_reg_681_pp0_iter17_reg <= image_gray_3_load_reg_681_pp0_iter16_reg;
                image_gray_3_load_reg_681_pp0_iter18_reg <= image_gray_3_load_reg_681_pp0_iter17_reg;
                image_gray_3_load_reg_681_pp0_iter19_reg <= image_gray_3_load_reg_681_pp0_iter18_reg;
                image_gray_3_load_reg_681_pp0_iter20_reg <= image_gray_3_load_reg_681_pp0_iter19_reg;
                image_gray_3_load_reg_681_pp0_iter21_reg <= image_gray_3_load_reg_681_pp0_iter20_reg;
                image_gray_3_load_reg_681_pp0_iter22_reg <= image_gray_3_load_reg_681_pp0_iter21_reg;
                image_gray_3_load_reg_681_pp0_iter4_reg <= image_gray_3_load_reg_681;
                image_gray_3_load_reg_681_pp0_iter5_reg <= image_gray_3_load_reg_681_pp0_iter4_reg;
                image_gray_3_load_reg_681_pp0_iter6_reg <= image_gray_3_load_reg_681_pp0_iter5_reg;
                image_gray_3_load_reg_681_pp0_iter7_reg <= image_gray_3_load_reg_681_pp0_iter6_reg;
                image_gray_3_load_reg_681_pp0_iter8_reg <= image_gray_3_load_reg_681_pp0_iter7_reg;
                image_gray_3_load_reg_681_pp0_iter9_reg <= image_gray_3_load_reg_681_pp0_iter8_reg;
                image_gray_4_load_reg_686 <= image_gray_4_q0;
                image_gray_4_load_reg_686_pp0_iter10_reg <= image_gray_4_load_reg_686_pp0_iter9_reg;
                image_gray_4_load_reg_686_pp0_iter11_reg <= image_gray_4_load_reg_686_pp0_iter10_reg;
                image_gray_4_load_reg_686_pp0_iter12_reg <= image_gray_4_load_reg_686_pp0_iter11_reg;
                image_gray_4_load_reg_686_pp0_iter13_reg <= image_gray_4_load_reg_686_pp0_iter12_reg;
                image_gray_4_load_reg_686_pp0_iter14_reg <= image_gray_4_load_reg_686_pp0_iter13_reg;
                image_gray_4_load_reg_686_pp0_iter15_reg <= image_gray_4_load_reg_686_pp0_iter14_reg;
                image_gray_4_load_reg_686_pp0_iter16_reg <= image_gray_4_load_reg_686_pp0_iter15_reg;
                image_gray_4_load_reg_686_pp0_iter17_reg <= image_gray_4_load_reg_686_pp0_iter16_reg;
                image_gray_4_load_reg_686_pp0_iter18_reg <= image_gray_4_load_reg_686_pp0_iter17_reg;
                image_gray_4_load_reg_686_pp0_iter19_reg <= image_gray_4_load_reg_686_pp0_iter18_reg;
                image_gray_4_load_reg_686_pp0_iter20_reg <= image_gray_4_load_reg_686_pp0_iter19_reg;
                image_gray_4_load_reg_686_pp0_iter21_reg <= image_gray_4_load_reg_686_pp0_iter20_reg;
                image_gray_4_load_reg_686_pp0_iter22_reg <= image_gray_4_load_reg_686_pp0_iter21_reg;
                image_gray_4_load_reg_686_pp0_iter4_reg <= image_gray_4_load_reg_686;
                image_gray_4_load_reg_686_pp0_iter5_reg <= image_gray_4_load_reg_686_pp0_iter4_reg;
                image_gray_4_load_reg_686_pp0_iter6_reg <= image_gray_4_load_reg_686_pp0_iter5_reg;
                image_gray_4_load_reg_686_pp0_iter7_reg <= image_gray_4_load_reg_686_pp0_iter6_reg;
                image_gray_4_load_reg_686_pp0_iter8_reg <= image_gray_4_load_reg_686_pp0_iter7_reg;
                image_gray_4_load_reg_686_pp0_iter9_reg <= image_gray_4_load_reg_686_pp0_iter8_reg;
                image_gray_5_load_reg_691 <= image_gray_5_q0;
                image_gray_5_load_reg_691_pp0_iter10_reg <= image_gray_5_load_reg_691_pp0_iter9_reg;
                image_gray_5_load_reg_691_pp0_iter11_reg <= image_gray_5_load_reg_691_pp0_iter10_reg;
                image_gray_5_load_reg_691_pp0_iter12_reg <= image_gray_5_load_reg_691_pp0_iter11_reg;
                image_gray_5_load_reg_691_pp0_iter13_reg <= image_gray_5_load_reg_691_pp0_iter12_reg;
                image_gray_5_load_reg_691_pp0_iter14_reg <= image_gray_5_load_reg_691_pp0_iter13_reg;
                image_gray_5_load_reg_691_pp0_iter15_reg <= image_gray_5_load_reg_691_pp0_iter14_reg;
                image_gray_5_load_reg_691_pp0_iter16_reg <= image_gray_5_load_reg_691_pp0_iter15_reg;
                image_gray_5_load_reg_691_pp0_iter17_reg <= image_gray_5_load_reg_691_pp0_iter16_reg;
                image_gray_5_load_reg_691_pp0_iter18_reg <= image_gray_5_load_reg_691_pp0_iter17_reg;
                image_gray_5_load_reg_691_pp0_iter19_reg <= image_gray_5_load_reg_691_pp0_iter18_reg;
                image_gray_5_load_reg_691_pp0_iter20_reg <= image_gray_5_load_reg_691_pp0_iter19_reg;
                image_gray_5_load_reg_691_pp0_iter21_reg <= image_gray_5_load_reg_691_pp0_iter20_reg;
                image_gray_5_load_reg_691_pp0_iter22_reg <= image_gray_5_load_reg_691_pp0_iter21_reg;
                image_gray_5_load_reg_691_pp0_iter4_reg <= image_gray_5_load_reg_691;
                image_gray_5_load_reg_691_pp0_iter5_reg <= image_gray_5_load_reg_691_pp0_iter4_reg;
                image_gray_5_load_reg_691_pp0_iter6_reg <= image_gray_5_load_reg_691_pp0_iter5_reg;
                image_gray_5_load_reg_691_pp0_iter7_reg <= image_gray_5_load_reg_691_pp0_iter6_reg;
                image_gray_5_load_reg_691_pp0_iter8_reg <= image_gray_5_load_reg_691_pp0_iter7_reg;
                image_gray_5_load_reg_691_pp0_iter9_reg <= image_gray_5_load_reg_691_pp0_iter8_reg;
                image_gray_load_reg_666 <= image_gray_q0;
                image_gray_load_reg_666_pp0_iter10_reg <= image_gray_load_reg_666_pp0_iter9_reg;
                image_gray_load_reg_666_pp0_iter11_reg <= image_gray_load_reg_666_pp0_iter10_reg;
                image_gray_load_reg_666_pp0_iter12_reg <= image_gray_load_reg_666_pp0_iter11_reg;
                image_gray_load_reg_666_pp0_iter13_reg <= image_gray_load_reg_666_pp0_iter12_reg;
                image_gray_load_reg_666_pp0_iter14_reg <= image_gray_load_reg_666_pp0_iter13_reg;
                image_gray_load_reg_666_pp0_iter15_reg <= image_gray_load_reg_666_pp0_iter14_reg;
                image_gray_load_reg_666_pp0_iter16_reg <= image_gray_load_reg_666_pp0_iter15_reg;
                image_gray_load_reg_666_pp0_iter17_reg <= image_gray_load_reg_666_pp0_iter16_reg;
                image_gray_load_reg_666_pp0_iter18_reg <= image_gray_load_reg_666_pp0_iter17_reg;
                image_gray_load_reg_666_pp0_iter19_reg <= image_gray_load_reg_666_pp0_iter18_reg;
                image_gray_load_reg_666_pp0_iter20_reg <= image_gray_load_reg_666_pp0_iter19_reg;
                image_gray_load_reg_666_pp0_iter21_reg <= image_gray_load_reg_666_pp0_iter20_reg;
                image_gray_load_reg_666_pp0_iter22_reg <= image_gray_load_reg_666_pp0_iter21_reg;
                image_gray_load_reg_666_pp0_iter4_reg <= image_gray_load_reg_666;
                image_gray_load_reg_666_pp0_iter5_reg <= image_gray_load_reg_666_pp0_iter4_reg;
                image_gray_load_reg_666_pp0_iter6_reg <= image_gray_load_reg_666_pp0_iter5_reg;
                image_gray_load_reg_666_pp0_iter7_reg <= image_gray_load_reg_666_pp0_iter6_reg;
                image_gray_load_reg_666_pp0_iter8_reg <= image_gray_load_reg_666_pp0_iter7_reg;
                image_gray_load_reg_666_pp0_iter9_reg <= image_gray_load_reg_666_pp0_iter8_reg;
                select_ln178_1_reg_707 <= select_ln178_1_fu_521_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    abscond13_fu_464_p2 <= "0" when (tmp_3_fu_432_p15 = ap_const_lv8_0) else "1";
    abscond16_fu_484_p2 <= "0" when (temp_buf_q0 = ap_const_lv8_0) else "1";
    add_ln183_1_fu_304_p2 <= std_logic_vector(unsigned(i_fu_132) + unsigned(ap_const_lv9_1));
    add_ln183_fu_278_p2 <= std_logic_vector(unsigned(indvar_flatten55_fu_136) + unsigned(ap_const_lv19_1));
    add_ln185_fu_374_p2 <= std_logic_vector(unsigned(select_ln178_fu_296_p3) + unsigned(ap_const_lv10_1));
    add_ln188_fu_352_p2 <= std_logic_vector(unsigned(empty_fu_346_p2) + unsigned(zext_ln185_fu_342_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter25, ap_block_state26_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state26_io));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter25, ap_block_state26_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state26_io));
    end process;


    ap_block_state26_io_assign_proc : process(m_axi_gmem_WREADY, icmp_ln191_1_reg_631_pp0_iter24_reg)
    begin
                ap_block_state26_io <= ((icmp_ln191_1_reg_631_pp0_iter24_reg = ap_const_lv1_1) and (m_axi_gmem_WREADY = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln183_fu_272_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln183_fu_272_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter24_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter24_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25)
    begin
        if (((ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) 
    and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_346_p2 <= std_logic_vector(unsigned(p_shl_fu_326_p1) + unsigned(p_shl11_fu_338_p1));

    gmem_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter25, m_axi_gmem_WREADY, icmp_ln191_1_reg_631_pp0_iter24_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln191_1_reg_631_pp0_iter24_reg = ap_const_lv1_1))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_362_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_362_ce <= ap_const_logic_1;
        else 
            grp_fu_362_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_362_p1 <= ap_const_lv19_6(4 - 1 downto 0);
    icmp_ln183_fu_272_p2 <= "1" when (indvar_flatten55_fu_136 = ap_const_lv19_4B000) else "0";
    icmp_ln185_fu_290_p2 <= "1" when (j_fu_128 = ap_const_lv10_280) else "0";
    icmp_ln190_fu_498_p2 <= "1" when (unsigned(temp1_fu_470_p3) > unsigned(temp2_fu_490_p3)) else "0";
    icmp_ln191_1_fu_368_p2 <= "1" when (trunc_ln188_fu_358_p1 = ap_const_lv6_3F) else "0";
    icmp_ln191_fu_512_p2 <= "1" when (unsigned(temp3_fu_504_p3) > unsigned(ap_const_lv8_96)) else "0";
    image_gray_1_address0 <= zext_ln188_1_fu_414_p1(16 - 1 downto 0);
    image_gray_1_ce0 <= image_gray_1_ce0_local;

    image_gray_1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            image_gray_1_ce0_local <= ap_const_logic_1;
        else 
            image_gray_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    image_gray_2_address0 <= zext_ln188_1_fu_414_p1(16 - 1 downto 0);
    image_gray_2_ce0 <= image_gray_2_ce0_local;

    image_gray_2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            image_gray_2_ce0_local <= ap_const_logic_1;
        else 
            image_gray_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    image_gray_3_address0 <= zext_ln188_1_fu_414_p1(16 - 1 downto 0);
    image_gray_3_ce0 <= image_gray_3_ce0_local;

    image_gray_3_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            image_gray_3_ce0_local <= ap_const_logic_1;
        else 
            image_gray_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    image_gray_4_address0 <= zext_ln188_1_fu_414_p1(16 - 1 downto 0);
    image_gray_4_ce0 <= image_gray_4_ce0_local;

    image_gray_4_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            image_gray_4_ce0_local <= ap_const_logic_1;
        else 
            image_gray_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    image_gray_5_address0 <= zext_ln188_1_fu_414_p1(16 - 1 downto 0);
    image_gray_5_ce0 <= image_gray_5_ce0_local;

    image_gray_5_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            image_gray_5_ce0_local <= ap_const_logic_1;
        else 
            image_gray_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    image_gray_address0 <= zext_ln188_1_fu_414_p1(16 - 1 downto 0);
    image_gray_ce0 <= image_gray_ce0_local;

    image_gray_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            image_gray_ce0_local <= ap_const_logic_1;
        else 
            image_gray_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_ARVALID <= ap_const_logic_0;
    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;
    m_axi_gmem_RREADY <= ap_const_logic_0;
        m_axi_gmem_WDATA <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln_fu_570_p3),512));

    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv64_FFFFFFFFFFFFFFFF;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(ap_enable_reg_pp0_iter25, icmp_ln191_1_reg_631_pp0_iter24_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln191_1_reg_631_pp0_iter24_reg = ap_const_lv1_1))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln188_fu_398_p0 <= mul_ln188_fu_398_p00(19 - 1 downto 0);
    mul_ln188_fu_398_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln188_reg_624),39));
    mul_ln188_fu_398_p1 <= ap_const_lv39_AAAAB(21 - 1 downto 0);
    neg12_fu_458_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_3_fu_432_p15));
    neg15_fu_478_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(temp_buf_q0));
    or_ln_fu_570_p3 <= (icmp_ln191_reg_701_pp0_iter24_reg & sext_ln183_1_fu_567_p1);
    p_shl11_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_330_p3),19));
    p_shl_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_318_p3),19));
    select_ln178_1_fu_521_p3 <= 
        ap_const_lv497_lc_1 when (icmp_ln185_reg_619_pp0_iter23_reg(0) = '1') else 
        phi_ln191_fu_124;
    select_ln178_fu_296_p3 <= 
        ap_const_lv10_0 when (icmp_ln185_fu_290_p2(0) = '1') else 
        j_fu_128;
    select_ln183_fu_310_p3 <= 
        add_ln183_1_fu_304_p2 when (icmp_ln185_fu_290_p2(0) = '1') else 
        i_fu_132;
    select_ln191_fu_549_p3 <= 
        ap_const_lv497_lc_1 when (icmp_ln191_1_reg_631_pp0_iter23_reg(0) = '1') else 
        tmp_s_fu_542_p3;
        sext_ln183_1_fu_567_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln178_1_reg_707),504));

        sext_ln185_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_22_fu_528_p4),496));

    temp1_fu_470_p3 <= 
        tmp_3_fu_432_p15 when (abscond13_fu_464_p2(0) = '1') else 
        neg12_fu_458_p2;
    temp2_fu_490_p3 <= 
        temp_buf_q0 when (abscond16_fu_484_p2(0) = '1') else 
        neg15_fu_478_p2;
    temp3_fu_504_p3 <= 
        temp1_fu_470_p3 when (icmp_ln190_fu_498_p2(0) = '1') else 
        temp2_fu_490_p3;
    temp_buf_address0 <= zext_ln188_fu_424_p1(19 - 1 downto 0);
    temp_buf_ce0 <= temp_buf_ce0_local;

    temp_buf_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter22, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            temp_buf_ce0_local <= ap_const_logic_1;
        else 
            temp_buf_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    tmp_20_fu_330_p3 <= (select_ln183_fu_310_p3 & ap_const_lv7_0);
    tmp_21_fu_404_p4 <= mul_ln188_fu_398_p2(38 downto 22);
    tmp_22_fu_528_p4 <= select_ln178_1_fu_521_p3(496 downto 8);
    tmp_3_fu_432_p13 <= "XXXXXXXX";
    tmp_3_fu_432_p14 <= grp_fu_362_p2(3 - 1 downto 0);
    tmp_fu_318_p3 <= (select_ln183_fu_310_p3 & ap_const_lv9_0);
    tmp_s_fu_542_p3 <= (icmp_ln191_reg_701 & sext_ln185_fu_538_p1);
    trunc_ln188_fu_358_p1 <= add_ln188_fu_352_p2(6 - 1 downto 0);
    zext_ln185_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln178_fu_296_p3),19));
    zext_ln188_1_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_404_p4),64));
    zext_ln188_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln188_reg_624_pp0_iter21_reg),64));
end behav;
