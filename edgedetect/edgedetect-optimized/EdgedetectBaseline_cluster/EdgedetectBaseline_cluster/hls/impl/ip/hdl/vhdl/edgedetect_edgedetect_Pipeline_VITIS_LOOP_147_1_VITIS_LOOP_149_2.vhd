-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity edgedetect_edgedetect_Pipeline_VITIS_LOOP_147_1_VITIS_LOOP_149_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    normal_factor_8_out : OUT STD_LOGIC_VECTOR (4 downto 0);
    normal_factor_8_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of edgedetect_edgedetect_Pipeline_VITIS_LOOP_147_1_VITIS_LOOP_149_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln147_fu_103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal convolve2d_horizontal_unsigned_char_unsigned_char_filter_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal convolve2d_horizontal_unsigned_char_unsigned_char_filter_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln151_fu_177_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal normal_factor_fu_44 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal normal_factor_4_fu_238_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal c_fu_48 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal add_ln149_fu_182_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_c_load : STD_LOGIC_VECTOR (1 downto 0);
    signal r_fu_52 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal select_ln147_fu_141_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_r_load : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten41_fu_56 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln147_fu_109_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_indvar_flatten41_load : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal convolve2d_horizontal_unsigned_char_unsigned_char_filter_ce0_local : STD_LOGIC;
    signal icmp_ln149_fu_121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln147_1_fu_135_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl_fu_153_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln147_fu_149_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln131_fu_127_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln149_fu_167_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_fu_161_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln151_fu_171_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_34_fu_210_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln151_fu_206_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal abscond10_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg9_fu_214_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal abs11_fu_226_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln151_1_fu_234_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component edgedetect_edgedetect_Pipeline_VITIS_LOOP_147_1_VITIS_LOOP_149_2_convolve2d_horizontal_udEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component edgedetect_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    convolve2d_horizontal_unsigned_char_unsigned_char_filter_U : component edgedetect_edgedetect_Pipeline_VITIS_LOOP_147_1_VITIS_LOOP_149_2_convolve2d_horizontal_udEe
    generic map (
        DataWidth => 8,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => convolve2d_horizontal_unsigned_char_unsigned_char_filter_address0,
        ce0 => convolve2d_horizontal_unsigned_char_unsigned_char_filter_ce0_local,
        q0 => convolve2d_horizontal_unsigned_char_unsigned_char_filter_q0);

    flow_control_loop_pipe_sequential_init_U : component edgedetect_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    c_fu_48_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln147_fu_103_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    c_fu_48 <= add_ln149_fu_182_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    c_fu_48 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten41_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln147_fu_103_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten41_fu_56 <= add_ln147_fu_109_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten41_fu_56 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    normal_factor_fu_44_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    normal_factor_fu_44 <= ap_const_lv5_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    normal_factor_fu_44 <= normal_factor_4_fu_238_p2;
                end if;
            end if; 
        end if;
    end process;

    r_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln147_fu_103_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    r_fu_52 <= select_ln147_fu_141_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    r_fu_52 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    abs11_fu_226_p3 <= 
        empty_34_fu_210_p1 when (abscond10_fu_220_p2(0) = '1') else 
        neg9_fu_214_p2;
    abscond10_fu_220_p2 <= "1" when (signed(trunc_ln151_fu_206_p1) > signed(ap_const_lv3_0)) else "0";
    add_ln147_1_fu_135_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_r_load) + unsigned(ap_const_lv2_1));
    add_ln147_fu_109_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten41_load) + unsigned(ap_const_lv4_1));
    add_ln149_fu_182_p2 <= std_logic_vector(unsigned(select_ln131_fu_127_p3) + unsigned(ap_const_lv2_1));
    add_ln151_fu_171_p2 <= std_logic_vector(unsigned(zext_ln149_fu_167_p1) + unsigned(empty_fu_161_p2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln147_fu_103_p2)
    begin
        if (((icmp_ln147_fu_103_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_c_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, c_fu_48)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_c_load <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_c_load <= c_fu_48;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten41_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten41_fu_56)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten41_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_indvar_flatten41_load <= indvar_flatten41_fu_56;
        end if; 
    end process;


    ap_sig_allocacmp_r_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, r_fu_52)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_r_load <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_r_load <= r_fu_52;
        end if; 
    end process;

    convolve2d_horizontal_unsigned_char_unsigned_char_filter_address0 <= zext_ln151_fu_177_p1(4 - 1 downto 0);

    convolve2d_horizontal_unsigned_char_unsigned_char_filter_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            convolve2d_horizontal_unsigned_char_unsigned_char_filter_ce0_local <= ap_const_logic_1;
        else 
            convolve2d_horizontal_unsigned_char_unsigned_char_filter_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    empty_34_fu_210_p1 <= convolve2d_horizontal_unsigned_char_unsigned_char_filter_q0(2 - 1 downto 0);
    empty_fu_161_p2 <= std_logic_vector(unsigned(p_shl_fu_153_p3) - unsigned(zext_ln147_fu_149_p1));
    icmp_ln147_fu_103_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten41_load = ap_const_lv4_9) else "0";
    icmp_ln149_fu_121_p2 <= "1" when (ap_sig_allocacmp_c_load = ap_const_lv2_3) else "0";
    neg9_fu_214_p2 <= std_logic_vector(unsigned(ap_const_lv2_0) - unsigned(empty_34_fu_210_p1));
    normal_factor_4_fu_238_p2 <= std_logic_vector(unsigned(zext_ln151_1_fu_234_p1) + unsigned(normal_factor_fu_44));
    normal_factor_8_out <= normal_factor_fu_44;

    normal_factor_8_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln147_fu_103_p2, ap_loop_exit_ready, ap_block_pp0_stage0_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln147_fu_103_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            normal_factor_8_out_ap_vld <= ap_const_logic_1;
        else 
            normal_factor_8_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_shl_fu_153_p3 <= (select_ln147_fu_141_p3 & ap_const_lv2_0);
    select_ln131_fu_127_p3 <= 
        ap_const_lv2_0 when (icmp_ln149_fu_121_p2(0) = '1') else 
        ap_sig_allocacmp_c_load;
    select_ln147_fu_141_p3 <= 
        add_ln147_1_fu_135_p2 when (icmp_ln149_fu_121_p2(0) = '1') else 
        ap_sig_allocacmp_r_load;
    trunc_ln151_fu_206_p1 <= convolve2d_horizontal_unsigned_char_unsigned_char_filter_q0(3 - 1 downto 0);
    zext_ln147_fu_149_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln147_fu_141_p3),4));
    zext_ln149_fu_167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln131_fu_127_p3),4));
    zext_ln151_1_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(abs11_fu_226_p3),5));
    zext_ln151_fu_177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln151_fu_171_p2),64));
end behav;
