-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity edgedetect_edgedetect_Pipeline_VITIS_LOOP_158_3_VITIS_LOOP_160_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    output_r : IN STD_LOGIC_VECTOR (63 downto 0);
    normal_factor_8_reload : IN STD_LOGIC_VECTOR (4 downto 0);
    icmp_ln155 : IN STD_LOGIC_VECTOR (0 downto 0);
    temp_buf_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    temp_buf_ce0 : OUT STD_LOGIC;
    temp_buf_we0 : OUT STD_LOGIC;
    temp_buf_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of edgedetect_edgedetect_Pipeline_VITIS_LOOP_158_3_VITIS_LOOP_160_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv19_4A744 : STD_LOGIC_VECTOR (18 downto 0) := "1001010011101000100";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv10_27E : STD_LOGIC_VECTOR (9 downto 0) := "1001111110";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv11_281 : STD_LOGIC_VECTOR (10 downto 0) := "01010000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv19_500 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010100000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal icmp_ln158_reg_839 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_state78_pp0_stage5_iter12 : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage5 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_state7_io : BOOLEAN;
    signal ap_block_state79_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln158_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state74_pp0_stage1_iter12 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln158_reg_839_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln158_reg_839_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln158_reg_839_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln158_reg_839_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln158_reg_839_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln158_reg_839_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln158_reg_839_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln158_reg_839_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln158_reg_839_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln158_reg_839_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln158_reg_839_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln158_reg_839_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln158_reg_839_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln158_reg_839_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln163_fu_325_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln163_reg_843 : STD_LOGIC_VECTOR (18 downto 0);
    signal empty_32_fu_335_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_32_reg_848 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln167_s_reg_854 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln167_fu_350_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_reg_859 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_reg_859_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_reg_859_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_reg_859_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_reg_859_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_reg_859_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_reg_859_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_reg_859_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_reg_859_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_reg_859_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_reg_859_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_reg_859_pp0_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_reg_859_pp0_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln171_1_fu_370_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln171_1_reg_864 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln171_1_reg_864_pp0_iter1_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln171_1_reg_864_pp0_iter2_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln171_1_reg_864_pp0_iter3_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln171_1_reg_864_pp0_iter4_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln171_1_reg_864_pp0_iter5_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln171_1_reg_864_pp0_iter6_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln171_1_reg_864_pp0_iter7_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln171_1_reg_864_pp0_iter8_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln171_1_reg_864_pp0_iter9_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln171_1_reg_864_pp0_iter10_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln171_1_reg_864_pp0_iter11_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln171_1_reg_864_pp0_iter12_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln171_1_reg_864_pp0_iter13_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln171_1_reg_864_pp0_iter14_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln171_1_reg_864_pp0_iter15_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state75_pp0_stage2_iter12 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal trunc_ln167_1_reg_875 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln167_5_fu_416_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_5_reg_880 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_5_reg_880_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_5_reg_880_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_5_reg_880_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_5_reg_880_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_5_reg_880_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_5_reg_880_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_5_reg_880_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_5_reg_880_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_5_reg_880_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_5_reg_880_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_5_reg_880_pp0_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_5_reg_880_pp0_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state76_pp0_stage3_iter12 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal trunc_ln167_2_reg_891 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln167_9_fu_445_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_9_reg_896 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_9_reg_896_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_9_reg_896_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_9_reg_896_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_9_reg_896_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_9_reg_896_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_9_reg_896_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_9_reg_896_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_9_reg_896_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_9_reg_896_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_9_reg_896_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_9_reg_896_pp0_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_9_reg_896_pp0_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_state77_pp0_stage4_iter12 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal empty_33_fu_468_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_33_reg_907 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln167_4_reg_913 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln167_11_fu_483_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_11_reg_918 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_11_reg_918_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_11_reg_918_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_11_reg_918_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_11_reg_918_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_11_reg_918_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_11_reg_918_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_11_reg_918_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_11_reg_918_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_11_reg_918_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_11_reg_918_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_11_reg_918_pp0_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_11_reg_918_pp0_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal trunc_ln167_6_reg_929 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln167_13_fu_512_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_13_reg_934 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_13_reg_934_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_13_reg_934_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_13_reg_934_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_13_reg_934_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_13_reg_934_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_13_reg_934_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_13_reg_934_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_13_reg_934_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_13_reg_934_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_13_reg_934_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_13_reg_934_pp0_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_13_reg_934_pp0_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_8_reg_945 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln167_15_fu_541_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_15_reg_950 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_15_reg_950_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_15_reg_950_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_15_reg_950_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_15_reg_950_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_15_reg_950_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_15_reg_950_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_15_reg_950_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_15_reg_950_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_15_reg_950_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_15_reg_950_pp0_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_15_reg_950_pp0_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln167_15_reg_950_pp0_iter13_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal gmem_addr_read_reg_961 : STD_LOGIC_VECTOR (511 downto 0);
    signal sum_fu_571_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_reg_966 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_addr_1_read_reg_971 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln167_7_fu_591_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln167_7_reg_976 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_addr_2_read_reg_981 : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem_addr_3_read_reg_986 : STD_LOGIC_VECTOR (511 downto 0);
    signal add_ln167_4_fu_622_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln167_4_reg_991 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln167_12_fu_644_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln167_12_reg_996 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_addr_4_read_reg_1001 : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem_addr_5_read_reg_1006 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp4_fu_675_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp4_reg_1011 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln170_fu_738_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln170_reg_1016 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln170_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln170_reg_1027 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln170_reg_1027_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln170_reg_1027_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal zext_ln171_1_fu_798_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln167_fu_391_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln167_1_fu_420_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln167_2_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln167_3_fu_487_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln167_4_fu_516_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln167_5_fu_545_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal c_fu_108 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal add_ln171_fu_354_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal r_fu_112 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal select_ln158_fu_279_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten48_fu_116 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    signal add_ln158_fu_247_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal temp_buf_we0_local : STD_LOGIC;
    signal pixel_fu_789_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_buf_ce0_local : STD_LOGIC;
    signal icmp_ln160_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next25_i74106_fu_273_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_287_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_23_fu_299_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl_fu_295_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_shl32_fu_307_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal select_ln131_fu_265_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln160_1_fu_321_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal empty_fu_311_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln163_cast_fu_331_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln160_fu_317_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln171_2_fu_360_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln171_fu_366_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln167_fu_401_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln167_1_fu_430_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp23_fu_459_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp23_cast_fu_464_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln167_2_fu_497_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln167_3_fu_526_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln3_fu_555_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln167_fu_562_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln167_fu_566_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln167_1_fu_575_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln167_1_fu_582_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln167_1_fu_586_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln167_2_fu_598_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln167_3_fu_605_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln167_2_fu_609_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln167_10_fu_614_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln167_5_cast_fu_618_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln133_fu_595_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln167_3_fu_628_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln167_4_fu_635_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln167_3_fu_639_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln167_4_fu_651_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln167_6_fu_658_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln167_4_fu_662_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln167_14_fu_667_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln167_2_fu_648_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln167_7_fu_671_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln167_5_fu_684_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln167_8_fu_691_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln167_5_fu_695_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln167_16_fu_700_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_708_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln167_9_fu_719_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln167_5_fu_681_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln167_fu_722_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln167_11_cast_fu_704_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln167_1_fu_728_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln170_fu_734_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln167_6_fu_715_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln170_fu_744_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_754_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal Ny_fu_759_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln170_1_fu_771_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln170_1_fu_767_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_754_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln170_fu_780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln170_fu_785_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_754_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter14_stage4 : STD_LOGIC;
    signal ap_idle_pp0_0to13 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to15 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal grp_fu_754_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component edgedetect_sdiv_11s_6ns_8_15_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component edgedetect_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sdiv_11s_6ns_8_15_1_U94 : component edgedetect_sdiv_11s_6ns_8_15_1
    generic map (
        ID => 1,
        NUM_STAGE => 15,
        din0_WIDTH => 11,
        din1_WIDTH => 6,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln170_reg_1016,
        din1 => grp_fu_754_p1,
        ce => grp_fu_754_ce,
        dout => grp_fu_754_p2);

    flow_control_loop_pipe_sequential_init_U : component edgedetect_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage5,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_loop_exit_ready_pp0_iter14_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage5)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone))) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
                    ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone))) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter10_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter14_stage4) and (ap_idle_pp0_0to13 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter10_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then 
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter11_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter14_stage4) and (ap_idle_pp0_0to13 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter11_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then 
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter12_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter14_stage4) and (ap_idle_pp0_0to13 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter12_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then 
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter13_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter14_stage4) and (ap_idle_pp0_0to13 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter13_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then 
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter14_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter14_stage4) and (ap_idle_pp0_0to13 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter14_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then 
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter14_stage4) and (ap_idle_pp0_0to13 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter14_stage4) and (ap_idle_pp0_0to13 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter14_stage4) and (ap_idle_pp0_0to13 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter14_stage4) and (ap_idle_pp0_0to13 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter14_stage4) and (ap_idle_pp0_0to13 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter6_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter14_stage4) and (ap_idle_pp0_0to13 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter7_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter14_stage4) and (ap_idle_pp0_0to13 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter8_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter14_stage4) and (ap_idle_pp0_0to13 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter9_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter14_stage4) and (ap_idle_pp0_0to13 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
            end if; 
        end if;
    end process;

    c_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                c_fu_108 <= ap_const_lv10_0;
            elsif (((icmp_ln158_fu_241_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                c_fu_108 <= add_ln171_fu_354_p2;
            end if; 
        end if;
    end process;

    indvar_flatten48_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten48_fu_116 <= ap_const_lv19_0;
            elsif (((icmp_ln158_fu_241_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                indvar_flatten48_fu_116 <= add_ln158_fu_247_p2;
            end if; 
        end if;
    end process;

    r_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                r_fu_112 <= ap_const_lv9_0;
            elsif (((icmp_ln158_fu_241_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                r_fu_112 <= select_ln158_fu_279_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln163_reg_843 <= add_ln163_fu_325_p2;
                add_ln170_reg_1016 <= add_ln170_fu_738_p2;
                add_ln171_1_reg_864 <= add_ln171_1_fu_370_p2;
                add_ln171_1_reg_864_pp0_iter10_reg <= add_ln171_1_reg_864_pp0_iter9_reg;
                add_ln171_1_reg_864_pp0_iter11_reg <= add_ln171_1_reg_864_pp0_iter10_reg;
                add_ln171_1_reg_864_pp0_iter12_reg <= add_ln171_1_reg_864_pp0_iter11_reg;
                add_ln171_1_reg_864_pp0_iter13_reg <= add_ln171_1_reg_864_pp0_iter12_reg;
                add_ln171_1_reg_864_pp0_iter14_reg <= add_ln171_1_reg_864_pp0_iter13_reg;
                add_ln171_1_reg_864_pp0_iter15_reg <= add_ln171_1_reg_864_pp0_iter14_reg;
                add_ln171_1_reg_864_pp0_iter1_reg <= add_ln171_1_reg_864;
                add_ln171_1_reg_864_pp0_iter2_reg <= add_ln171_1_reg_864_pp0_iter1_reg;
                add_ln171_1_reg_864_pp0_iter3_reg <= add_ln171_1_reg_864_pp0_iter2_reg;
                add_ln171_1_reg_864_pp0_iter4_reg <= add_ln171_1_reg_864_pp0_iter3_reg;
                add_ln171_1_reg_864_pp0_iter5_reg <= add_ln171_1_reg_864_pp0_iter4_reg;
                add_ln171_1_reg_864_pp0_iter6_reg <= add_ln171_1_reg_864_pp0_iter5_reg;
                add_ln171_1_reg_864_pp0_iter7_reg <= add_ln171_1_reg_864_pp0_iter6_reg;
                add_ln171_1_reg_864_pp0_iter8_reg <= add_ln171_1_reg_864_pp0_iter7_reg;
                add_ln171_1_reg_864_pp0_iter9_reg <= add_ln171_1_reg_864_pp0_iter8_reg;
                empty_32_reg_848 <= empty_32_fu_335_p2;
                gmem_addr_read_reg_961 <= m_axi_gmem_RDATA;
                icmp_ln158_reg_839 <= icmp_ln158_fu_241_p2;
                icmp_ln158_reg_839_pp0_iter10_reg <= icmp_ln158_reg_839_pp0_iter9_reg;
                icmp_ln158_reg_839_pp0_iter11_reg <= icmp_ln158_reg_839_pp0_iter10_reg;
                icmp_ln158_reg_839_pp0_iter12_reg <= icmp_ln158_reg_839_pp0_iter11_reg;
                icmp_ln158_reg_839_pp0_iter13_reg <= icmp_ln158_reg_839_pp0_iter12_reg;
                icmp_ln158_reg_839_pp0_iter14_reg <= icmp_ln158_reg_839_pp0_iter13_reg;
                icmp_ln158_reg_839_pp0_iter1_reg <= icmp_ln158_reg_839;
                icmp_ln158_reg_839_pp0_iter2_reg <= icmp_ln158_reg_839_pp0_iter1_reg;
                icmp_ln158_reg_839_pp0_iter3_reg <= icmp_ln158_reg_839_pp0_iter2_reg;
                icmp_ln158_reg_839_pp0_iter4_reg <= icmp_ln158_reg_839_pp0_iter3_reg;
                icmp_ln158_reg_839_pp0_iter5_reg <= icmp_ln158_reg_839_pp0_iter4_reg;
                icmp_ln158_reg_839_pp0_iter6_reg <= icmp_ln158_reg_839_pp0_iter5_reg;
                icmp_ln158_reg_839_pp0_iter7_reg <= icmp_ln158_reg_839_pp0_iter6_reg;
                icmp_ln158_reg_839_pp0_iter8_reg <= icmp_ln158_reg_839_pp0_iter7_reg;
                icmp_ln158_reg_839_pp0_iter9_reg <= icmp_ln158_reg_839_pp0_iter8_reg;
                trunc_ln167_reg_859 <= trunc_ln167_fu_350_p1;
                trunc_ln167_reg_859_pp0_iter10_reg <= trunc_ln167_reg_859_pp0_iter9_reg;
                trunc_ln167_reg_859_pp0_iter11_reg <= trunc_ln167_reg_859_pp0_iter10_reg;
                trunc_ln167_reg_859_pp0_iter12_reg <= trunc_ln167_reg_859_pp0_iter11_reg;
                trunc_ln167_reg_859_pp0_iter1_reg <= trunc_ln167_reg_859;
                trunc_ln167_reg_859_pp0_iter2_reg <= trunc_ln167_reg_859_pp0_iter1_reg;
                trunc_ln167_reg_859_pp0_iter3_reg <= trunc_ln167_reg_859_pp0_iter2_reg;
                trunc_ln167_reg_859_pp0_iter4_reg <= trunc_ln167_reg_859_pp0_iter3_reg;
                trunc_ln167_reg_859_pp0_iter5_reg <= trunc_ln167_reg_859_pp0_iter4_reg;
                trunc_ln167_reg_859_pp0_iter6_reg <= trunc_ln167_reg_859_pp0_iter5_reg;
                trunc_ln167_reg_859_pp0_iter7_reg <= trunc_ln167_reg_859_pp0_iter6_reg;
                trunc_ln167_reg_859_pp0_iter8_reg <= trunc_ln167_reg_859_pp0_iter7_reg;
                trunc_ln167_reg_859_pp0_iter9_reg <= trunc_ln167_reg_859_pp0_iter8_reg;
                trunc_ln167_s_reg_854 <= empty_32_fu_335_p2(63 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                add_ln167_4_reg_991 <= add_ln167_4_fu_622_p2;
                empty_33_reg_907 <= empty_33_fu_468_p2;
                gmem_addr_3_read_reg_986 <= m_axi_gmem_RDATA;
                trunc_ln167_11_reg_918 <= trunc_ln167_11_fu_483_p1;
                trunc_ln167_11_reg_918_pp0_iter10_reg <= trunc_ln167_11_reg_918_pp0_iter9_reg;
                trunc_ln167_11_reg_918_pp0_iter11_reg <= trunc_ln167_11_reg_918_pp0_iter10_reg;
                trunc_ln167_11_reg_918_pp0_iter12_reg <= trunc_ln167_11_reg_918_pp0_iter11_reg;
                trunc_ln167_11_reg_918_pp0_iter1_reg <= trunc_ln167_11_reg_918;
                trunc_ln167_11_reg_918_pp0_iter2_reg <= trunc_ln167_11_reg_918_pp0_iter1_reg;
                trunc_ln167_11_reg_918_pp0_iter3_reg <= trunc_ln167_11_reg_918_pp0_iter2_reg;
                trunc_ln167_11_reg_918_pp0_iter4_reg <= trunc_ln167_11_reg_918_pp0_iter3_reg;
                trunc_ln167_11_reg_918_pp0_iter5_reg <= trunc_ln167_11_reg_918_pp0_iter4_reg;
                trunc_ln167_11_reg_918_pp0_iter6_reg <= trunc_ln167_11_reg_918_pp0_iter5_reg;
                trunc_ln167_11_reg_918_pp0_iter7_reg <= trunc_ln167_11_reg_918_pp0_iter6_reg;
                trunc_ln167_11_reg_918_pp0_iter8_reg <= trunc_ln167_11_reg_918_pp0_iter7_reg;
                trunc_ln167_11_reg_918_pp0_iter9_reg <= trunc_ln167_11_reg_918_pp0_iter8_reg;
                trunc_ln167_4_reg_913 <= empty_33_fu_468_p2(63 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                gmem_addr_1_read_reg_971 <= m_axi_gmem_RDATA;
                icmp_ln170_reg_1027 <= icmp_ln170_fu_774_p2;
                icmp_ln170_reg_1027_pp0_iter14_reg <= icmp_ln170_reg_1027;
                icmp_ln170_reg_1027_pp0_iter15_reg <= icmp_ln170_reg_1027_pp0_iter14_reg;
                sum_reg_966 <= sum_fu_571_p1;
                trunc_ln167_1_reg_875 <= add_ln167_fu_401_p2(63 downto 6);
                trunc_ln167_5_reg_880 <= trunc_ln167_5_fu_416_p1;
                trunc_ln167_5_reg_880_pp0_iter10_reg <= trunc_ln167_5_reg_880_pp0_iter9_reg;
                trunc_ln167_5_reg_880_pp0_iter11_reg <= trunc_ln167_5_reg_880_pp0_iter10_reg;
                trunc_ln167_5_reg_880_pp0_iter12_reg <= trunc_ln167_5_reg_880_pp0_iter11_reg;
                trunc_ln167_5_reg_880_pp0_iter1_reg <= trunc_ln167_5_reg_880;
                trunc_ln167_5_reg_880_pp0_iter2_reg <= trunc_ln167_5_reg_880_pp0_iter1_reg;
                trunc_ln167_5_reg_880_pp0_iter3_reg <= trunc_ln167_5_reg_880_pp0_iter2_reg;
                trunc_ln167_5_reg_880_pp0_iter4_reg <= trunc_ln167_5_reg_880_pp0_iter3_reg;
                trunc_ln167_5_reg_880_pp0_iter5_reg <= trunc_ln167_5_reg_880_pp0_iter4_reg;
                trunc_ln167_5_reg_880_pp0_iter6_reg <= trunc_ln167_5_reg_880_pp0_iter5_reg;
                trunc_ln167_5_reg_880_pp0_iter7_reg <= trunc_ln167_5_reg_880_pp0_iter6_reg;
                trunc_ln167_5_reg_880_pp0_iter8_reg <= trunc_ln167_5_reg_880_pp0_iter7_reg;
                trunc_ln167_5_reg_880_pp0_iter9_reg <= trunc_ln167_5_reg_880_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                gmem_addr_2_read_reg_981 <= m_axi_gmem_RDATA;
                trunc_ln167_2_reg_891 <= add_ln167_1_fu_430_p2(63 downto 6);
                trunc_ln167_7_reg_976 <= trunc_ln167_7_fu_591_p1;
                trunc_ln167_9_reg_896 <= trunc_ln167_9_fu_445_p1;
                trunc_ln167_9_reg_896_pp0_iter10_reg <= trunc_ln167_9_reg_896_pp0_iter9_reg;
                trunc_ln167_9_reg_896_pp0_iter11_reg <= trunc_ln167_9_reg_896_pp0_iter10_reg;
                trunc_ln167_9_reg_896_pp0_iter12_reg <= trunc_ln167_9_reg_896_pp0_iter11_reg;
                trunc_ln167_9_reg_896_pp0_iter1_reg <= trunc_ln167_9_reg_896;
                trunc_ln167_9_reg_896_pp0_iter2_reg <= trunc_ln167_9_reg_896_pp0_iter1_reg;
                trunc_ln167_9_reg_896_pp0_iter3_reg <= trunc_ln167_9_reg_896_pp0_iter2_reg;
                trunc_ln167_9_reg_896_pp0_iter4_reg <= trunc_ln167_9_reg_896_pp0_iter3_reg;
                trunc_ln167_9_reg_896_pp0_iter5_reg <= trunc_ln167_9_reg_896_pp0_iter4_reg;
                trunc_ln167_9_reg_896_pp0_iter6_reg <= trunc_ln167_9_reg_896_pp0_iter5_reg;
                trunc_ln167_9_reg_896_pp0_iter7_reg <= trunc_ln167_9_reg_896_pp0_iter6_reg;
                trunc_ln167_9_reg_896_pp0_iter8_reg <= trunc_ln167_9_reg_896_pp0_iter7_reg;
                trunc_ln167_9_reg_896_pp0_iter9_reg <= trunc_ln167_9_reg_896_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then
                gmem_addr_4_read_reg_1001 <= m_axi_gmem_RDATA;
                trunc_ln167_12_reg_996 <= trunc_ln167_12_fu_644_p1;
                trunc_ln167_13_reg_934 <= trunc_ln167_13_fu_512_p1;
                trunc_ln167_13_reg_934_pp0_iter10_reg <= trunc_ln167_13_reg_934_pp0_iter9_reg;
                trunc_ln167_13_reg_934_pp0_iter11_reg <= trunc_ln167_13_reg_934_pp0_iter10_reg;
                trunc_ln167_13_reg_934_pp0_iter12_reg <= trunc_ln167_13_reg_934_pp0_iter11_reg;
                trunc_ln167_13_reg_934_pp0_iter1_reg <= trunc_ln167_13_reg_934;
                trunc_ln167_13_reg_934_pp0_iter2_reg <= trunc_ln167_13_reg_934_pp0_iter1_reg;
                trunc_ln167_13_reg_934_pp0_iter3_reg <= trunc_ln167_13_reg_934_pp0_iter2_reg;
                trunc_ln167_13_reg_934_pp0_iter4_reg <= trunc_ln167_13_reg_934_pp0_iter3_reg;
                trunc_ln167_13_reg_934_pp0_iter5_reg <= trunc_ln167_13_reg_934_pp0_iter4_reg;
                trunc_ln167_13_reg_934_pp0_iter6_reg <= trunc_ln167_13_reg_934_pp0_iter5_reg;
                trunc_ln167_13_reg_934_pp0_iter7_reg <= trunc_ln167_13_reg_934_pp0_iter6_reg;
                trunc_ln167_13_reg_934_pp0_iter8_reg <= trunc_ln167_13_reg_934_pp0_iter7_reg;
                trunc_ln167_13_reg_934_pp0_iter9_reg <= trunc_ln167_13_reg_934_pp0_iter8_reg;
                trunc_ln167_6_reg_929 <= add_ln167_2_fu_497_p2(63 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem_addr_5_read_reg_1006 <= m_axi_gmem_RDATA;
                tmp4_reg_1011 <= tmp4_fu_675_p2;
                trunc_ln167_15_reg_950 <= trunc_ln167_15_fu_541_p1;
                trunc_ln167_15_reg_950_pp0_iter10_reg <= trunc_ln167_15_reg_950_pp0_iter9_reg;
                trunc_ln167_15_reg_950_pp0_iter11_reg <= trunc_ln167_15_reg_950_pp0_iter10_reg;
                trunc_ln167_15_reg_950_pp0_iter12_reg <= trunc_ln167_15_reg_950_pp0_iter11_reg;
                trunc_ln167_15_reg_950_pp0_iter13_reg <= trunc_ln167_15_reg_950_pp0_iter12_reg;
                trunc_ln167_15_reg_950_pp0_iter2_reg <= trunc_ln167_15_reg_950;
                trunc_ln167_15_reg_950_pp0_iter3_reg <= trunc_ln167_15_reg_950_pp0_iter2_reg;
                trunc_ln167_15_reg_950_pp0_iter4_reg <= trunc_ln167_15_reg_950_pp0_iter3_reg;
                trunc_ln167_15_reg_950_pp0_iter5_reg <= trunc_ln167_15_reg_950_pp0_iter4_reg;
                trunc_ln167_15_reg_950_pp0_iter6_reg <= trunc_ln167_15_reg_950_pp0_iter5_reg;
                trunc_ln167_15_reg_950_pp0_iter7_reg <= trunc_ln167_15_reg_950_pp0_iter6_reg;
                trunc_ln167_15_reg_950_pp0_iter8_reg <= trunc_ln167_15_reg_950_pp0_iter7_reg;
                trunc_ln167_15_reg_950_pp0_iter9_reg <= trunc_ln167_15_reg_950_pp0_iter8_reg;
                trunc_ln167_8_reg_945 <= add_ln167_3_fu_526_p2(63 downto 6);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage5_subdone, ap_block_pp0_stage4_subdone, ap_condition_exit_pp0_iter14_stage4, ap_idle_pp0_0to13, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to15, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to15 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter14_stage4) and (ap_idle_pp0_0to13 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    Ny_fu_759_p3 <= (select_ln170_fu_744_p3 & ap_const_lv8_0);
    add_ln158_fu_247_p2 <= std_logic_vector(unsigned(indvar_flatten48_fu_116) + unsigned(ap_const_lv19_1));
    add_ln163_cast_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln163_fu_325_p2),64));
    add_ln163_fu_325_p2 <= std_logic_vector(unsigned(zext_ln160_1_fu_321_p1) + unsigned(empty_fu_311_p2));
    add_ln167_1_fu_430_p2 <= std_logic_vector(unsigned(empty_32_reg_848) + unsigned(ap_const_lv64_2));
    add_ln167_2_fu_497_p2 <= std_logic_vector(unsigned(empty_33_reg_907) + unsigned(ap_const_lv64_1));
    add_ln167_3_fu_526_p2 <= std_logic_vector(unsigned(empty_33_reg_907) + unsigned(ap_const_lv64_2));
    add_ln167_4_fu_622_p2 <= std_logic_vector(unsigned(trunc_ln167_5_cast_fu_618_p1) + unsigned(zext_ln133_fu_595_p1));
    add_ln167_fu_401_p2 <= std_logic_vector(unsigned(empty_32_reg_848) + unsigned(ap_const_lv64_1));
    add_ln170_fu_738_p2 <= std_logic_vector(signed(sext_ln170_fu_734_p1) + signed(sext_ln167_6_fu_715_p1));
    add_ln171_1_fu_370_p2 <= std_logic_vector(unsigned(zext_ln171_fu_366_p1) + unsigned(empty_fu_311_p2));
    add_ln171_2_fu_360_p2 <= std_logic_vector(unsigned(zext_ln160_fu_317_p1) + unsigned(ap_const_lv11_281));
    add_ln171_fu_354_p2 <= std_logic_vector(unsigned(select_ln131_fu_265_p3) + unsigned(ap_const_lv10_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter13, ap_block_state7_io, ap_block_state79_pp0_stage0_iter13)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state79_pp0_stage0_iter13)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state7_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter13, ap_block_state7_io, ap_block_state79_pp0_stage0_iter13)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state79_pp0_stage0_iter13)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state7_io)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter12, m_axi_gmem_ARREADY, ap_block_state74_pp0_stage1_iter12)
    begin
                ap_block_pp0_stage1_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (m_axi_gmem_ARREADY = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state74_pp0_stage1_iter12)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter12, m_axi_gmem_ARREADY, ap_block_state74_pp0_stage1_iter12)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (m_axi_gmem_ARREADY = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state74_pp0_stage1_iter12)));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter12, ap_block_state3_io, ap_block_state75_pp0_stage2_iter12)
    begin
                ap_block_pp0_stage2_11001 <= (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state75_pp0_stage2_iter12)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter12, ap_block_state3_io, ap_block_state75_pp0_stage2_iter12)
    begin
                ap_block_pp0_stage2_subdone <= (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state75_pp0_stage2_iter12)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter12, ap_block_state4_io, ap_block_state76_pp0_stage3_iter12)
    begin
                ap_block_pp0_stage3_11001 <= (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state76_pp0_stage3_iter12)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter12, ap_block_state4_io, ap_block_state76_pp0_stage3_iter12)
    begin
                ap_block_pp0_stage3_subdone <= (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state76_pp0_stage3_iter12)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)));
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter12, ap_block_state5_io, ap_block_state77_pp0_stage4_iter12)
    begin
                ap_block_pp0_stage4_11001 <= (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state77_pp0_stage4_iter12)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io)));
    end process;


    ap_block_pp0_stage4_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter12, ap_block_state5_io, ap_block_state77_pp0_stage4_iter12)
    begin
                ap_block_pp0_stage4_subdone <= (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state77_pp0_stage4_iter12)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io)));
    end process;

        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage5_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter12, ap_block_state6_io, ap_block_state78_pp0_stage5_iter12)
    begin
                ap_block_pp0_stage5_11001 <= (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state78_pp0_stage5_iter12)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_io)));
    end process;


    ap_block_pp0_stage5_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter12, ap_block_state6_io, ap_block_state78_pp0_stage5_iter12)
    begin
                ap_block_pp0_stage5_subdone <= (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state78_pp0_stage5_iter12)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_io)));
    end process;


    ap_block_state3_io_assign_proc : process(m_axi_gmem_ARREADY, icmp_ln158_reg_839)
    begin
                ap_block_state3_io <= ((icmp_ln158_reg_839 = ap_const_lv1_0) and (m_axi_gmem_ARREADY = ap_const_logic_0));
    end process;


    ap_block_state4_io_assign_proc : process(m_axi_gmem_ARREADY, icmp_ln158_reg_839)
    begin
                ap_block_state4_io <= ((icmp_ln158_reg_839 = ap_const_lv1_0) and (m_axi_gmem_ARREADY = ap_const_logic_0));
    end process;


    ap_block_state5_io_assign_proc : process(m_axi_gmem_ARREADY, icmp_ln158_reg_839)
    begin
                ap_block_state5_io <= ((icmp_ln158_reg_839 = ap_const_lv1_0) and (m_axi_gmem_ARREADY = ap_const_logic_0));
    end process;


    ap_block_state6_io_assign_proc : process(m_axi_gmem_ARREADY, icmp_ln158_reg_839)
    begin
                ap_block_state6_io <= ((icmp_ln158_reg_839 = ap_const_lv1_0) and (m_axi_gmem_ARREADY = ap_const_logic_0));
    end process;


    ap_block_state74_pp0_stage1_iter12_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state74_pp0_stage1_iter12 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state75_pp0_stage2_iter12_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state75_pp0_stage2_iter12 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state76_pp0_stage3_iter12_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state76_pp0_stage3_iter12 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state77_pp0_stage4_iter12_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state77_pp0_stage4_iter12 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state78_pp0_stage5_iter12_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state78_pp0_stage5_iter12 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state79_pp0_stage0_iter13_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state79_pp0_stage0_iter13 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state7_io_assign_proc : process(m_axi_gmem_ARREADY, icmp_ln158_reg_839)
    begin
                ap_block_state7_io <= ((icmp_ln158_reg_839 = ap_const_lv1_0) and (m_axi_gmem_ARREADY = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage5_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, icmp_ln158_reg_839, ap_block_pp0_stage5_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (icmp_ln158_reg_839 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter0_stage5 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter14_stage4_assign_proc : process(ap_enable_reg_pp0_iter14, ap_CS_fsm_pp0_stage4, icmp_ln158_reg_839_pp0_iter14_reg, ap_block_pp0_stage4_subdone)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (icmp_ln158_reg_839_pp0_iter14_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
            ap_condition_exit_pp0_iter14_stage4 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter14_stage4 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter14_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_loop_exit_ready_pp0_iter14_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to13_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to13 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to15_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to15 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to15 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage5;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_32_fu_335_p2 <= std_logic_vector(unsigned(add_ln163_cast_fu_331_p1) + unsigned(output_r));
    empty_33_fu_468_p2 <= std_logic_vector(unsigned(tmp23_cast_fu_464_p1) + unsigned(output_r));
    empty_fu_311_p2 <= std_logic_vector(unsigned(p_shl_fu_295_p1) + unsigned(p_shl32_fu_307_p1));

    gmem_blk_n_AR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage5, m_axi_gmem_ARREADY, icmp_ln158_reg_839, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage0)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln158_reg_839 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5) and (icmp_ln158_reg_839 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (icmp_ln158_reg_839 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (icmp_ln158_reg_839 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2) and 
    (icmp_ln158_reg_839 = ap_const_lv1_0)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_CS_fsm_pp0_stage5, m_axi_gmem_RVALID, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage0)
    begin
        if ((((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5)) or ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4)) or ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3)) or ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1)) or ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_754_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            grp_fu_754_ce <= ap_const_logic_1;
        else 
            grp_fu_754_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_754_p1 <= grp_fu_754_p10(6 - 1 downto 0);
    grp_fu_754_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln170_fu_744_p3),11));
    icmp_ln158_fu_241_p2 <= "1" when (indvar_flatten48_fu_116 = ap_const_lv19_4A744) else "0";
    icmp_ln160_fu_259_p2 <= "1" when (c_fu_108 = ap_const_lv10_27E) else "0";
    icmp_ln170_fu_774_p2 <= "1" when (signed(sext_ln170_1_fu_771_p1) < signed(zext_ln170_1_fu_767_p1)) else "0";
    indvars_iv_next25_i74106_fu_273_p2 <= std_logic_vector(unsigned(r_fu_112) + unsigned(ap_const_lv9_1));
    lshr_ln167_1_fu_586_p2 <= std_logic_vector(shift_right(unsigned(gmem_addr_1_read_reg_971),to_integer(unsigned('0' & zext_ln167_1_fu_582_p1(31-1 downto 0)))));
    lshr_ln167_2_fu_609_p2 <= std_logic_vector(shift_right(unsigned(gmem_addr_2_read_reg_981),to_integer(unsigned('0' & zext_ln167_3_fu_605_p1(31-1 downto 0)))));
    lshr_ln167_3_fu_639_p2 <= std_logic_vector(shift_right(unsigned(gmem_addr_3_read_reg_986),to_integer(unsigned('0' & zext_ln167_4_fu_635_p1(31-1 downto 0)))));
    lshr_ln167_4_fu_662_p2 <= std_logic_vector(shift_right(unsigned(gmem_addr_4_read_reg_1001),to_integer(unsigned('0' & zext_ln167_6_fu_658_p1(31-1 downto 0)))));
    lshr_ln167_5_fu_695_p2 <= std_logic_vector(shift_right(unsigned(gmem_addr_5_read_reg_1006),to_integer(unsigned('0' & zext_ln167_8_fu_691_p1(31-1 downto 0)))));
    lshr_ln167_fu_566_p2 <= std_logic_vector(shift_right(unsigned(gmem_addr_read_reg_961),to_integer(unsigned('0' & zext_ln167_fu_562_p1(31-1 downto 0)))));

    m_axi_gmem_ARADDR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage5, icmp_ln158_reg_839, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, sext_ln167_fu_391_p1, sext_ln167_1_fu_420_p1, sext_ln167_2_fu_449_p1, sext_ln167_3_fu_487_p1, sext_ln167_4_fu_516_p1, sext_ln167_5_fu_545_p1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            m_axi_gmem_ARADDR <= sext_ln167_5_fu_545_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln158_reg_839 = ap_const_lv1_0))) then 
            m_axi_gmem_ARADDR <= sext_ln167_4_fu_516_p1;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (icmp_ln158_reg_839 = ap_const_lv1_0))) then 
            m_axi_gmem_ARADDR <= sext_ln167_3_fu_487_p1;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln158_reg_839 = ap_const_lv1_0))) then 
            m_axi_gmem_ARADDR <= sext_ln167_2_fu_449_p1;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln158_reg_839 = ap_const_lv1_0))) then 
            m_axi_gmem_ARADDR <= sext_ln167_1_fu_420_p1;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln158_reg_839 = ap_const_lv1_0))) then 
            m_axi_gmem_ARADDR <= sext_ln167_fu_391_p1;
        else 
            m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv64_1(32 - 1 downto 0);
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage5, icmp_ln158_reg_839, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln158_reg_839 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (icmp_ln158_reg_839 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln158_reg_839 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln158_reg_839 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 
    = ap_block_pp0_stage2_11001) and (icmp_ln158_reg_839 = ap_const_lv1_0)))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;

    m_axi_gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= ap_const_lv512_lc_1;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv64_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
    p_shl32_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_299_p3),19));
    p_shl_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_287_p3),19));
    pixel_fu_789_p3 <= 
        ap_const_lv8_FF when (xor_ln170_fu_780_p2(0) = '1') else 
        trunc_ln170_fu_785_p1;
    select_ln131_fu_265_p3 <= 
        ap_const_lv10_0 when (icmp_ln160_fu_259_p2(0) = '1') else 
        c_fu_108;
    select_ln158_fu_279_p3 <= 
        indvars_iv_next25_i74106_fu_273_p2 when (icmp_ln160_fu_259_p2(0) = '1') else 
        r_fu_112;
    select_ln170_fu_744_p3 <= 
        ap_const_lv5_1 when (icmp_ln155(0) = '1') else 
        normal_factor_8_reload;
        sext_ln167_1_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln167_1_reg_875),64));

        sext_ln167_2_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln167_2_reg_891),64));

        sext_ln167_3_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln167_4_reg_913),64));

        sext_ln167_4_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln167_6_reg_929),64));

        sext_ln167_5_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln167_8_reg_945),64));

        sext_ln167_6_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_708_p3),11));

        sext_ln167_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln167_s_reg_854),64));

        sext_ln170_1_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln170_reg_1016),14));

        sext_ln170_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln167_1_fu_728_p2),11));

    shl_ln167_1_fu_575_p3 <= (trunc_ln167_5_reg_880_pp0_iter12_reg & ap_const_lv3_0);
    shl_ln167_2_fu_598_p3 <= (trunc_ln167_9_reg_896_pp0_iter12_reg & ap_const_lv3_0);
    shl_ln167_3_fu_628_p3 <= (trunc_ln167_11_reg_918_pp0_iter12_reg & ap_const_lv3_0);
    shl_ln167_4_fu_651_p3 <= (trunc_ln167_13_reg_934_pp0_iter12_reg & ap_const_lv3_0);
    shl_ln167_5_fu_684_p3 <= (trunc_ln167_15_reg_950_pp0_iter13_reg & ap_const_lv3_0);
    shl_ln3_fu_555_p3 <= (trunc_ln167_reg_859_pp0_iter12_reg & ap_const_lv3_0);
    sub_ln167_1_fu_728_p2 <= std_logic_vector(unsigned(sub_ln167_fu_722_p2) - unsigned(trunc_ln167_11_cast_fu_704_p1));
    sub_ln167_fu_722_p2 <= std_logic_vector(unsigned(zext_ln167_9_fu_719_p1) - unsigned(zext_ln167_5_fu_681_p1));
    sum_fu_571_p1 <= lshr_ln167_fu_566_p2(8 - 1 downto 0);
    temp_buf_address0 <= zext_ln171_1_fu_798_p1(19 - 1 downto 0);
    temp_buf_ce0 <= temp_buf_ce0_local;

    temp_buf_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter15, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
            temp_buf_ce0_local <= ap_const_logic_1;
        else 
            temp_buf_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    temp_buf_d0 <= pixel_fu_789_p3;
    temp_buf_we0 <= temp_buf_we0_local;

    temp_buf_we0_local_assign_proc : process(ap_enable_reg_pp0_iter15, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
            temp_buf_we0_local <= ap_const_logic_1;
        else 
            temp_buf_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    tmp23_cast_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp23_fu_459_p2),64));
    tmp23_fu_459_p2 <= std_logic_vector(unsigned(add_ln163_reg_843) + unsigned(ap_const_lv19_500));
    tmp4_fu_675_p2 <= std_logic_vector(unsigned(zext_ln167_2_fu_648_p1) - unsigned(zext_ln167_7_fu_671_p1));
    tmp_23_fu_299_p3 <= (select_ln158_fu_279_p3 & ap_const_lv7_0);
    tmp_fu_287_p3 <= (select_ln158_fu_279_p3 & ap_const_lv9_0);
    tmp_s_fu_708_p3 <= (tmp4_reg_1011 & ap_const_lv1_0);
    trunc_ln167_10_fu_614_p1 <= lshr_ln167_2_fu_609_p2(8 - 1 downto 0);
    trunc_ln167_11_cast_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln167_16_fu_700_p1),10));
    trunc_ln167_11_fu_483_p1 <= empty_33_fu_468_p2(6 - 1 downto 0);
    trunc_ln167_12_fu_644_p1 <= lshr_ln167_3_fu_639_p2(8 - 1 downto 0);
    trunc_ln167_13_fu_512_p1 <= add_ln167_2_fu_497_p2(6 - 1 downto 0);
    trunc_ln167_14_fu_667_p1 <= lshr_ln167_4_fu_662_p2(8 - 1 downto 0);
    trunc_ln167_15_fu_541_p1 <= add_ln167_3_fu_526_p2(6 - 1 downto 0);
    trunc_ln167_16_fu_700_p1 <= lshr_ln167_5_fu_695_p2(8 - 1 downto 0);
    trunc_ln167_5_cast_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln167_10_fu_614_p1),9));
    trunc_ln167_5_fu_416_p1 <= add_ln167_fu_401_p2(6 - 1 downto 0);
    trunc_ln167_7_fu_591_p1 <= lshr_ln167_1_fu_586_p2(8 - 1 downto 0);
    trunc_ln167_9_fu_445_p1 <= add_ln167_1_fu_430_p2(6 - 1 downto 0);
    trunc_ln167_fu_350_p1 <= empty_32_fu_335_p2(6 - 1 downto 0);
    trunc_ln170_fu_785_p1 <= grp_fu_754_p2(8 - 1 downto 0);
    xor_ln170_fu_780_p2 <= (icmp_ln170_reg_1027_pp0_iter15_reg xor ap_const_lv1_1);
    zext_ln133_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_reg_966),9));
    zext_ln160_1_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln131_fu_265_p3),19));
    zext_ln160_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln131_fu_265_p3),11));
    zext_ln167_1_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln167_1_fu_575_p3),512));
    zext_ln167_2_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln167_7_reg_976),9));
    zext_ln167_3_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln167_2_fu_598_p3),512));
    zext_ln167_4_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln167_3_fu_628_p3),512));
    zext_ln167_5_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln167_12_reg_996),10));
    zext_ln167_6_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln167_4_fu_651_p3),512));
    zext_ln167_7_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln167_14_fu_667_p1),9));
    zext_ln167_8_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln167_5_fu_684_p3),512));
    zext_ln167_9_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln167_4_reg_991),10));
    zext_ln167_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln3_fu_555_p3),512));
    zext_ln170_1_fu_767_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Ny_fu_759_p3),14));
    zext_ln171_1_fu_798_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln171_1_reg_864_pp0_iter15_reg),64));
    zext_ln171_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln171_2_fu_360_p2),19));
end behav;
