-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity edgedetect_edgedetect_Pipeline_VITIS_LOOP_10_1_VITIS_LOOP_13_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    image_gray_5_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    image_gray_5_ce0 : OUT STD_LOGIC;
    image_gray_5_we0 : OUT STD_LOGIC;
    image_gray_5_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    image_gray_4_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    image_gray_4_ce0 : OUT STD_LOGIC;
    image_gray_4_we0 : OUT STD_LOGIC;
    image_gray_4_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    image_gray_3_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    image_gray_3_ce0 : OUT STD_LOGIC;
    image_gray_3_we0 : OUT STD_LOGIC;
    image_gray_3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    image_gray_2_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    image_gray_2_ce0 : OUT STD_LOGIC;
    image_gray_2_we0 : OUT STD_LOGIC;
    image_gray_2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    image_gray_1_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    image_gray_1_ce0 : OUT STD_LOGIC;
    image_gray_1_we0 : OUT STD_LOGIC;
    image_gray_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    image_gray_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    image_gray_ce0 : OUT STD_LOGIC;
    image_gray_we0 : OUT STD_LOGIC;
    image_gray_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    image_rgb : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of edgedetect_edgedetect_Pipeline_VITIS_LOOP_10_1_VITIS_LOOP_13_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv64_3FD322D0E5604189 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111010011001000101101000011100101011000000100000110001001";
    constant ap_const_lv64_3FE2C8B439581062 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100010110010001011010000111001010110000001000001100010";
    constant ap_const_lv64_3FBD2F1A9FBE76C9 : STD_LOGIC_VECTOR (63 downto 0) := "0011111110111101001011110001101010011111101111100111011011001001";
    constant ap_const_lv19_4B000 : STD_LOGIC_VECTOR (18 downto 0) := "1001011000000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv11_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000011";
    constant ap_const_lv19_6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000110";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv39_AAAAB : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000010101010101010101011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_433 : STD_LOGIC_VECTOR (10 downto 0) := "10000110011";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv52_FFFFFFFFFFFFF : STD_LOGIC_VECTOR (51 downto 0) := "1111111111111111111111111111111111111111111111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_BFF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal icmp_ln10_reg_1160 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state75_pp0_stage2_iter24 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal mask_table_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mask_table_q0 : STD_LOGIC_VECTOR (51 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state76_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln10_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state74_pp0_stage1_iter24 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_s_reg_1164 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_2_reg_1169 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln15_fu_517_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln15_reg_1174 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln15_1_reg_1180 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln15_fu_538_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1185 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1185_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1185_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1185_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1185_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1185_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1185_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1185_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1185_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1185_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1185_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1185_pp0_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1185_pp0_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1185_pp0_iter13_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1185_pp0_iter14_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1185_pp0_iter15_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1185_pp0_iter16_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1185_pp0_iter17_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1185_pp0_iter18_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1185_pp0_iter19_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1185_pp0_iter20_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1185_pp0_iter21_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1185_pp0_iter22_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1185_pp0_iter23_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1185_pp0_iter24_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln21_fu_548_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln21_reg_1190 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal trunc_ln15_5_reg_1202 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln15_3_fu_633_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1207 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1207_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1207_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1207_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1207_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1207_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1207_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1207_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1207_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1207_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1207_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1207_pp0_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1207_pp0_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1207_pp0_iter13_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1207_pp0_iter14_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1207_pp0_iter15_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1207_pp0_iter16_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1207_pp0_iter17_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1207_pp0_iter18_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1207_pp0_iter19_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1207_pp0_iter20_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1207_pp0_iter21_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1207_pp0_iter22_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1207_pp0_iter23_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1207_pp0_iter24_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_7_reg_1212 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln15_6_fu_652_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1217 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1217_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1217_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1217_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1217_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1217_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1217_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1217_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1217_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1217_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1217_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1217_pp0_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1217_pp0_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1217_pp0_iter13_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1217_pp0_iter14_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1217_pp0_iter15_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1217_pp0_iter16_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1217_pp0_iter17_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1217_pp0_iter18_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1217_pp0_iter19_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1217_pp0_iter20_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1217_pp0_iter21_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1217_pp0_iter22_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1217_pp0_iter23_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1217_pp0_iter24_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_28_reg_1222 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_reg_1222_pp0_iter1_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_reg_1222_pp0_iter2_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_reg_1222_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_reg_1222_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_reg_1222_pp0_iter5_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_reg_1222_pp0_iter6_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_reg_1222_pp0_iter7_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_reg_1222_pp0_iter8_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_reg_1222_pp0_iter9_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_reg_1222_pp0_iter10_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_reg_1222_pp0_iter11_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_reg_1222_pp0_iter12_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_reg_1222_pp0_iter13_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_reg_1222_pp0_iter14_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_reg_1222_pp0_iter15_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_reg_1222_pp0_iter16_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_reg_1222_pp0_iter17_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_reg_1222_pp0_iter18_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_reg_1222_pp0_iter19_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_reg_1222_pp0_iter20_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_reg_1222_pp0_iter21_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_reg_1222_pp0_iter22_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_reg_1222_pp0_iter23_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_reg_1222_pp0_iter24_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_reg_1222_pp0_iter25_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_reg_1222_pp0_iter26_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_reg_1222_pp0_iter27_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_reg_1222_pp0_iter28_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_reg_1222_pp0_iter29_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_reg_1222_pp0_iter30_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_reg_1222_pp0_iter31_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_reg_1222_pp0_iter32_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_reg_1222_pp0_iter33_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_reg_1222_pp0_iter34_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_reg_1222_pp0_iter35_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln21_fu_695_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln21_reg_1239 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln21_reg_1239_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln21_reg_1239_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln21_reg_1239_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln21_reg_1239_pp0_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln21_reg_1239_pp0_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln21_reg_1239_pp0_iter13_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln21_reg_1239_pp0_iter14_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln21_reg_1239_pp0_iter15_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln21_reg_1239_pp0_iter16_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln21_reg_1239_pp0_iter17_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln21_reg_1239_pp0_iter18_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln21_reg_1239_pp0_iter19_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln21_reg_1239_pp0_iter20_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln21_reg_1239_pp0_iter21_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln21_reg_1239_pp0_iter22_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln21_reg_1239_pp0_iter23_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln21_reg_1239_pp0_iter24_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln21_reg_1239_pp0_iter25_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln21_reg_1239_pp0_iter26_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln21_reg_1239_pp0_iter27_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln21_reg_1239_pp0_iter28_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln21_reg_1239_pp0_iter29_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln21_reg_1239_pp0_iter30_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln21_reg_1239_pp0_iter31_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln21_reg_1239_pp0_iter32_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln21_reg_1239_pp0_iter33_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln21_reg_1239_pp0_iter34_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln21_reg_1239_pp0_iter35_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_addr_read_reg_1243 : STD_LOGIC_VECTOR (511 downto 0);
    signal r_fu_715_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_reg_1248 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_addr_1_read_reg_1253 : STD_LOGIC_VECTOR (511 downto 0);
    signal g_fu_735_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal g_reg_1258 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_addr_2_read_reg_1263 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln20_fu_739_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_fu_759_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_reg_1273 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln20_1_fu_763_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln20_2_fu_767_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_354_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv19_i_reg_1288 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv22_i_reg_1293 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv26_i_reg_1298 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_347_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul20_i_reg_1303 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul23_i_reg_1308 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul27_i_reg_1313 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul27_i_reg_1313_pp0_iter30_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul27_i_reg_1313_pp0_iter31_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_343_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add24_i_reg_1318 : STD_LOGIC_VECTOR (63 downto 0);
    signal add28_i_reg_1323 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_337_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal gray_reg_1328 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_340_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_reg_1333 : STD_LOGIC_VECTOR (63 downto 0);
    signal xs_sign_reg_1338 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_exp_reg_1347 : STD_LOGIC_VECTOR (10 downto 0);
    signal xs_sig_fu_793_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal xs_sig_reg_1355 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln479_fu_812_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln479_reg_1366 : STD_LOGIC_VECTOR (62 downto 0);
    signal xs_exp_4_reg_1371 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln505_fu_1017_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln505_reg_1377 : STD_LOGIC_VECTOR (51 downto 0);
    signal zext_ln68_fu_1030_p1 : STD_LOGIC_VECTOR (112 downto 0);
    signal zext_ln68_reg_1382 : STD_LOGIC_VECTOR (112 downto 0);
    signal tmp_27_fu_1043_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_reg_1387 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln71_fu_1072_p1 : STD_LOGIC_VECTOR (112 downto 0);
    signal zext_ln71_reg_1392 : STD_LOGIC_VECTOR (112 downto 0);
    signal tmp_4_reg_1397 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln32_fu_807_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_fu_1118_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln15_fu_608_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln15_1_fu_675_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln15_2_fu_685_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_188 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal add_ln13_fu_560_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal jj_fu_192 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal add_ln18_fu_542_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_fu_196 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal select_ln10_2_fu_429_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten_fu_200 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    signal add_ln10_fu_386_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mask_table_ce0_local : STD_LOGIC;
    signal image_gray_4_we0_local : STD_LOGIC;
    signal val_fu_1106_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal image_gray_4_ce0_local : STD_LOGIC;
    signal image_gray_3_we0_local : STD_LOGIC;
    signal image_gray_3_ce0_local : STD_LOGIC;
    signal image_gray_2_we0_local : STD_LOGIC;
    signal image_gray_2_ce0_local : STD_LOGIC;
    signal image_gray_1_we0_local : STD_LOGIC;
    signal image_gray_1_ce0_local : STD_LOGIC;
    signal image_gray_we0_local : STD_LOGIC;
    signal image_gray_ce0_local : STD_LOGIC;
    signal image_gray_5_we0_local : STD_LOGIC;
    signal image_gray_5_ce0_local : STD_LOGIC;
    signal grp_fu_343_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_343_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_347_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_347_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_354_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln13_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln10_1_fu_423_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_445_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl1_fu_437_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_shl18_fu_453_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal empty_fu_457_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_24_fu_487_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl_fu_495_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_shl16_fu_499_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal select_ln10_fu_407_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln10_1_fu_415_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln13_fu_509_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast39_fu_463_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln15_1_fu_522_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_1_fu_513_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal empty_35_fu_503_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_554_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_554_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_586_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_3_fu_597_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_cast40_fu_593_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln15_2_fu_618_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast41_fu_604_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln15_3_fu_637_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln21_fu_659_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln21_fu_659_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln21_fu_659_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_554_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_699_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln15_fu_706_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln15_fu_710_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln15_1_fu_719_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln15_1_fu_726_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln15_1_fu_730_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln15_2_fu_743_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln15_2_fu_750_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln15_2_fu_754_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal data_1_fu_771_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal index_fu_797_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal t_3_fu_826_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_fu_837_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_fu_841_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln36_fu_848_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xs_sign_1_fu_854_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_exp_1_fu_862_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal xs_sig_1_fu_872_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal xs_sig_2_fu_887_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal xor_ln39_fu_893_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal xs_sign_2_fu_876_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_exp_2_fu_881_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal xs_sig_3_fu_899_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal t_4_fu_905_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln18_fu_816_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_fu_821_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln18_fu_919_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln24_fu_931_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_1_fu_948_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_fu_943_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_fu_953_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln19_fu_959_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln24_fu_925_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln24_fu_937_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln19_1_fu_964_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dc_1_fu_980_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_1_fu_980_p8 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_1_fu_980_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_1_fu_980_p10 : STD_LOGIC_VECTOR (2 downto 0);
    signal dc_1_fu_980_p11 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_fu_1003_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mantissa_fu_1021_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln486_fu_1034_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln486_fu_1037_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln71_fu_1051_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln71_fu_1056_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln71_fu_1060_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln71_1_fu_1068_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln71_fu_1076_p2 : STD_LOGIC_VECTOR (112 downto 0);
    signal shl_ln71_fu_1092_p2 : STD_LOGIC_VECTOR (112 downto 0);
    signal tmp_5_fu_1096_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_337_ce : STD_LOGIC;
    signal grp_fu_340_ce : STD_LOGIC;
    signal grp_fu_343_ce : STD_LOGIC;
    signal grp_fu_347_ce : STD_LOGIC;
    signal grp_fu_354_ce : STD_LOGIC;
    signal grp_fu_554_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter31_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter32_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter33_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter34_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter35_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to36 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal mul_ln21_fu_659_p00 : STD_LOGIC_VECTOR (38 downto 0);
    signal dc_1_fu_980_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal dc_1_fu_980_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal dc_1_fu_980_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal dc_1_fu_980_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component edgedetect_fptrunc_64ns_32_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component edgedetect_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component edgedetect_dadd_64ns_64ns_64_8_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component edgedetect_dmul_64ns_64ns_64_7_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component edgedetect_sitodp_32ns_64_5_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component edgedetect_urem_19ns_4ns_3_23_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component edgedetect_mul_19ns_21ns_39_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (20 downto 0);
        dout : OUT STD_LOGIC_VECTOR (38 downto 0) );
    end component;


    component edgedetect_sparsemux_9_3_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        def : IN STD_LOGIC_VECTOR (63 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component edgedetect_edgedetect_Pipeline_VITIS_LOOP_10_1_VITIS_LOOP_13_2_mask_table_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component edgedetect_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mask_table_U : component edgedetect_edgedetect_Pipeline_VITIS_LOOP_10_1_VITIS_LOOP_13_2_mask_table_ROM_AUTO_1R
    generic map (
        DataWidth => 52,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mask_table_address0,
        ce0 => mask_table_ce0_local,
        q0 => mask_table_q0);

    fptrunc_64ns_32_2_no_dsp_1_U8 : component edgedetect_fptrunc_64ns_32_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add28_i_reg_1323,
        ce => grp_fu_337_ce,
        dout => grp_fu_337_p1);

    fpext_32ns_64_2_no_dsp_1_U9 : component edgedetect_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => gray_reg_1328,
        ce => grp_fu_340_ce,
        dout => grp_fu_340_p1);

    dadd_64ns_64ns_64_8_full_dsp_1_U10 : component edgedetect_dadd_64ns_64ns_64_8_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_343_p0,
        din1 => grp_fu_343_p1,
        ce => grp_fu_343_ce,
        dout => grp_fu_343_p2);

    dmul_64ns_64ns_64_7_max_dsp_1_U11 : component edgedetect_dmul_64ns_64ns_64_7_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_347_p0,
        din1 => grp_fu_347_p1,
        ce => grp_fu_347_ce,
        dout => grp_fu_347_p2);

    sitodp_32ns_64_5_no_dsp_1_U12 : component edgedetect_sitodp_32ns_64_5_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_354_p0,
        ce => grp_fu_354_ce,
        dout => grp_fu_354_p1);

    urem_19ns_4ns_3_23_1_U13 : component edgedetect_urem_19ns_4ns_3_23_1
    generic map (
        ID => 1,
        NUM_STAGE => 23,
        din0_WIDTH => 19,
        din1_WIDTH => 4,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_554_p0,
        din1 => grp_fu_554_p1,
        ce => grp_fu_554_ce,
        dout => grp_fu_554_p2);

    mul_19ns_21ns_39_1_1_U14 : component edgedetect_mul_19ns_21ns_39_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 21,
        dout_WIDTH => 39)
    port map (
        din0 => mul_ln21_fu_659_p0,
        din1 => mul_ln21_fu_659_p1,
        dout => mul_ln21_fu_659_p2);

    sparsemux_9_3_64_1_1_U15 : component edgedetect_sparsemux_9_3_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "100",
        din0_WIDTH => 64,
        CASE1 => "010",
        din1_WIDTH => 64,
        CASE2 => "001",
        din2_WIDTH => 64,
        CASE3 => "000",
        din3_WIDTH => 64,
        def_WIDTH => 64,
        sel_WIDTH => 3,
        dout_WIDTH => 64)
    port map (
        din0 => dc_reg_1333,
        din1 => dc_1_fu_980_p4,
        din2 => ap_const_lv64_BFF0000000000000,
        din3 => dc_1_fu_980_p8,
        def => dc_1_fu_980_p9,
        sel => dc_1_fu_980_p10,
        dout => dc_1_fu_980_p11);

    flow_control_loop_pipe_sequential_init_U : component edgedetect_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_loop_exit_ready_pp0_iter35_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_fu_196 <= ap_const_lv9_0;
            elsif (((icmp_ln10_fu_380_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                i_fu_196 <= select_ln10_2_fu_429_p3;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_fu_200 <= ap_const_lv19_0;
            elsif (((icmp_ln10_fu_380_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                indvar_flatten_fu_200 <= add_ln10_fu_386_p2;
            end if; 
        end if;
    end process;

    j_fu_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_fu_188 <= ap_const_lv10_0;
            elsif (((icmp_ln10_fu_380_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                j_fu_188 <= add_ln13_fu_560_p2;
            end if; 
        end if;
    end process;

    jj_fu_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                jj_fu_192 <= ap_const_lv11_0;
            elsif (((icmp_ln10_fu_380_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                jj_fu_192 <= add_ln18_fu_542_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1))) then
                add24_i_reg_1318 <= grp_fu_343_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter34 = ap_const_logic_1))) then
                add28_i_reg_1323 <= grp_fu_343_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln15_reg_1174 <= add_ln15_fu_517_p2;
                add_ln21_reg_1190 <= add_ln21_fu_548_p2;
                b_reg_1273 <= b_fu_759_p1;
                gmem_addr_read_reg_1243 <= m_axi_gmem_RDATA;
                icmp_ln10_reg_1160 <= icmp_ln10_fu_380_p2;
                mul27_i_reg_1313_pp0_iter30_reg <= mul27_i_reg_1313;
                mul27_i_reg_1313_pp0_iter31_reg <= mul27_i_reg_1313_pp0_iter30_reg;
                tmp_27_reg_1387 <= add_ln486_fu_1037_p2(11 downto 11);
                tmp_2_reg_1169 <= empty_fu_457_p2(19 downto 2);
                tmp_4_reg_1397 <= lshr_ln71_fu_1076_p2(60 downto 53);
                tmp_s_reg_1164 <= empty_fu_457_p2(19 downto 1);
                trunc_ln15_1_reg_1180 <= add_ln15_1_fu_522_p2(63 downto 6);
                trunc_ln15_reg_1185 <= trunc_ln15_fu_538_p1;
                trunc_ln15_reg_1185_pp0_iter10_reg <= trunc_ln15_reg_1185_pp0_iter9_reg;
                trunc_ln15_reg_1185_pp0_iter11_reg <= trunc_ln15_reg_1185_pp0_iter10_reg;
                trunc_ln15_reg_1185_pp0_iter12_reg <= trunc_ln15_reg_1185_pp0_iter11_reg;
                trunc_ln15_reg_1185_pp0_iter13_reg <= trunc_ln15_reg_1185_pp0_iter12_reg;
                trunc_ln15_reg_1185_pp0_iter14_reg <= trunc_ln15_reg_1185_pp0_iter13_reg;
                trunc_ln15_reg_1185_pp0_iter15_reg <= trunc_ln15_reg_1185_pp0_iter14_reg;
                trunc_ln15_reg_1185_pp0_iter16_reg <= trunc_ln15_reg_1185_pp0_iter15_reg;
                trunc_ln15_reg_1185_pp0_iter17_reg <= trunc_ln15_reg_1185_pp0_iter16_reg;
                trunc_ln15_reg_1185_pp0_iter18_reg <= trunc_ln15_reg_1185_pp0_iter17_reg;
                trunc_ln15_reg_1185_pp0_iter19_reg <= trunc_ln15_reg_1185_pp0_iter18_reg;
                trunc_ln15_reg_1185_pp0_iter1_reg <= trunc_ln15_reg_1185;
                trunc_ln15_reg_1185_pp0_iter20_reg <= trunc_ln15_reg_1185_pp0_iter19_reg;
                trunc_ln15_reg_1185_pp0_iter21_reg <= trunc_ln15_reg_1185_pp0_iter20_reg;
                trunc_ln15_reg_1185_pp0_iter22_reg <= trunc_ln15_reg_1185_pp0_iter21_reg;
                trunc_ln15_reg_1185_pp0_iter23_reg <= trunc_ln15_reg_1185_pp0_iter22_reg;
                trunc_ln15_reg_1185_pp0_iter24_reg <= trunc_ln15_reg_1185_pp0_iter23_reg;
                trunc_ln15_reg_1185_pp0_iter2_reg <= trunc_ln15_reg_1185_pp0_iter1_reg;
                trunc_ln15_reg_1185_pp0_iter3_reg <= trunc_ln15_reg_1185_pp0_iter2_reg;
                trunc_ln15_reg_1185_pp0_iter4_reg <= trunc_ln15_reg_1185_pp0_iter3_reg;
                trunc_ln15_reg_1185_pp0_iter5_reg <= trunc_ln15_reg_1185_pp0_iter4_reg;
                trunc_ln15_reg_1185_pp0_iter6_reg <= trunc_ln15_reg_1185_pp0_iter5_reg;
                trunc_ln15_reg_1185_pp0_iter7_reg <= trunc_ln15_reg_1185_pp0_iter6_reg;
                trunc_ln15_reg_1185_pp0_iter8_reg <= trunc_ln15_reg_1185_pp0_iter7_reg;
                trunc_ln15_reg_1185_pp0_iter9_reg <= trunc_ln15_reg_1185_pp0_iter8_reg;
                    zext_ln68_reg_1382(52 downto 1) <= zext_ln68_fu_1030_p1(52 downto 1);
                    zext_ln71_reg_1392(31 downto 0) <= zext_ln71_fu_1072_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
                ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
                ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
                ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
                ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
                ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                dc_reg_1333 <= grp_fu_340_p1;
                gmem_addr_1_read_reg_1253 <= m_axi_gmem_RDATA;
                r_reg_1248 <= r_fu_715_p1;
                tmp_28_reg_1222 <= mul_ln21_fu_659_p2(38 downto 22);
                tmp_28_reg_1222_pp0_iter10_reg <= tmp_28_reg_1222_pp0_iter9_reg;
                tmp_28_reg_1222_pp0_iter11_reg <= tmp_28_reg_1222_pp0_iter10_reg;
                tmp_28_reg_1222_pp0_iter12_reg <= tmp_28_reg_1222_pp0_iter11_reg;
                tmp_28_reg_1222_pp0_iter13_reg <= tmp_28_reg_1222_pp0_iter12_reg;
                tmp_28_reg_1222_pp0_iter14_reg <= tmp_28_reg_1222_pp0_iter13_reg;
                tmp_28_reg_1222_pp0_iter15_reg <= tmp_28_reg_1222_pp0_iter14_reg;
                tmp_28_reg_1222_pp0_iter16_reg <= tmp_28_reg_1222_pp0_iter15_reg;
                tmp_28_reg_1222_pp0_iter17_reg <= tmp_28_reg_1222_pp0_iter16_reg;
                tmp_28_reg_1222_pp0_iter18_reg <= tmp_28_reg_1222_pp0_iter17_reg;
                tmp_28_reg_1222_pp0_iter19_reg <= tmp_28_reg_1222_pp0_iter18_reg;
                tmp_28_reg_1222_pp0_iter1_reg <= tmp_28_reg_1222;
                tmp_28_reg_1222_pp0_iter20_reg <= tmp_28_reg_1222_pp0_iter19_reg;
                tmp_28_reg_1222_pp0_iter21_reg <= tmp_28_reg_1222_pp0_iter20_reg;
                tmp_28_reg_1222_pp0_iter22_reg <= tmp_28_reg_1222_pp0_iter21_reg;
                tmp_28_reg_1222_pp0_iter23_reg <= tmp_28_reg_1222_pp0_iter22_reg;
                tmp_28_reg_1222_pp0_iter24_reg <= tmp_28_reg_1222_pp0_iter23_reg;
                tmp_28_reg_1222_pp0_iter25_reg <= tmp_28_reg_1222_pp0_iter24_reg;
                tmp_28_reg_1222_pp0_iter26_reg <= tmp_28_reg_1222_pp0_iter25_reg;
                tmp_28_reg_1222_pp0_iter27_reg <= tmp_28_reg_1222_pp0_iter26_reg;
                tmp_28_reg_1222_pp0_iter28_reg <= tmp_28_reg_1222_pp0_iter27_reg;
                tmp_28_reg_1222_pp0_iter29_reg <= tmp_28_reg_1222_pp0_iter28_reg;
                tmp_28_reg_1222_pp0_iter2_reg <= tmp_28_reg_1222_pp0_iter1_reg;
                tmp_28_reg_1222_pp0_iter30_reg <= tmp_28_reg_1222_pp0_iter29_reg;
                tmp_28_reg_1222_pp0_iter31_reg <= tmp_28_reg_1222_pp0_iter30_reg;
                tmp_28_reg_1222_pp0_iter32_reg <= tmp_28_reg_1222_pp0_iter31_reg;
                tmp_28_reg_1222_pp0_iter33_reg <= tmp_28_reg_1222_pp0_iter32_reg;
                tmp_28_reg_1222_pp0_iter34_reg <= tmp_28_reg_1222_pp0_iter33_reg;
                tmp_28_reg_1222_pp0_iter35_reg <= tmp_28_reg_1222_pp0_iter34_reg;
                tmp_28_reg_1222_pp0_iter3_reg <= tmp_28_reg_1222_pp0_iter2_reg;
                tmp_28_reg_1222_pp0_iter4_reg <= tmp_28_reg_1222_pp0_iter3_reg;
                tmp_28_reg_1222_pp0_iter5_reg <= tmp_28_reg_1222_pp0_iter4_reg;
                tmp_28_reg_1222_pp0_iter6_reg <= tmp_28_reg_1222_pp0_iter5_reg;
                tmp_28_reg_1222_pp0_iter7_reg <= tmp_28_reg_1222_pp0_iter6_reg;
                tmp_28_reg_1222_pp0_iter8_reg <= tmp_28_reg_1222_pp0_iter7_reg;
                tmp_28_reg_1222_pp0_iter9_reg <= tmp_28_reg_1222_pp0_iter8_reg;
                trunc_ln15_3_reg_1207 <= trunc_ln15_3_fu_633_p1;
                trunc_ln15_3_reg_1207_pp0_iter10_reg <= trunc_ln15_3_reg_1207_pp0_iter9_reg;
                trunc_ln15_3_reg_1207_pp0_iter11_reg <= trunc_ln15_3_reg_1207_pp0_iter10_reg;
                trunc_ln15_3_reg_1207_pp0_iter12_reg <= trunc_ln15_3_reg_1207_pp0_iter11_reg;
                trunc_ln15_3_reg_1207_pp0_iter13_reg <= trunc_ln15_3_reg_1207_pp0_iter12_reg;
                trunc_ln15_3_reg_1207_pp0_iter14_reg <= trunc_ln15_3_reg_1207_pp0_iter13_reg;
                trunc_ln15_3_reg_1207_pp0_iter15_reg <= trunc_ln15_3_reg_1207_pp0_iter14_reg;
                trunc_ln15_3_reg_1207_pp0_iter16_reg <= trunc_ln15_3_reg_1207_pp0_iter15_reg;
                trunc_ln15_3_reg_1207_pp0_iter17_reg <= trunc_ln15_3_reg_1207_pp0_iter16_reg;
                trunc_ln15_3_reg_1207_pp0_iter18_reg <= trunc_ln15_3_reg_1207_pp0_iter17_reg;
                trunc_ln15_3_reg_1207_pp0_iter19_reg <= trunc_ln15_3_reg_1207_pp0_iter18_reg;
                trunc_ln15_3_reg_1207_pp0_iter1_reg <= trunc_ln15_3_reg_1207;
                trunc_ln15_3_reg_1207_pp0_iter20_reg <= trunc_ln15_3_reg_1207_pp0_iter19_reg;
                trunc_ln15_3_reg_1207_pp0_iter21_reg <= trunc_ln15_3_reg_1207_pp0_iter20_reg;
                trunc_ln15_3_reg_1207_pp0_iter22_reg <= trunc_ln15_3_reg_1207_pp0_iter21_reg;
                trunc_ln15_3_reg_1207_pp0_iter23_reg <= trunc_ln15_3_reg_1207_pp0_iter22_reg;
                trunc_ln15_3_reg_1207_pp0_iter24_reg <= trunc_ln15_3_reg_1207_pp0_iter23_reg;
                trunc_ln15_3_reg_1207_pp0_iter2_reg <= trunc_ln15_3_reg_1207_pp0_iter1_reg;
                trunc_ln15_3_reg_1207_pp0_iter3_reg <= trunc_ln15_3_reg_1207_pp0_iter2_reg;
                trunc_ln15_3_reg_1207_pp0_iter4_reg <= trunc_ln15_3_reg_1207_pp0_iter3_reg;
                trunc_ln15_3_reg_1207_pp0_iter5_reg <= trunc_ln15_3_reg_1207_pp0_iter4_reg;
                trunc_ln15_3_reg_1207_pp0_iter6_reg <= trunc_ln15_3_reg_1207_pp0_iter5_reg;
                trunc_ln15_3_reg_1207_pp0_iter7_reg <= trunc_ln15_3_reg_1207_pp0_iter6_reg;
                trunc_ln15_3_reg_1207_pp0_iter8_reg <= trunc_ln15_3_reg_1207_pp0_iter7_reg;
                trunc_ln15_3_reg_1207_pp0_iter9_reg <= trunc_ln15_3_reg_1207_pp0_iter8_reg;
                trunc_ln15_5_reg_1202 <= add_ln15_2_fu_618_p2(63 downto 6);
                trunc_ln15_6_reg_1217 <= trunc_ln15_6_fu_652_p1;
                trunc_ln15_6_reg_1217_pp0_iter10_reg <= trunc_ln15_6_reg_1217_pp0_iter9_reg;
                trunc_ln15_6_reg_1217_pp0_iter11_reg <= trunc_ln15_6_reg_1217_pp0_iter10_reg;
                trunc_ln15_6_reg_1217_pp0_iter12_reg <= trunc_ln15_6_reg_1217_pp0_iter11_reg;
                trunc_ln15_6_reg_1217_pp0_iter13_reg <= trunc_ln15_6_reg_1217_pp0_iter12_reg;
                trunc_ln15_6_reg_1217_pp0_iter14_reg <= trunc_ln15_6_reg_1217_pp0_iter13_reg;
                trunc_ln15_6_reg_1217_pp0_iter15_reg <= trunc_ln15_6_reg_1217_pp0_iter14_reg;
                trunc_ln15_6_reg_1217_pp0_iter16_reg <= trunc_ln15_6_reg_1217_pp0_iter15_reg;
                trunc_ln15_6_reg_1217_pp0_iter17_reg <= trunc_ln15_6_reg_1217_pp0_iter16_reg;
                trunc_ln15_6_reg_1217_pp0_iter18_reg <= trunc_ln15_6_reg_1217_pp0_iter17_reg;
                trunc_ln15_6_reg_1217_pp0_iter19_reg <= trunc_ln15_6_reg_1217_pp0_iter18_reg;
                trunc_ln15_6_reg_1217_pp0_iter1_reg <= trunc_ln15_6_reg_1217;
                trunc_ln15_6_reg_1217_pp0_iter20_reg <= trunc_ln15_6_reg_1217_pp0_iter19_reg;
                trunc_ln15_6_reg_1217_pp0_iter21_reg <= trunc_ln15_6_reg_1217_pp0_iter20_reg;
                trunc_ln15_6_reg_1217_pp0_iter22_reg <= trunc_ln15_6_reg_1217_pp0_iter21_reg;
                trunc_ln15_6_reg_1217_pp0_iter23_reg <= trunc_ln15_6_reg_1217_pp0_iter22_reg;
                trunc_ln15_6_reg_1217_pp0_iter24_reg <= trunc_ln15_6_reg_1217_pp0_iter23_reg;
                trunc_ln15_6_reg_1217_pp0_iter2_reg <= trunc_ln15_6_reg_1217_pp0_iter1_reg;
                trunc_ln15_6_reg_1217_pp0_iter3_reg <= trunc_ln15_6_reg_1217_pp0_iter2_reg;
                trunc_ln15_6_reg_1217_pp0_iter4_reg <= trunc_ln15_6_reg_1217_pp0_iter3_reg;
                trunc_ln15_6_reg_1217_pp0_iter5_reg <= trunc_ln15_6_reg_1217_pp0_iter4_reg;
                trunc_ln15_6_reg_1217_pp0_iter6_reg <= trunc_ln15_6_reg_1217_pp0_iter5_reg;
                trunc_ln15_6_reg_1217_pp0_iter7_reg <= trunc_ln15_6_reg_1217_pp0_iter6_reg;
                trunc_ln15_6_reg_1217_pp0_iter8_reg <= trunc_ln15_6_reg_1217_pp0_iter7_reg;
                trunc_ln15_6_reg_1217_pp0_iter9_reg <= trunc_ln15_6_reg_1217_pp0_iter8_reg;
                trunc_ln15_7_reg_1212 <= add_ln15_3_fu_637_p2(63 downto 6);
                trunc_ln21_reg_1239 <= trunc_ln21_fu_695_p1;
                trunc_ln21_reg_1239_pp0_iter10_reg <= trunc_ln21_reg_1239_pp0_iter9_reg;
                trunc_ln21_reg_1239_pp0_iter11_reg <= trunc_ln21_reg_1239_pp0_iter10_reg;
                trunc_ln21_reg_1239_pp0_iter12_reg <= trunc_ln21_reg_1239_pp0_iter11_reg;
                trunc_ln21_reg_1239_pp0_iter13_reg <= trunc_ln21_reg_1239_pp0_iter12_reg;
                trunc_ln21_reg_1239_pp0_iter14_reg <= trunc_ln21_reg_1239_pp0_iter13_reg;
                trunc_ln21_reg_1239_pp0_iter15_reg <= trunc_ln21_reg_1239_pp0_iter14_reg;
                trunc_ln21_reg_1239_pp0_iter16_reg <= trunc_ln21_reg_1239_pp0_iter15_reg;
                trunc_ln21_reg_1239_pp0_iter17_reg <= trunc_ln21_reg_1239_pp0_iter16_reg;
                trunc_ln21_reg_1239_pp0_iter18_reg <= trunc_ln21_reg_1239_pp0_iter17_reg;
                trunc_ln21_reg_1239_pp0_iter19_reg <= trunc_ln21_reg_1239_pp0_iter18_reg;
                trunc_ln21_reg_1239_pp0_iter20_reg <= trunc_ln21_reg_1239_pp0_iter19_reg;
                trunc_ln21_reg_1239_pp0_iter21_reg <= trunc_ln21_reg_1239_pp0_iter20_reg;
                trunc_ln21_reg_1239_pp0_iter22_reg <= trunc_ln21_reg_1239_pp0_iter21_reg;
                trunc_ln21_reg_1239_pp0_iter23_reg <= trunc_ln21_reg_1239_pp0_iter22_reg;
                trunc_ln21_reg_1239_pp0_iter24_reg <= trunc_ln21_reg_1239_pp0_iter23_reg;
                trunc_ln21_reg_1239_pp0_iter25_reg <= trunc_ln21_reg_1239_pp0_iter24_reg;
                trunc_ln21_reg_1239_pp0_iter26_reg <= trunc_ln21_reg_1239_pp0_iter25_reg;
                trunc_ln21_reg_1239_pp0_iter27_reg <= trunc_ln21_reg_1239_pp0_iter26_reg;
                trunc_ln21_reg_1239_pp0_iter28_reg <= trunc_ln21_reg_1239_pp0_iter27_reg;
                trunc_ln21_reg_1239_pp0_iter29_reg <= trunc_ln21_reg_1239_pp0_iter28_reg;
                trunc_ln21_reg_1239_pp0_iter30_reg <= trunc_ln21_reg_1239_pp0_iter29_reg;
                trunc_ln21_reg_1239_pp0_iter31_reg <= trunc_ln21_reg_1239_pp0_iter30_reg;
                trunc_ln21_reg_1239_pp0_iter32_reg <= trunc_ln21_reg_1239_pp0_iter31_reg;
                trunc_ln21_reg_1239_pp0_iter33_reg <= trunc_ln21_reg_1239_pp0_iter32_reg;
                trunc_ln21_reg_1239_pp0_iter34_reg <= trunc_ln21_reg_1239_pp0_iter33_reg;
                trunc_ln21_reg_1239_pp0_iter35_reg <= trunc_ln21_reg_1239_pp0_iter34_reg;
                trunc_ln21_reg_1239_pp0_iter8_reg <= trunc_ln21_reg_1239;
                trunc_ln21_reg_1239_pp0_iter9_reg <= trunc_ln21_reg_1239_pp0_iter8_reg;
                trunc_ln479_reg_1366 <= trunc_ln479_fu_812_p1;
                xs_exp_reg_1347 <= data_1_fu_771_p1(62 downto 52);
                xs_sig_reg_1355 <= xs_sig_fu_793_p1;
                xs_sign_reg_1338 <= data_1_fu_771_p1(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                conv19_i_reg_1288 <= grp_fu_354_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                conv22_i_reg_1293 <= grp_fu_354_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then
                conv26_i_reg_1298 <= grp_fu_354_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                g_reg_1258 <= g_fu_735_p1;
                gmem_addr_2_read_reg_1263 <= m_axi_gmem_RDATA;
                gray_reg_1328 <= grp_fu_337_p1;
                trunc_ln505_reg_1377 <= trunc_ln505_fu_1017_p1;
                xs_exp_4_reg_1371 <= data_fu_1003_p1(62 downto 52);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then
                mul20_i_reg_1303 <= grp_fu_347_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_1))) then
                mul23_i_reg_1308 <= grp_fu_347_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter29 = ap_const_logic_1))) then
                mul27_i_reg_1313 <= grp_fu_347_p2;
            end if;
        end if;
    end process;
    zext_ln68_reg_1382(0) <= '0';
    zext_ln68_reg_1382(112 downto 53) <= "000000000000000000000000000000000000000000000000000000000001";
    zext_ln71_reg_1392(112 downto 32) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to36, ap_block_pp0_stage1_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to36 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln10_1_fu_423_p2 <= std_logic_vector(unsigned(i_fu_196) + unsigned(ap_const_lv9_1));
    add_ln10_fu_386_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_200) + unsigned(ap_const_lv19_1));
    add_ln13_fu_560_p2 <= std_logic_vector(unsigned(select_ln10_1_fu_415_p3) + unsigned(ap_const_lv10_1));
    add_ln15_1_fu_522_p2 <= std_logic_vector(unsigned(add_ln15_fu_517_p2) + unsigned(p_cast39_fu_463_p1));
    add_ln15_2_fu_618_p2 <= std_logic_vector(unsigned(add_ln15_reg_1174) + unsigned(p_cast40_fu_593_p1));
    add_ln15_3_fu_637_p2 <= std_logic_vector(unsigned(add_ln15_reg_1174) + unsigned(p_cast41_fu_604_p1));
    add_ln15_fu_517_p2 <= std_logic_vector(unsigned(zext_ln13_fu_509_p1) + unsigned(image_rgb));
    add_ln18_fu_542_p2 <= std_logic_vector(unsigned(select_ln10_fu_407_p3) + unsigned(ap_const_lv11_3));
    add_ln21_fu_548_p2 <= std_logic_vector(unsigned(zext_ln13_1_fu_513_p1) + unsigned(empty_35_fu_503_p2));
    add_ln36_fu_848_p2 <= std_logic_vector(unsigned(zext_ln28_fu_837_p1) + unsigned(t_fu_841_p3));
    add_ln486_fu_1037_p2 <= std_logic_vector(unsigned(zext_ln486_fu_1034_p1) + unsigned(ap_const_lv12_C01));
    and_ln19_1_fu_964_p2 <= (icmp_ln18_fu_816_p2 and and_ln19_fu_959_p2);
    and_ln19_fu_959_p2 <= (xs_sign_reg_1338 and or_ln19_fu_953_p2);
    and_ln24_fu_925_p2 <= (xor_ln18_fu_919_p2 and icmp_ln24_fu_821_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter25, ap_block_state4_io, ap_block_state76_pp0_stage0_iter25)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state76_pp0_stage0_iter25)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter25, ap_block_state4_io, ap_block_state76_pp0_stage0_iter25)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state76_pp0_stage0_iter25)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter24, m_axi_gmem_ARREADY, ap_block_state74_pp0_stage1_iter24)
    begin
                ap_block_pp0_stage1_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (m_axi_gmem_ARREADY = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state74_pp0_stage1_iter24)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter24, m_axi_gmem_ARREADY, ap_block_state74_pp0_stage1_iter24)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (m_axi_gmem_ARREADY = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state74_pp0_stage1_iter24)));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter24, ap_block_state3_io, ap_block_state75_pp0_stage2_iter24)
    begin
                ap_block_pp0_stage2_11001 <= (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state75_pp0_stage2_iter24)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter24, ap_block_state3_io, ap_block_state75_pp0_stage2_iter24)
    begin
                ap_block_pp0_stage2_subdone <= (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state75_pp0_stage2_iter24)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)));
    end process;


    ap_block_state3_io_assign_proc : process(m_axi_gmem_ARREADY, icmp_ln10_reg_1160)
    begin
                ap_block_state3_io <= ((icmp_ln10_reg_1160 = ap_const_lv1_0) and (m_axi_gmem_ARREADY = ap_const_logic_0));
    end process;


    ap_block_state4_io_assign_proc : process(m_axi_gmem_ARREADY, icmp_ln10_reg_1160)
    begin
                ap_block_state4_io <= ((icmp_ln10_reg_1160 = ap_const_lv1_0) and (m_axi_gmem_ARREADY = ap_const_logic_0));
    end process;


    ap_block_state74_pp0_stage1_iter24_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state74_pp0_stage1_iter24 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state75_pp0_stage2_iter24_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state75_pp0_stage2_iter24 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state76_pp0_stage0_iter25_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state76_pp0_stage0_iter25 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, icmp_ln10_reg_1160, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln10_reg_1160 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter35_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_loop_exit_ready_pp0_iter35_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = 
    ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to36_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = 
    ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0_1to36 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to36 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    b_fu_759_p1 <= lshr_ln15_2_fu_754_p2(8 - 1 downto 0);
    data_1_fu_771_p1 <= grp_fu_340_p1;
    data_fu_1003_p1 <= dc_1_fu_980_p11;
    dc_1_fu_980_p10 <= ((and_ln24_fu_925_p2 & xor_ln24_fu_937_p2) & and_ln19_1_fu_964_p2);
    dc_1_fu_980_p4 <= t_4_fu_905_p4;
    dc_1_fu_980_p8 <= t_3_fu_826_p3;
    dc_1_fu_980_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    empty_35_fu_503_p2 <= std_logic_vector(unsigned(p_shl_fu_495_p1) + unsigned(p_shl16_fu_499_p1));
    empty_fu_457_p2 <= std_logic_vector(unsigned(p_shl1_fu_437_p3) - unsigned(p_shl18_fu_453_p1));
    g_fu_735_p1 <= lshr_ln15_1_fu_730_p2(8 - 1 downto 0);

    gmem_blk_n_AR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, m_axi_gmem_ARREADY, icmp_ln10_reg_1160, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln10_reg_1160 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln10_reg_1160 = ap_const_lv1_0)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_CS_fsm_pp0_stage2, m_axi_gmem_RVALID, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if ((((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_337_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_337_ce <= ap_const_logic_1;
        else 
            grp_fu_337_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_340_ce_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_340_ce <= ap_const_logic_1;
        else 
            grp_fu_340_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_343_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_343_ce <= ap_const_logic_1;
        else 
            grp_fu_343_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_343_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter32, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, mul20_i_reg_1303, add24_i_reg_1318)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1))) then 
            grp_fu_343_p0 <= add24_i_reg_1318;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter29 = ap_const_logic_1))) then 
            grp_fu_343_p0 <= mul20_i_reg_1303;
        else 
            grp_fu_343_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_343_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter32, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, mul23_i_reg_1308, mul27_i_reg_1313_pp0_iter31_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1))) then 
            grp_fu_343_p1 <= mul27_i_reg_1313_pp0_iter31_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter29 = ap_const_logic_1))) then 
            grp_fu_343_p1 <= mul23_i_reg_1308;
        else 
            grp_fu_343_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_347_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_347_ce <= ap_const_logic_1;
        else 
            grp_fu_347_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_347_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, conv19_i_reg_1288, conv22_i_reg_1293, conv26_i_reg_1298)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            grp_fu_347_p0 <= conv26_i_reg_1298;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            grp_fu_347_p0 <= conv22_i_reg_1293;
        elsif (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_347_p0 <= conv19_i_reg_1288;
        else 
            grp_fu_347_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_347_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            grp_fu_347_p1 <= ap_const_lv64_3FBD2F1A9FBE76C9;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            grp_fu_347_p1 <= ap_const_lv64_3FE2C8B439581062;
        elsif (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_347_p1 <= ap_const_lv64_3FD322D0E5604189;
        else 
            grp_fu_347_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_354_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_354_ce <= ap_const_logic_1;
        else 
            grp_fu_354_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_354_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter25, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, zext_ln20_fu_739_p1, zext_ln20_1_fu_763_p1, zext_ln20_2_fu_767_p1)
    begin
        if ((ap_enable_reg_pp0_iter25 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_354_p0 <= zext_ln20_2_fu_767_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_354_p0 <= zext_ln20_1_fu_763_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_354_p0 <= zext_ln20_fu_739_p1;
            else 
                grp_fu_354_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_354_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_554_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_554_ce <= ap_const_logic_1;
        else 
            grp_fu_554_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_554_p0 <= std_logic_vector(unsigned(zext_ln13_1_fu_513_p1) + unsigned(empty_35_fu_503_p2));
    grp_fu_554_p1 <= ap_const_lv19_6(4 - 1 downto 0);
    icmp_ln10_fu_380_p2 <= "1" when (indvar_flatten_fu_200 = ap_const_lv19_4B000) else "0";
    icmp_ln13_fu_401_p2 <= "1" when (j_fu_188 = ap_const_lv10_280) else "0";
    icmp_ln18_fu_816_p2 <= "1" when (unsigned(xs_exp_reg_1347) < unsigned(ap_const_lv11_3FF)) else "0";
    icmp_ln19_1_fu_948_p2 <= "0" when (xs_exp_reg_1347 = ap_const_lv11_0) else "1";
    icmp_ln19_fu_943_p2 <= "0" when (xs_sig_reg_1355 = ap_const_lv52_0) else "1";
    icmp_ln24_fu_821_p2 <= "1" when (unsigned(xs_exp_reg_1347) > unsigned(ap_const_lv11_433)) else "0";
    image_gray_1_address0 <= zext_ln21_fu_1118_p1(16 - 1 downto 0);
    image_gray_1_ce0 <= image_gray_1_ce0_local;

    image_gray_1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter36, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1))) then 
            image_gray_1_ce0_local <= ap_const_logic_1;
        else 
            image_gray_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    image_gray_1_d0 <= val_fu_1106_p3;
    image_gray_1_we0 <= image_gray_1_we0_local;

    image_gray_1_we0_local_assign_proc : process(ap_enable_reg_pp0_iter36, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, trunc_ln21_reg_1239_pp0_iter35_reg)
    begin
        if (((trunc_ln21_reg_1239_pp0_iter35_reg = ap_const_lv3_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1))) then 
            image_gray_1_we0_local <= ap_const_logic_1;
        else 
            image_gray_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    image_gray_2_address0 <= zext_ln21_fu_1118_p1(16 - 1 downto 0);
    image_gray_2_ce0 <= image_gray_2_ce0_local;

    image_gray_2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter36, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1))) then 
            image_gray_2_ce0_local <= ap_const_logic_1;
        else 
            image_gray_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    image_gray_2_d0 <= val_fu_1106_p3;
    image_gray_2_we0 <= image_gray_2_we0_local;

    image_gray_2_we0_local_assign_proc : process(ap_enable_reg_pp0_iter36, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, trunc_ln21_reg_1239_pp0_iter35_reg)
    begin
        if (((trunc_ln21_reg_1239_pp0_iter35_reg = ap_const_lv3_2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1))) then 
            image_gray_2_we0_local <= ap_const_logic_1;
        else 
            image_gray_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    image_gray_3_address0 <= zext_ln21_fu_1118_p1(16 - 1 downto 0);
    image_gray_3_ce0 <= image_gray_3_ce0_local;

    image_gray_3_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter36, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1))) then 
            image_gray_3_ce0_local <= ap_const_logic_1;
        else 
            image_gray_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    image_gray_3_d0 <= val_fu_1106_p3;
    image_gray_3_we0 <= image_gray_3_we0_local;

    image_gray_3_we0_local_assign_proc : process(ap_enable_reg_pp0_iter36, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, trunc_ln21_reg_1239_pp0_iter35_reg)
    begin
        if (((trunc_ln21_reg_1239_pp0_iter35_reg = ap_const_lv3_3) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1))) then 
            image_gray_3_we0_local <= ap_const_logic_1;
        else 
            image_gray_3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    image_gray_4_address0 <= zext_ln21_fu_1118_p1(16 - 1 downto 0);
    image_gray_4_ce0 <= image_gray_4_ce0_local;

    image_gray_4_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter36, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1))) then 
            image_gray_4_ce0_local <= ap_const_logic_1;
        else 
            image_gray_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    image_gray_4_d0 <= val_fu_1106_p3;
    image_gray_4_we0 <= image_gray_4_we0_local;

    image_gray_4_we0_local_assign_proc : process(ap_enable_reg_pp0_iter36, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, trunc_ln21_reg_1239_pp0_iter35_reg)
    begin
        if (((trunc_ln21_reg_1239_pp0_iter35_reg = ap_const_lv3_4) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1))) then 
            image_gray_4_we0_local <= ap_const_logic_1;
        else 
            image_gray_4_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    image_gray_5_address0 <= zext_ln21_fu_1118_p1(16 - 1 downto 0);
    image_gray_5_ce0 <= image_gray_5_ce0_local;

    image_gray_5_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter36, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1))) then 
            image_gray_5_ce0_local <= ap_const_logic_1;
        else 
            image_gray_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    image_gray_5_d0 <= val_fu_1106_p3;
    image_gray_5_we0 <= image_gray_5_we0_local;

    image_gray_5_we0_local_assign_proc : process(ap_enable_reg_pp0_iter36, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, trunc_ln21_reg_1239_pp0_iter35_reg)
    begin
        if ((not((trunc_ln21_reg_1239_pp0_iter35_reg = ap_const_lv3_0)) and not((trunc_ln21_reg_1239_pp0_iter35_reg = ap_const_lv3_1)) and not((trunc_ln21_reg_1239_pp0_iter35_reg = ap_const_lv3_2)) and not((trunc_ln21_reg_1239_pp0_iter35_reg = ap_const_lv3_3)) and not((trunc_ln21_reg_1239_pp0_iter35_reg = ap_const_lv3_4)) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1))) then 
            image_gray_5_we0_local <= ap_const_logic_1;
        else 
            image_gray_5_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    image_gray_address0 <= zext_ln21_fu_1118_p1(16 - 1 downto 0);
    image_gray_ce0 <= image_gray_ce0_local;

    image_gray_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter36, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1))) then 
            image_gray_ce0_local <= ap_const_logic_1;
        else 
            image_gray_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    image_gray_d0 <= val_fu_1106_p3;
    image_gray_we0 <= image_gray_we0_local;

    image_gray_we0_local_assign_proc : process(ap_enable_reg_pp0_iter36, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, trunc_ln21_reg_1239_pp0_iter35_reg)
    begin
        if (((trunc_ln21_reg_1239_pp0_iter35_reg = ap_const_lv3_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1))) then 
            image_gray_we0_local <= ap_const_logic_1;
        else 
            image_gray_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    index_fu_797_p4 <= data_1_fu_771_p1(57 downto 52);
    lshr_ln15_1_fu_730_p2 <= std_logic_vector(shift_right(unsigned(gmem_addr_1_read_reg_1253),to_integer(unsigned('0' & zext_ln15_1_fu_726_p1(31-1 downto 0)))));
    lshr_ln15_2_fu_754_p2 <= std_logic_vector(shift_right(unsigned(gmem_addr_2_read_reg_1263),to_integer(unsigned('0' & zext_ln15_2_fu_750_p1(31-1 downto 0)))));
    lshr_ln15_fu_710_p2 <= std_logic_vector(shift_right(unsigned(gmem_addr_read_reg_1243),to_integer(unsigned('0' & zext_ln15_fu_706_p1(31-1 downto 0)))));
    lshr_ln71_fu_1076_p2 <= std_logic_vector(shift_right(unsigned(zext_ln68_fu_1030_p1),to_integer(unsigned('0' & zext_ln71_fu_1072_p1(31-1 downto 0)))));

    m_axi_gmem_ARADDR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, icmp_ln10_reg_1160, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, sext_ln15_fu_608_p1, sext_ln15_1_fu_675_p1, sext_ln15_2_fu_685_p1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            m_axi_gmem_ARADDR <= sext_ln15_2_fu_685_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln10_reg_1160 = ap_const_lv1_0))) then 
            m_axi_gmem_ARADDR <= sext_ln15_1_fu_675_p1;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln10_reg_1160 = ap_const_lv1_0))) then 
            m_axi_gmem_ARADDR <= sext_ln15_fu_608_p1;
        else 
            m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv64_1(32 - 1 downto 0);
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, icmp_ln10_reg_1160, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln10_reg_1160 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln10_reg_1160 = ap_const_lv1_0)))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;

    m_axi_gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= ap_const_lv512_lc_1;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv64_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
    mantissa_fu_1021_p4 <= ((ap_const_lv1_1 & trunc_ln505_reg_1377) & ap_const_lv1_0);
    mask_table_address0 <= zext_ln32_fu_807_p1(6 - 1 downto 0);

    mask_table_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter35, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter35 = ap_const_logic_1))) then 
            mask_table_ce0_local <= ap_const_logic_1;
        else 
            mask_table_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln21_fu_659_p0 <= mul_ln21_fu_659_p00(19 - 1 downto 0);
    mul_ln21_fu_659_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_reg_1190),39));
    mul_ln21_fu_659_p1 <= ap_const_lv39_AAAAB(21 - 1 downto 0);
    or_ln19_fu_953_p2 <= (icmp_ln19_fu_943_p2 or icmp_ln19_1_fu_948_p2);
    or_ln24_fu_931_p2 <= (icmp_ln24_fu_821_p2 or icmp_ln18_fu_816_p2);
    p_cast39_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_457_p2),64));
    p_cast40_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_586_p3),64));
    p_cast41_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_597_p3),64));
    p_shl16_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_445_p3),19));
    p_shl18_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_445_p3),20));
    p_shl1_fu_437_p3 <= (select_ln10_2_fu_429_p3 & ap_const_lv11_0);
    p_shl_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_487_p3),19));
    r_fu_715_p1 <= lshr_ln15_fu_710_p2(8 - 1 downto 0);
    select_ln10_1_fu_415_p3 <= 
        ap_const_lv10_0 when (icmp_ln13_fu_401_p2(0) = '1') else 
        j_fu_188;
    select_ln10_2_fu_429_p3 <= 
        add_ln10_1_fu_423_p2 when (icmp_ln13_fu_401_p2(0) = '1') else 
        i_fu_196;
    select_ln10_fu_407_p3 <= 
        ap_const_lv11_0 when (icmp_ln13_fu_401_p2(0) = '1') else 
        jj_fu_192;
    select_ln71_fu_1060_p3 <= 
        sext_ln71_fu_1056_p1 when (tmp_27_fu_1043_p3(0) = '1') else 
        add_ln486_fu_1037_p2;
        sext_ln15_1_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln15_5_reg_1202),64));

        sext_ln15_2_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln15_7_reg_1212),64));

        sext_ln15_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln15_1_reg_1180),64));

        sext_ln71_1_fu_1068_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln71_fu_1060_p3),32));

        sext_ln71_fu_1056_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln71_fu_1051_p2),12));

    shl_ln15_1_fu_719_p3 <= (trunc_ln15_3_reg_1207_pp0_iter24_reg & ap_const_lv3_0);
    shl_ln15_2_fu_743_p3 <= (trunc_ln15_6_reg_1217_pp0_iter24_reg & ap_const_lv3_0);
    shl_ln71_fu_1092_p2 <= std_logic_vector(shift_left(unsigned(zext_ln68_reg_1382),to_integer(unsigned('0' & zext_ln71_reg_1392(31-1 downto 0)))));
    shl_ln_fu_699_p3 <= (trunc_ln15_reg_1185_pp0_iter24_reg & ap_const_lv3_0);
    sub_ln71_fu_1051_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(xs_exp_4_reg_1371));
    t_3_fu_826_p3 <= (xs_sign_reg_1338 & ap_const_lv63_0);
    t_4_fu_905_p4 <= ((xs_sign_2_fu_876_p2 & xs_exp_2_fu_881_p3) & xs_sig_3_fu_899_p2);
    t_fu_841_p3 <= (ap_const_lv1_1 & trunc_ln479_reg_1366);
    tmp_1_fu_586_p3 <= (tmp_s_reg_1164 & ap_const_lv1_1);
    tmp_24_fu_487_p3 <= (select_ln10_2_fu_429_p3 & ap_const_lv9_0);
    tmp_27_fu_1043_p3 <= add_ln486_fu_1037_p2(11 downto 11);
    tmp_3_fu_597_p3 <= (tmp_2_reg_1169 & ap_const_lv2_2);
    tmp_5_fu_1096_p4 <= shl_ln71_fu_1092_p2(60 downto 53);
    tmp_fu_445_p3 <= (select_ln10_2_fu_429_p3 & ap_const_lv7_0);
    trunc_ln15_3_fu_633_p1 <= add_ln15_2_fu_618_p2(6 - 1 downto 0);
    trunc_ln15_6_fu_652_p1 <= add_ln15_3_fu_637_p2(6 - 1 downto 0);
    trunc_ln15_fu_538_p1 <= add_ln15_1_fu_522_p2(6 - 1 downto 0);
    trunc_ln21_fu_695_p1 <= grp_fu_554_p2(3 - 1 downto 0);
    trunc_ln479_fu_812_p1 <= data_1_fu_771_p1(63 - 1 downto 0);
    trunc_ln505_fu_1017_p1 <= data_fu_1003_p1(52 - 1 downto 0);
    val_fu_1106_p3 <= 
        tmp_4_reg_1397 when (tmp_27_reg_1387(0) = '1') else 
        tmp_5_fu_1096_p4;
    xor_ln18_fu_919_p2 <= (icmp_ln18_fu_816_p2 xor ap_const_lv1_1);
    xor_ln24_fu_937_p2 <= (or_ln24_fu_931_p2 xor ap_const_lv1_1);
    xor_ln39_fu_893_p2 <= (mask_table_q0 xor ap_const_lv52_FFFFFFFFFFFFF);
    xs_exp_1_fu_862_p4 <= add_ln36_fu_848_p2(62 downto 52);
    xs_exp_2_fu_881_p3 <= 
        xs_exp_1_fu_862_p4 when (xs_sign_reg_1338(0) = '1') else 
        xs_exp_reg_1347;
    xs_sig_1_fu_872_p1 <= add_ln36_fu_848_p2(52 - 1 downto 0);
    xs_sig_2_fu_887_p3 <= 
        xs_sig_1_fu_872_p1 when (xs_sign_reg_1338(0) = '1') else 
        xs_sig_reg_1355;
    xs_sig_3_fu_899_p2 <= (xs_sig_2_fu_887_p3 and xor_ln39_fu_893_p2);
    xs_sig_fu_793_p1 <= data_1_fu_771_p1(52 - 1 downto 0);
    xs_sign_1_fu_854_p3 <= add_ln36_fu_848_p2(63 downto 63);
    xs_sign_2_fu_876_p2 <= (xs_sign_reg_1338 and xs_sign_1_fu_854_p3);
    zext_ln13_1_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln10_1_fu_415_p3),19));
    zext_ln13_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln10_fu_407_p3),64));
    zext_ln15_1_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln15_1_fu_719_p3),512));
    zext_ln15_2_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln15_2_fu_743_p3),512));
    zext_ln15_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_699_p3),512));
    zext_ln20_1_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(g_reg_1258),32));
    zext_ln20_2_fu_767_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_reg_1273),32));
    zext_ln20_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_reg_1248),32));
    zext_ln21_fu_1118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_reg_1222_pp0_iter35_reg),64));
    zext_ln28_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mask_table_q0),64));
    zext_ln32_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_fu_797_p4),64));
    zext_ln486_fu_1034_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_4_reg_1371),12));
    zext_ln68_fu_1030_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_1021_p4),113));
    zext_ln71_fu_1072_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln71_1_fu_1068_p1),113));
end behav;
