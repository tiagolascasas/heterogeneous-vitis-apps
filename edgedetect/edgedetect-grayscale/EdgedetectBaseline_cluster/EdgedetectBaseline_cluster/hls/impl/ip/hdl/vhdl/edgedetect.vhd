-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity edgedetect is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of edgedetect is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "edgedetect_edgedetect,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=6.667000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.866910,HLS_SYN_LAT=921776,HLS_SYN_TPT=none,HLS_SYN_MEM=60,HLS_SYN_DSP=0,HLS_SYN_FF=7454,HLS_SYN_LUT=13520,HLS_VERSION=2024_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant C_M_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_12C0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000001001011000000";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv504_lc_1 : STD_LOGIC_VECTOR (503 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv64_3FD322D0E5604189 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111010011001000101101000011100101011000000100000110001001";
    constant ap_const_lv64_3FE2C8B439581062 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100010110010001011010000111001010110000001000001100010";
    constant ap_const_lv64_3FBD2F1A9FBE76C9 : STD_LOGIC_VECTOR (63 downto 0) := "0011111110111101001011110001101010011111101111100111011011001001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv11_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000011";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv19_4AFFF : STD_LOGIC_VECTOR (18 downto 0) := "1001010111111111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_433 : STD_LOGIC_VECTOR (10 downto 0) := "10000110011";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv52_FFFFFFFFFFFFF : STD_LOGIC_VECTOR (51 downto 0) := "1111111111111111111111111111111111111111111111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_BFF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1F7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110111";

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter46 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter47 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter48 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter49 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter50 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter51 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter52 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter53 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter54 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter55 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter56 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter57 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter58 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter59 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal ap_block_state75_pp0_stage2_iter24 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal icmp_ln10_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage2_pp0_iter1_reg : STD_LOGIC;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state73_pp0_stage0_iter24 : BOOLEAN;
    signal first_iter_0_reg_307 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_307_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state109_io : BOOLEAN;
    signal icmp_ln10_reg_1268 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter58_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state178_pp0_stage0_iter59 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter59_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to58 : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage2_pp0_iter2_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage2_pp0_iter3_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage2_pp0_iter4_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage2_pp0_iter5_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage2_pp0_iter6_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage2_pp0_iter7_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage2_pp0_iter8_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage2_pp0_iter9_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage2_pp0_iter10_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage2_pp0_iter11_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage2_pp0_iter12_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage2_pp0_iter13_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage2_pp0_iter14_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage2_pp0_iter15_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage2_pp0_iter16_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage2_pp0_iter17_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage2_pp0_iter18_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage2_pp0_iter19_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage2_pp0_iter20_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage2_pp0_iter21_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage2_pp0_iter22_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage2_pp0_iter23_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage2_pp0_iter24_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage2_pp0_iter25_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage2_pp0_iter26_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage2_pp0_iter27_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage2_pp0_iter28_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage2_pp0_iter29_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage2_pp0_iter30_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage2_pp0_iter31_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage2_pp0_iter32_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage2_pp0_iter33_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage2_pp0_iter34_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage2_pp0_iter35_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage2_pp0_iter36_reg : STD_LOGIC;
    signal ap_loop_exit_ready_delayed : STD_LOGIC;
    signal input_image : STD_LOGIC_VECTOR (63 downto 0);
    signal output_image : STD_LOGIC_VECTOR (63 downto 0);
    signal mask_table_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mask_table_q0 : STD_LOGIC_VECTOR (51 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln21_reg_1258 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1258_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_B : STD_LOGIC;
    signal gmem_blk_n_AR : STD_LOGIC;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal first_iter_0_reg_307_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal first_iter_0_reg_307_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_307_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_307_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_307_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_307_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_307_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_307_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_307_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_307_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_307_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_307_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_307_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_307_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_307_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_307_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_307_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_307_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_307_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_307_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_307_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_307_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_307_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_307_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_307_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_307_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_307_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_307_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_307_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_307_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_307_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_307_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_307_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_307_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_320 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_320_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_320_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_320_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_320_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_320_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_320_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_320_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_320_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_320_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_320_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_320_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_320_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_320_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_320_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_320_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_320_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_320_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_320_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_320_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_320_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_320_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_320_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_320_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_320_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_320_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_320_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_320_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_320_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_320_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_320_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_320_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_320_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_320_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_320_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_320_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal output_image_read_reg_1195 : STD_LOGIC_VECTOR (63 downto 0);
    signal output_image_read_reg_1195_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_image_read_reg_1195_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_image_read_reg_1195_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_image_read_reg_1195_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_image_read_reg_1195_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_image_read_reg_1195_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_image_read_reg_1195_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_image_read_reg_1195_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_image_read_reg_1195_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_image_read_reg_1195_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_image_read_reg_1195_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_image_read_reg_1195_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_image_read_reg_1195_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_image_read_reg_1195_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_image_read_reg_1195_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_image_read_reg_1195_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_image_read_reg_1195_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_image_read_reg_1195_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_image_read_reg_1195_pp0_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_image_read_reg_1195_pp0_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_image_read_reg_1195_pp0_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_image_read_reg_1195_pp0_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_image_read_reg_1195_pp0_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_image_read_reg_1195_pp0_iter24_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_image_read_reg_1195_pp0_iter25_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_image_read_reg_1195_pp0_iter26_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_image_read_reg_1195_pp0_iter27_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_image_read_reg_1195_pp0_iter28_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_image_read_reg_1195_pp0_iter29_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_image_read_reg_1195_pp0_iter30_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_image_read_reg_1195_pp0_iter31_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_image_read_reg_1195_pp0_iter32_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_image_read_reg_1195_pp0_iter33_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_image_read_reg_1195_pp0_iter34_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_image_read_reg_1195_pp0_iter35_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_1200 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_3_reg_1205 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln15_fu_460_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln15_reg_1210 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln15_1_reg_1216 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln15_fu_482_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1221 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1221_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1221_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1221_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1221_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1221_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1221_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1221_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1221_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1221_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1221_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1221_pp0_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1221_pp0_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1221_pp0_iter13_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1221_pp0_iter14_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1221_pp0_iter15_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1221_pp0_iter16_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1221_pp0_iter17_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1221_pp0_iter18_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1221_pp0_iter19_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1221_pp0_iter20_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1221_pp0_iter21_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1221_pp0_iter22_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1221_pp0_iter23_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_1221_pp0_iter24_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state74_pp0_stage1_iter24 : BOOLEAN;
    signal ap_block_state110_io : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal trunc_ln15_5_reg_1232 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln15_3_fu_560_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1237 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1237_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1237_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1237_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1237_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1237_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1237_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1237_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1237_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1237_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1237_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1237_pp0_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1237_pp0_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1237_pp0_iter13_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1237_pp0_iter14_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1237_pp0_iter15_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1237_pp0_iter16_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1237_pp0_iter17_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1237_pp0_iter18_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1237_pp0_iter19_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1237_pp0_iter20_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1237_pp0_iter21_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1237_pp0_iter22_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1237_pp0_iter23_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_3_reg_1237_pp0_iter24_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_7_reg_1242 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln15_6_fu_579_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1247 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1247_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1247_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1247_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1247_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1247_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1247_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1247_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1247_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1247_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1247_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1247_pp0_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1247_pp0_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1247_pp0_iter13_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1247_pp0_iter14_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1247_pp0_iter15_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1247_pp0_iter16_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1247_pp0_iter17_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1247_pp0_iter18_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1247_pp0_iter19_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1247_pp0_iter20_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1247_pp0_iter21_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1247_pp0_iter22_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1247_pp0_iter23_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_6_reg_1247_pp0_iter24_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln21_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1258_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1258_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1258_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1258_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1258_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1258_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1258_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1258_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1258_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1258_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1258_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1258_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1258_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1258_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1258_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1258_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1258_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1258_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1258_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1258_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1258_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1258_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1258_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1258_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1258_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1258_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1258_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1258_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1258_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1258_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1258_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1258_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1258_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1258_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_1263 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter45_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter46_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter47_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter48_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter49_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter50_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter51_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter52_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter53_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter54_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter55_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter56_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1268_pp0_iter57_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_1_read_reg_1278 : STD_LOGIC_VECTOR (511 downto 0);
    signal r_fu_680_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_reg_1283 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_addr_2_read_reg_1288 : STD_LOGIC_VECTOR (511 downto 0);
    signal g_fu_700_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal g_reg_1293 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_addr_3_read_reg_1298 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln20_fu_704_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_fu_724_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_reg_1308 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln20_1_fu_728_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln20_2_fu_732_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_reg_1323 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv1_reg_1328 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv2_reg_1333 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_341_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_reg_1338 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul1_reg_1343 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul2_reg_1348 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul2_reg_1348_pp0_iter30_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul2_reg_1348_pp0_iter31_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_337_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_reg_1353 : STD_LOGIC_VECTOR (63 downto 0);
    signal add1_reg_1358 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_331_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal gray_reg_1363 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_334_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_reg_1368 : STD_LOGIC_VECTOR (63 downto 0);
    signal xs_sign_reg_1373 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_exp_reg_1382 : STD_LOGIC_VECTOR (10 downto 0);
    signal xs_sig_fu_758_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal xs_sig_reg_1390 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln479_fu_777_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln479_reg_1401 : STD_LOGIC_VECTOR (62 downto 0);
    signal dc_1_fu_945_p11 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_1_reg_1406 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln_fu_1114_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln_reg_1417 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_loop_init : STD_LOGIC;
    signal ap_phi_mux_icmp_ln137_phi_fu_323_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln32_fu_772_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln15_fu_535_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln15_1_fu_601_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln15_2_fu_654_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln10_fu_977_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal indvar_flatten2_fu_206 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    signal add_ln10_1_fu_617_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal i3_fu_210 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal i_fu_398_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_i3_load : STD_LOGIC_VECTOR (8 downto 0);
    signal jj4_fu_214 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal jj_fu_486_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_jj4_load : STD_LOGIC_VECTOR (10 downto 0);
    signal j5_fu_218 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal j_fu_626_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal phi_ln216_fu_222 : STD_LOGIC_VECTOR (503 downto
    signal select_ln21_fu_1140_p3 : STD_LOGIC_VECTOR (503 downto 0);
    signal add_ln108_fu_226 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal add_ln10_fu_492_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_add_ln108_load : STD_LOGIC_VECTOR (8 downto 0);
    signal mask_table_ce0_local : STD_LOGIC;
    signal grp_fu_337_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_337_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_341_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_348_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_414_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl_fu_406_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_shl29_fu_422_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal empty_22_fu_426_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal select_ln10_fu_390_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln13_1_fu_456_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_fu_432_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln15_1_fu_466_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_513_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_5_fu_524_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_cast5_fu_520_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln15_2_fu_545_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_fu_531_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln15_3_fu_564_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln10_1_fu_589_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln13_fu_597_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln_fu_664_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln15_fu_671_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln15_fu_675_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln15_1_fu_684_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln15_1_fu_691_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln15_1_fu_695_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln15_2_fu_708_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln15_2_fu_715_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln15_2_fu_719_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal data_1_fu_736_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal index_fu_762_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal t_3_fu_791_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_fu_802_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_fu_806_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln36_fu_813_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xs_sign_1_fu_819_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_exp_1_fu_827_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal xs_sig_1_fu_837_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal xs_sig_2_fu_852_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal xor_ln39_fu_858_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal xs_sign_2_fu_841_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_exp_2_fu_846_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal xs_sig_3_fu_864_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal t_4_fu_870_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln18_fu_781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_fu_786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln18_fu_884_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln24_fu_896_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_1_fu_913_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_fu_908_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_fu_918_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln19_fu_924_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln24_fu_890_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln24_fu_902_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln19_1_fu_929_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dc_1_fu_945_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_1_fu_945_p8 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_1_fu_945_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_1_fu_945_p10 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln_fu_968_p4 : STD_LOGIC_VECTOR (57 downto 0);
    signal data_fu_999_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln505_fu_1012_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_fu_1016_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal xs_exp_4_fu_1002_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln486_fu_1030_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln486_fu_1034_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln71_fu_1048_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_fu_1040_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln71_fu_1054_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln71_fu_1058_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln71_1_fu_1066_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_fu_1026_p1 : STD_LOGIC_VECTOR (112 downto 0);
    signal zext_ln71_fu_1070_p1 : STD_LOGIC_VECTOR (112 downto 0);
    signal lshr_ln71_fu_1074_p2 : STD_LOGIC_VECTOR (112 downto 0);
    signal shl_ln71_fu_1080_p2 : STD_LOGIC_VECTOR (112 downto 0);
    signal tmp_9_fu_1086_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_1096_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln71_1_fu_1106_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln10_2_fu_991_p3 : STD_LOGIC_VECTOR (503 downto 0);
    signal tmp_4_fu_1122_p4 : STD_LOGIC_VECTOR (495 downto 0);
    signal tmp_6_fu_1132_p3 : STD_LOGIC_VECTOR (503 downto 0);
    signal grp_fu_331_ce : STD_LOGIC;
    signal grp_fu_334_ce : STD_LOGIC;
    signal grp_fu_337_ce : STD_LOGIC;
    signal grp_fu_341_ce : STD_LOGIC;
    signal grp_fu_348_ce : STD_LOGIC;
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter31_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter32_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter33_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter34_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter35_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter36_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter37_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter38_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter39_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter40_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter41_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter42_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter43_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter44_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter45_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter46_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter47_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter48_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter49_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter50_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter51_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter52_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter53_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter54_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter55_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter56_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter57_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter58_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter59_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0_1to59 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_1154 : BOOLEAN;
    signal ap_condition_1848 : BOOLEAN;
    signal ap_condition_1852 : BOOLEAN;
    signal ap_condition_1855 : BOOLEAN;
    signal dc_1_fu_945_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal dc_1_fu_945_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal dc_1_fu_945_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal dc_1_fu_945_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component edgedetect_fptrunc_64ns_32_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component edgedetect_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component edgedetect_dadd_64ns_64ns_64_8_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component edgedetect_dmul_64ns_64ns_64_7_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component edgedetect_sitodp_32ns_64_5_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component edgedetect_sparsemux_9_3_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        def : IN STD_LOGIC_VECTOR (63 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component edgedetect_mask_table_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component edgedetect_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        input_image : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_image : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component edgedetect_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        CH0_USER_RFIFONUM_WIDTH : INTEGER;
        CH0_USER_DW : INTEGER;
        CH0_USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_CH0_ARVALID : IN STD_LOGIC;
        I_CH0_ARREADY : OUT STD_LOGIC;
        I_CH0_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_RVALID : OUT STD_LOGIC;
        I_CH0_RREADY : IN STD_LOGIC;
        I_CH0_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_CH0_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_CH0_AWVALID : IN STD_LOGIC;
        I_CH0_AWREADY : OUT STD_LOGIC;
        I_CH0_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_WVALID : IN STD_LOGIC;
        I_CH0_WREADY : OUT STD_LOGIC;
        I_CH0_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_CH0_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_BVALID : OUT STD_LOGIC;
        I_CH0_BREADY : IN STD_LOGIC );
    end component;


    component edgedetect_flow_control_loop_delay_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_loop_exit_ready_delayed : IN STD_LOGIC );
    end component;



begin
    mask_table_U : component edgedetect_mask_table_ROM_AUTO_1R
    generic map (
        DataWidth => 52,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => mask_table_address0,
        ce0 => mask_table_ce0_local,
        q0 => mask_table_q0);

    control_s_axi_U : component edgedetect_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        input_image => input_image,
        output_image => output_image,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle);

    gmem_m_axi_U : component edgedetect_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 70,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        CH0_USER_RFIFONUM_WIDTH => 9,
        CH0_USER_DW => 512,
        CH0_USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_CH0_ARVALID => gmem_ARVALID,
        I_CH0_ARREADY => gmem_ARREADY,
        I_CH0_ARADDR => gmem_ARADDR,
        I_CH0_ARLEN => gmem_ARLEN,
        I_CH0_RVALID => gmem_RVALID,
        I_CH0_RREADY => gmem_RREADY,
        I_CH0_RDATA => gmem_RDATA,
        I_CH0_RFIFONUM => gmem_RFIFONUM,
        I_CH0_AWVALID => gmem_AWVALID,
        I_CH0_AWREADY => gmem_AWREADY,
        I_CH0_AWADDR => sext_ln10_fu_977_p1,
        I_CH0_AWLEN => gmem_AWLEN,
        I_CH0_WVALID => gmem_WVALID,
        I_CH0_WREADY => gmem_WREADY,
        I_CH0_WDATA => or_ln_reg_1417,
        I_CH0_WSTRB => ap_const_lv64_FFFFFFFFFFFFFFFF,
        I_CH0_BVALID => gmem_BVALID,
        I_CH0_BREADY => gmem_BREADY);

    fptrunc_64ns_32_2_no_dsp_1_U1 : component edgedetect_fptrunc_64ns_32_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => add1_reg_1358,
        ce => grp_fu_331_ce,
        dout => grp_fu_331_p1);

    fpext_32ns_64_2_no_dsp_1_U2 : component edgedetect_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => gray_reg_1363,
        ce => grp_fu_334_ce,
        dout => grp_fu_334_p1);

    dadd_64ns_64ns_64_8_full_dsp_1_U3 : component edgedetect_dadd_64ns_64ns_64_8_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_337_p0,
        din1 => grp_fu_337_p1,
        ce => grp_fu_337_ce,
        dout => grp_fu_337_p2);

    dmul_64ns_64ns_64_7_max_dsp_1_U4 : component edgedetect_dmul_64ns_64ns_64_7_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_341_p0,
        din1 => grp_fu_341_p1,
        ce => grp_fu_341_ce,
        dout => grp_fu_341_p2);

    sitodp_32ns_64_5_no_dsp_1_U5 : component edgedetect_sitodp_32ns_64_5_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_348_p0,
        ce => grp_fu_348_ce,
        dout => grp_fu_348_p1);

    sparsemux_9_3_64_1_1_U6 : component edgedetect_sparsemux_9_3_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "100",
        din0_WIDTH => 64,
        CASE1 => "010",
        din1_WIDTH => 64,
        CASE2 => "001",
        din2_WIDTH => 64,
        CASE3 => "000",
        din3_WIDTH => 64,
        def_WIDTH => 64,
        sel_WIDTH => 3,
        dout_WIDTH => 64)
    port map (
        din0 => dc_reg_1368,
        din1 => dc_1_fu_945_p4,
        din2 => ap_const_lv64_BFF0000000000000,
        din3 => dc_1_fu_945_p8,
        def => dc_1_fu_945_p9,
        sel => dc_1_fu_945_p10,
        dout => dc_1_fu_945_p11);

    flow_control_loop_delay_pipe_U : component edgedetect_flow_control_loop_delay_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue,
        ap_loop_exit_ready_delayed => ap_loop_exit_ready_delayed);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter59_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter42 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter43 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter44 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter45 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter46 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter47_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter47 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter48_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter48 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter49_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter49 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter50_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter50 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter51_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter51 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter52_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter52 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter53_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter53 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter54_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter54 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter55_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter55 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter56_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter56 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter56 <= ap_enable_reg_pp0_iter55;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter57_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter57 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter57 <= ap_enable_reg_pp0_iter56;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter58_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter58 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter58 <= ap_enable_reg_pp0_iter57;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter59_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter59 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter59 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter59 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter59 <= ap_enable_reg_pp0_iter58;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    add_ln108_fu_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_1154)) then
                add_ln108_fu_226 <= add_ln10_fu_492_p2;
            end if;
        end if;
    end process;

    ap_condition_exit_pp0_iter0_stage2_pp0_iter10_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter10_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter10_reg <= ap_condition_exit_pp0_iter0_stage2_pp0_iter9_reg;
            end if; 
        end if;
    end process;

    ap_condition_exit_pp0_iter0_stage2_pp0_iter11_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter11_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter11_reg <= ap_condition_exit_pp0_iter0_stage2_pp0_iter10_reg;
            end if; 
        end if;
    end process;

    ap_condition_exit_pp0_iter0_stage2_pp0_iter12_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter12_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter12_reg <= ap_condition_exit_pp0_iter0_stage2_pp0_iter11_reg;
            end if; 
        end if;
    end process;

    ap_condition_exit_pp0_iter0_stage2_pp0_iter13_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter13_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter13_reg <= ap_condition_exit_pp0_iter0_stage2_pp0_iter12_reg;
            end if; 
        end if;
    end process;

    ap_condition_exit_pp0_iter0_stage2_pp0_iter14_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter14_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter14_reg <= ap_condition_exit_pp0_iter0_stage2_pp0_iter13_reg;
            end if; 
        end if;
    end process;

    ap_condition_exit_pp0_iter0_stage2_pp0_iter15_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter15_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter15_reg <= ap_condition_exit_pp0_iter0_stage2_pp0_iter14_reg;
            end if; 
        end if;
    end process;

    ap_condition_exit_pp0_iter0_stage2_pp0_iter16_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter16_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter16_reg <= ap_condition_exit_pp0_iter0_stage2_pp0_iter15_reg;
            end if; 
        end if;
    end process;

    ap_condition_exit_pp0_iter0_stage2_pp0_iter17_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter17_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter17_reg <= ap_condition_exit_pp0_iter0_stage2_pp0_iter16_reg;
            end if; 
        end if;
    end process;

    ap_condition_exit_pp0_iter0_stage2_pp0_iter18_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter18_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter18_reg <= ap_condition_exit_pp0_iter0_stage2_pp0_iter17_reg;
            end if; 
        end if;
    end process;

    ap_condition_exit_pp0_iter0_stage2_pp0_iter19_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter19_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter19_reg <= ap_condition_exit_pp0_iter0_stage2_pp0_iter18_reg;
            end if; 
        end if;
    end process;

    ap_condition_exit_pp0_iter0_stage2_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage2;
            end if; 
        end if;
    end process;

    ap_condition_exit_pp0_iter0_stage2_pp0_iter20_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter20_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter20_reg <= ap_condition_exit_pp0_iter0_stage2_pp0_iter19_reg;
            end if; 
        end if;
    end process;

    ap_condition_exit_pp0_iter0_stage2_pp0_iter21_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter21_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter21_reg <= ap_condition_exit_pp0_iter0_stage2_pp0_iter20_reg;
            end if; 
        end if;
    end process;

    ap_condition_exit_pp0_iter0_stage2_pp0_iter22_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter22_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter22_reg <= ap_condition_exit_pp0_iter0_stage2_pp0_iter21_reg;
            end if; 
        end if;
    end process;

    ap_condition_exit_pp0_iter0_stage2_pp0_iter23_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter23_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter23_reg <= ap_condition_exit_pp0_iter0_stage2_pp0_iter22_reg;
            end if; 
        end if;
    end process;

    ap_condition_exit_pp0_iter0_stage2_pp0_iter24_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter24_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter24_reg <= ap_condition_exit_pp0_iter0_stage2_pp0_iter23_reg;
            end if; 
        end if;
    end process;

    ap_condition_exit_pp0_iter0_stage2_pp0_iter25_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter25_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter25_reg <= ap_condition_exit_pp0_iter0_stage2_pp0_iter24_reg;
            end if; 
        end if;
    end process;

    ap_condition_exit_pp0_iter0_stage2_pp0_iter26_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter26_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter26_reg <= ap_condition_exit_pp0_iter0_stage2_pp0_iter25_reg;
            end if; 
        end if;
    end process;

    ap_condition_exit_pp0_iter0_stage2_pp0_iter27_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter27_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter27_reg <= ap_condition_exit_pp0_iter0_stage2_pp0_iter26_reg;
            end if; 
        end if;
    end process;

    ap_condition_exit_pp0_iter0_stage2_pp0_iter28_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter28_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter28_reg <= ap_condition_exit_pp0_iter0_stage2_pp0_iter27_reg;
            end if; 
        end if;
    end process;

    ap_condition_exit_pp0_iter0_stage2_pp0_iter29_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter29_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter29_reg <= ap_condition_exit_pp0_iter0_stage2_pp0_iter28_reg;
            end if; 
        end if;
    end process;

    ap_condition_exit_pp0_iter0_stage2_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter2_reg <= ap_condition_exit_pp0_iter0_stage2_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_condition_exit_pp0_iter0_stage2_pp0_iter30_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter30_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter30_reg <= ap_condition_exit_pp0_iter0_stage2_pp0_iter29_reg;
            end if; 
        end if;
    end process;

    ap_condition_exit_pp0_iter0_stage2_pp0_iter31_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter31_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter31_reg <= ap_condition_exit_pp0_iter0_stage2_pp0_iter30_reg;
            end if; 
        end if;
    end process;

    ap_condition_exit_pp0_iter0_stage2_pp0_iter32_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter32_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter32_reg <= ap_condition_exit_pp0_iter0_stage2_pp0_iter31_reg;
            end if; 
        end if;
    end process;

    ap_condition_exit_pp0_iter0_stage2_pp0_iter33_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter33_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter33_reg <= ap_condition_exit_pp0_iter0_stage2_pp0_iter32_reg;
            end if; 
        end if;
    end process;

    ap_condition_exit_pp0_iter0_stage2_pp0_iter34_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter34_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter34_reg <= ap_condition_exit_pp0_iter0_stage2_pp0_iter33_reg;
            end if; 
        end if;
    end process;

    ap_condition_exit_pp0_iter0_stage2_pp0_iter35_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter35_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter35_reg <= ap_condition_exit_pp0_iter0_stage2_pp0_iter34_reg;
            end if; 
        end if;
    end process;

    ap_condition_exit_pp0_iter0_stage2_pp0_iter36_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter36_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter36_reg <= ap_condition_exit_pp0_iter0_stage2_pp0_iter35_reg;
            end if; 
        end if;
    end process;

    ap_condition_exit_pp0_iter0_stage2_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter3_reg <= ap_condition_exit_pp0_iter0_stage2_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_condition_exit_pp0_iter0_stage2_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter4_reg <= ap_condition_exit_pp0_iter0_stage2_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_condition_exit_pp0_iter0_stage2_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter5_reg <= ap_condition_exit_pp0_iter0_stage2_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    ap_condition_exit_pp0_iter0_stage2_pp0_iter6_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter6_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter6_reg <= ap_condition_exit_pp0_iter0_stage2_pp0_iter5_reg;
            end if; 
        end if;
    end process;

    ap_condition_exit_pp0_iter0_stage2_pp0_iter7_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter7_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter7_reg <= ap_condition_exit_pp0_iter0_stage2_pp0_iter6_reg;
            end if; 
        end if;
    end process;

    ap_condition_exit_pp0_iter0_stage2_pp0_iter8_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter8_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter8_reg <= ap_condition_exit_pp0_iter0_stage2_pp0_iter7_reg;
            end if; 
        end if;
    end process;

    ap_condition_exit_pp0_iter0_stage2_pp0_iter9_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter9_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_condition_exit_pp0_iter0_stage2_pp0_iter9_reg <= ap_condition_exit_pp0_iter0_stage2_pp0_iter8_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter10_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter10_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter11_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter11_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter12_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter12_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter13_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter13_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter14_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter14_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter15_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter15_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter16_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter16_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter17_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter17_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter18_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter18_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter19_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter19_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter20_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter20_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter21_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter21_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter22_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter22_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter23_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter23_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter24_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter24_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter25_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter25_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter26_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter26_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter27_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter27_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter28_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter28_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter29_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter29_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter30_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter30_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter31_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter31_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter32_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter32_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter33_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter33_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter34_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter34_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter35_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter35_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter36_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter36_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter37_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter37_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter37_reg <= ap_loop_exit_ready_pp0_iter36_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter38_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter38_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter38_reg <= ap_loop_exit_ready_pp0_iter37_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter39_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter39_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter39_reg <= ap_loop_exit_ready_pp0_iter38_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter40_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter40_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter40_reg <= ap_loop_exit_ready_pp0_iter39_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter41_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter41_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter41_reg <= ap_loop_exit_ready_pp0_iter40_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter42_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter42_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter42_reg <= ap_loop_exit_ready_pp0_iter41_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter43_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter43_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter43_reg <= ap_loop_exit_ready_pp0_iter42_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter44_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter44_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter44_reg <= ap_loop_exit_ready_pp0_iter43_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter45_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter45_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter45_reg <= ap_loop_exit_ready_pp0_iter44_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter46_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter46_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter46_reg <= ap_loop_exit_ready_pp0_iter45_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter47_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter47_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter47_reg <= ap_loop_exit_ready_pp0_iter46_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter48_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter48_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter48_reg <= ap_loop_exit_ready_pp0_iter47_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter49_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter49_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter49_reg <= ap_loop_exit_ready_pp0_iter48_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter50_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter50_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter50_reg <= ap_loop_exit_ready_pp0_iter49_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter51_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter51_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter51_reg <= ap_loop_exit_ready_pp0_iter50_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter52_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter52_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter52_reg <= ap_loop_exit_ready_pp0_iter51_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter53_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter53_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter53_reg <= ap_loop_exit_ready_pp0_iter52_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter54_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter54_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter54_reg <= ap_loop_exit_ready_pp0_iter53_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter55_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter55_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter55_reg <= ap_loop_exit_ready_pp0_iter54_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter56_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter56_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter56_reg <= ap_loop_exit_ready_pp0_iter55_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter57_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter57_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter57_reg <= ap_loop_exit_ready_pp0_iter56_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter58_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter58_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter58_reg <= ap_loop_exit_ready_pp0_iter57_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter59_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter58_reg = ap_const_logic_0)))) then 
                ap_loop_exit_ready_pp0_iter59_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter59_reg <= ap_loop_exit_ready_pp0_iter58_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter6_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter7_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter8_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter9_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
            end if; 
        end if;
    end process;

    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;

    first_iter_0_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if ((ap_const_boolean_1 = ap_condition_1852)) then 
                    first_iter_0_reg_307 <= ap_const_lv1_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_init = ap_const_logic_1))) then 
                    first_iter_0_reg_307 <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;

    i3_fu_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_1154)) then
                i3_fu_210 <= i_fu_398_p3;
            end if;
        end if;
    end process;

    icmp_ln137_reg_320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if ((ap_const_boolean_1 = ap_condition_1852)) then 
                    icmp_ln137_reg_320 <= icmp_ln13_reg_1263;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_init = ap_const_logic_1))) then 
                    icmp_ln137_reg_320 <= ap_const_lv1_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten2_fu_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_1855)) then 
                    indvar_flatten2_fu_206 <= ap_const_lv19_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    indvar_flatten2_fu_206 <= add_ln10_1_fu_617_p2;
                end if;
            end if; 
        end if;
    end process;

    j5_fu_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_1855)) then 
                    j5_fu_218 <= ap_const_lv10_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    j5_fu_218 <= j_fu_626_p2;
                end if;
            end if; 
        end if;
    end process;

    jj4_fu_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_1154)) then
                jj4_fu_214 <= jj_fu_486_p2;
            end if;
        end if;
    end process;

    phi_ln216_fu_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                    phi_ln216_fu_222 <= ap_const_lv504_lc_1;
                elsif ((ap_enable_reg_pp0_iter36 = ap_const_logic_1)) then 
                    phi_ln216_fu_222 <= select_ln21_fu_1140_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_1))) then
                add1_reg_1358 <= grp_fu_337_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln15_reg_1210 <= add_ln15_fu_460_p2;
                b_reg_1308 <= b_fu_724_p1;
                first_iter_0_reg_307_pp0_iter10_reg <= first_iter_0_reg_307_pp0_iter9_reg;
                first_iter_0_reg_307_pp0_iter11_reg <= first_iter_0_reg_307_pp0_iter10_reg;
                first_iter_0_reg_307_pp0_iter12_reg <= first_iter_0_reg_307_pp0_iter11_reg;
                first_iter_0_reg_307_pp0_iter13_reg <= first_iter_0_reg_307_pp0_iter12_reg;
                first_iter_0_reg_307_pp0_iter14_reg <= first_iter_0_reg_307_pp0_iter13_reg;
                first_iter_0_reg_307_pp0_iter15_reg <= first_iter_0_reg_307_pp0_iter14_reg;
                first_iter_0_reg_307_pp0_iter16_reg <= first_iter_0_reg_307_pp0_iter15_reg;
                first_iter_0_reg_307_pp0_iter17_reg <= first_iter_0_reg_307_pp0_iter16_reg;
                first_iter_0_reg_307_pp0_iter18_reg <= first_iter_0_reg_307_pp0_iter17_reg;
                first_iter_0_reg_307_pp0_iter19_reg <= first_iter_0_reg_307_pp0_iter18_reg;
                first_iter_0_reg_307_pp0_iter1_reg <= first_iter_0_reg_307;
                first_iter_0_reg_307_pp0_iter20_reg <= first_iter_0_reg_307_pp0_iter19_reg;
                first_iter_0_reg_307_pp0_iter21_reg <= first_iter_0_reg_307_pp0_iter20_reg;
                first_iter_0_reg_307_pp0_iter22_reg <= first_iter_0_reg_307_pp0_iter21_reg;
                first_iter_0_reg_307_pp0_iter23_reg <= first_iter_0_reg_307_pp0_iter22_reg;
                first_iter_0_reg_307_pp0_iter24_reg <= first_iter_0_reg_307_pp0_iter23_reg;
                first_iter_0_reg_307_pp0_iter25_reg <= first_iter_0_reg_307_pp0_iter24_reg;
                first_iter_0_reg_307_pp0_iter26_reg <= first_iter_0_reg_307_pp0_iter25_reg;
                first_iter_0_reg_307_pp0_iter27_reg <= first_iter_0_reg_307_pp0_iter26_reg;
                first_iter_0_reg_307_pp0_iter28_reg <= first_iter_0_reg_307_pp0_iter27_reg;
                first_iter_0_reg_307_pp0_iter29_reg <= first_iter_0_reg_307_pp0_iter28_reg;
                first_iter_0_reg_307_pp0_iter2_reg <= first_iter_0_reg_307_pp0_iter1_reg;
                first_iter_0_reg_307_pp0_iter30_reg <= first_iter_0_reg_307_pp0_iter29_reg;
                first_iter_0_reg_307_pp0_iter31_reg <= first_iter_0_reg_307_pp0_iter30_reg;
                first_iter_0_reg_307_pp0_iter32_reg <= first_iter_0_reg_307_pp0_iter31_reg;
                first_iter_0_reg_307_pp0_iter33_reg <= first_iter_0_reg_307_pp0_iter32_reg;
                first_iter_0_reg_307_pp0_iter34_reg <= first_iter_0_reg_307_pp0_iter33_reg;
                first_iter_0_reg_307_pp0_iter35_reg <= first_iter_0_reg_307_pp0_iter34_reg;
                first_iter_0_reg_307_pp0_iter3_reg <= first_iter_0_reg_307_pp0_iter2_reg;
                first_iter_0_reg_307_pp0_iter4_reg <= first_iter_0_reg_307_pp0_iter3_reg;
                first_iter_0_reg_307_pp0_iter5_reg <= first_iter_0_reg_307_pp0_iter4_reg;
                first_iter_0_reg_307_pp0_iter6_reg <= first_iter_0_reg_307_pp0_iter5_reg;
                first_iter_0_reg_307_pp0_iter7_reg <= first_iter_0_reg_307_pp0_iter6_reg;
                first_iter_0_reg_307_pp0_iter8_reg <= first_iter_0_reg_307_pp0_iter7_reg;
                first_iter_0_reg_307_pp0_iter9_reg <= first_iter_0_reg_307_pp0_iter8_reg;
                gmem_addr_1_read_reg_1278 <= gmem_RDATA;
                icmp_ln137_reg_320_pp0_iter10_reg <= icmp_ln137_reg_320_pp0_iter9_reg;
                icmp_ln137_reg_320_pp0_iter11_reg <= icmp_ln137_reg_320_pp0_iter10_reg;
                icmp_ln137_reg_320_pp0_iter12_reg <= icmp_ln137_reg_320_pp0_iter11_reg;
                icmp_ln137_reg_320_pp0_iter13_reg <= icmp_ln137_reg_320_pp0_iter12_reg;
                icmp_ln137_reg_320_pp0_iter14_reg <= icmp_ln137_reg_320_pp0_iter13_reg;
                icmp_ln137_reg_320_pp0_iter15_reg <= icmp_ln137_reg_320_pp0_iter14_reg;
                icmp_ln137_reg_320_pp0_iter16_reg <= icmp_ln137_reg_320_pp0_iter15_reg;
                icmp_ln137_reg_320_pp0_iter17_reg <= icmp_ln137_reg_320_pp0_iter16_reg;
                icmp_ln137_reg_320_pp0_iter18_reg <= icmp_ln137_reg_320_pp0_iter17_reg;
                icmp_ln137_reg_320_pp0_iter19_reg <= icmp_ln137_reg_320_pp0_iter18_reg;
                icmp_ln137_reg_320_pp0_iter1_reg <= icmp_ln137_reg_320;
                icmp_ln137_reg_320_pp0_iter20_reg <= icmp_ln137_reg_320_pp0_iter19_reg;
                icmp_ln137_reg_320_pp0_iter21_reg <= icmp_ln137_reg_320_pp0_iter20_reg;
                icmp_ln137_reg_320_pp0_iter22_reg <= icmp_ln137_reg_320_pp0_iter21_reg;
                icmp_ln137_reg_320_pp0_iter23_reg <= icmp_ln137_reg_320_pp0_iter22_reg;
                icmp_ln137_reg_320_pp0_iter24_reg <= icmp_ln137_reg_320_pp0_iter23_reg;
                icmp_ln137_reg_320_pp0_iter25_reg <= icmp_ln137_reg_320_pp0_iter24_reg;
                icmp_ln137_reg_320_pp0_iter26_reg <= icmp_ln137_reg_320_pp0_iter25_reg;
                icmp_ln137_reg_320_pp0_iter27_reg <= icmp_ln137_reg_320_pp0_iter26_reg;
                icmp_ln137_reg_320_pp0_iter28_reg <= icmp_ln137_reg_320_pp0_iter27_reg;
                icmp_ln137_reg_320_pp0_iter29_reg <= icmp_ln137_reg_320_pp0_iter28_reg;
                icmp_ln137_reg_320_pp0_iter2_reg <= icmp_ln137_reg_320_pp0_iter1_reg;
                icmp_ln137_reg_320_pp0_iter30_reg <= icmp_ln137_reg_320_pp0_iter29_reg;
                icmp_ln137_reg_320_pp0_iter31_reg <= icmp_ln137_reg_320_pp0_iter30_reg;
                icmp_ln137_reg_320_pp0_iter32_reg <= icmp_ln137_reg_320_pp0_iter31_reg;
                icmp_ln137_reg_320_pp0_iter33_reg <= icmp_ln137_reg_320_pp0_iter32_reg;
                icmp_ln137_reg_320_pp0_iter34_reg <= icmp_ln137_reg_320_pp0_iter33_reg;
                icmp_ln137_reg_320_pp0_iter35_reg <= icmp_ln137_reg_320_pp0_iter34_reg;
                icmp_ln137_reg_320_pp0_iter3_reg <= icmp_ln137_reg_320_pp0_iter2_reg;
                icmp_ln137_reg_320_pp0_iter4_reg <= icmp_ln137_reg_320_pp0_iter3_reg;
                icmp_ln137_reg_320_pp0_iter5_reg <= icmp_ln137_reg_320_pp0_iter4_reg;
                icmp_ln137_reg_320_pp0_iter6_reg <= icmp_ln137_reg_320_pp0_iter5_reg;
                icmp_ln137_reg_320_pp0_iter7_reg <= icmp_ln137_reg_320_pp0_iter6_reg;
                icmp_ln137_reg_320_pp0_iter8_reg <= icmp_ln137_reg_320_pp0_iter7_reg;
                icmp_ln137_reg_320_pp0_iter9_reg <= icmp_ln137_reg_320_pp0_iter8_reg;
                mul2_reg_1348_pp0_iter30_reg <= mul2_reg_1348;
                mul2_reg_1348_pp0_iter31_reg <= mul2_reg_1348_pp0_iter30_reg;
                or_ln_reg_1417 <= or_ln_fu_1114_p3;
                output_image_read_reg_1195 <= output_image;
                output_image_read_reg_1195_pp0_iter10_reg <= output_image_read_reg_1195_pp0_iter9_reg;
                output_image_read_reg_1195_pp0_iter11_reg <= output_image_read_reg_1195_pp0_iter10_reg;
                output_image_read_reg_1195_pp0_iter12_reg <= output_image_read_reg_1195_pp0_iter11_reg;
                output_image_read_reg_1195_pp0_iter13_reg <= output_image_read_reg_1195_pp0_iter12_reg;
                output_image_read_reg_1195_pp0_iter14_reg <= output_image_read_reg_1195_pp0_iter13_reg;
                output_image_read_reg_1195_pp0_iter15_reg <= output_image_read_reg_1195_pp0_iter14_reg;
                output_image_read_reg_1195_pp0_iter16_reg <= output_image_read_reg_1195_pp0_iter15_reg;
                output_image_read_reg_1195_pp0_iter17_reg <= output_image_read_reg_1195_pp0_iter16_reg;
                output_image_read_reg_1195_pp0_iter18_reg <= output_image_read_reg_1195_pp0_iter17_reg;
                output_image_read_reg_1195_pp0_iter19_reg <= output_image_read_reg_1195_pp0_iter18_reg;
                output_image_read_reg_1195_pp0_iter1_reg <= output_image_read_reg_1195;
                output_image_read_reg_1195_pp0_iter20_reg <= output_image_read_reg_1195_pp0_iter19_reg;
                output_image_read_reg_1195_pp0_iter21_reg <= output_image_read_reg_1195_pp0_iter20_reg;
                output_image_read_reg_1195_pp0_iter22_reg <= output_image_read_reg_1195_pp0_iter21_reg;
                output_image_read_reg_1195_pp0_iter23_reg <= output_image_read_reg_1195_pp0_iter22_reg;
                output_image_read_reg_1195_pp0_iter24_reg <= output_image_read_reg_1195_pp0_iter23_reg;
                output_image_read_reg_1195_pp0_iter25_reg <= output_image_read_reg_1195_pp0_iter24_reg;
                output_image_read_reg_1195_pp0_iter26_reg <= output_image_read_reg_1195_pp0_iter25_reg;
                output_image_read_reg_1195_pp0_iter27_reg <= output_image_read_reg_1195_pp0_iter26_reg;
                output_image_read_reg_1195_pp0_iter28_reg <= output_image_read_reg_1195_pp0_iter27_reg;
                output_image_read_reg_1195_pp0_iter29_reg <= output_image_read_reg_1195_pp0_iter28_reg;
                output_image_read_reg_1195_pp0_iter2_reg <= output_image_read_reg_1195_pp0_iter1_reg;
                output_image_read_reg_1195_pp0_iter30_reg <= output_image_read_reg_1195_pp0_iter29_reg;
                output_image_read_reg_1195_pp0_iter31_reg <= output_image_read_reg_1195_pp0_iter30_reg;
                output_image_read_reg_1195_pp0_iter32_reg <= output_image_read_reg_1195_pp0_iter31_reg;
                output_image_read_reg_1195_pp0_iter33_reg <= output_image_read_reg_1195_pp0_iter32_reg;
                output_image_read_reg_1195_pp0_iter34_reg <= output_image_read_reg_1195_pp0_iter33_reg;
                output_image_read_reg_1195_pp0_iter35_reg <= output_image_read_reg_1195_pp0_iter34_reg;
                output_image_read_reg_1195_pp0_iter3_reg <= output_image_read_reg_1195_pp0_iter2_reg;
                output_image_read_reg_1195_pp0_iter4_reg <= output_image_read_reg_1195_pp0_iter3_reg;
                output_image_read_reg_1195_pp0_iter5_reg <= output_image_read_reg_1195_pp0_iter4_reg;
                output_image_read_reg_1195_pp0_iter6_reg <= output_image_read_reg_1195_pp0_iter5_reg;
                output_image_read_reg_1195_pp0_iter7_reg <= output_image_read_reg_1195_pp0_iter6_reg;
                output_image_read_reg_1195_pp0_iter8_reg <= output_image_read_reg_1195_pp0_iter7_reg;
                output_image_read_reg_1195_pp0_iter9_reg <= output_image_read_reg_1195_pp0_iter8_reg;
                tmp_1_reg_1200 <= empty_22_fu_426_p2(19 downto 1);
                tmp_3_reg_1205 <= empty_22_fu_426_p2(19 downto 2);
                trunc_ln15_1_reg_1216 <= add_ln15_1_fu_466_p2(63 downto 6);
                trunc_ln15_reg_1221 <= trunc_ln15_fu_482_p1;
                trunc_ln15_reg_1221_pp0_iter10_reg <= trunc_ln15_reg_1221_pp0_iter9_reg;
                trunc_ln15_reg_1221_pp0_iter11_reg <= trunc_ln15_reg_1221_pp0_iter10_reg;
                trunc_ln15_reg_1221_pp0_iter12_reg <= trunc_ln15_reg_1221_pp0_iter11_reg;
                trunc_ln15_reg_1221_pp0_iter13_reg <= trunc_ln15_reg_1221_pp0_iter12_reg;
                trunc_ln15_reg_1221_pp0_iter14_reg <= trunc_ln15_reg_1221_pp0_iter13_reg;
                trunc_ln15_reg_1221_pp0_iter15_reg <= trunc_ln15_reg_1221_pp0_iter14_reg;
                trunc_ln15_reg_1221_pp0_iter16_reg <= trunc_ln15_reg_1221_pp0_iter15_reg;
                trunc_ln15_reg_1221_pp0_iter17_reg <= trunc_ln15_reg_1221_pp0_iter16_reg;
                trunc_ln15_reg_1221_pp0_iter18_reg <= trunc_ln15_reg_1221_pp0_iter17_reg;
                trunc_ln15_reg_1221_pp0_iter19_reg <= trunc_ln15_reg_1221_pp0_iter18_reg;
                trunc_ln15_reg_1221_pp0_iter1_reg <= trunc_ln15_reg_1221;
                trunc_ln15_reg_1221_pp0_iter20_reg <= trunc_ln15_reg_1221_pp0_iter19_reg;
                trunc_ln15_reg_1221_pp0_iter21_reg <= trunc_ln15_reg_1221_pp0_iter20_reg;
                trunc_ln15_reg_1221_pp0_iter22_reg <= trunc_ln15_reg_1221_pp0_iter21_reg;
                trunc_ln15_reg_1221_pp0_iter23_reg <= trunc_ln15_reg_1221_pp0_iter22_reg;
                trunc_ln15_reg_1221_pp0_iter24_reg <= trunc_ln15_reg_1221_pp0_iter23_reg;
                trunc_ln15_reg_1221_pp0_iter2_reg <= trunc_ln15_reg_1221_pp0_iter1_reg;
                trunc_ln15_reg_1221_pp0_iter3_reg <= trunc_ln15_reg_1221_pp0_iter2_reg;
                trunc_ln15_reg_1221_pp0_iter4_reg <= trunc_ln15_reg_1221_pp0_iter3_reg;
                trunc_ln15_reg_1221_pp0_iter5_reg <= trunc_ln15_reg_1221_pp0_iter4_reg;
                trunc_ln15_reg_1221_pp0_iter6_reg <= trunc_ln15_reg_1221_pp0_iter5_reg;
                trunc_ln15_reg_1221_pp0_iter7_reg <= trunc_ln15_reg_1221_pp0_iter6_reg;
                trunc_ln15_reg_1221_pp0_iter8_reg <= trunc_ln15_reg_1221_pp0_iter7_reg;
                trunc_ln15_reg_1221_pp0_iter9_reg <= trunc_ln15_reg_1221_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1))) then
                add_reg_1353 <= grp_fu_337_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1))) then
                conv1_reg_1328 <= grp_fu_348_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1))) then
                conv2_reg_1333 <= grp_fu_348_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1))) then
                conv_reg_1323 <= grp_fu_348_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                dc_1_reg_1406 <= dc_1_fu_945_p11;
                g_reg_1293 <= g_fu_700_p1;
                gmem_addr_3_read_reg_1298 <= gmem_RDATA;
                gray_reg_1363 <= grp_fu_331_p1;
                icmp_ln10_reg_1268 <= icmp_ln10_fu_638_p2;
                icmp_ln10_reg_1268_pp0_iter10_reg <= icmp_ln10_reg_1268_pp0_iter9_reg;
                icmp_ln10_reg_1268_pp0_iter11_reg <= icmp_ln10_reg_1268_pp0_iter10_reg;
                icmp_ln10_reg_1268_pp0_iter12_reg <= icmp_ln10_reg_1268_pp0_iter11_reg;
                icmp_ln10_reg_1268_pp0_iter13_reg <= icmp_ln10_reg_1268_pp0_iter12_reg;
                icmp_ln10_reg_1268_pp0_iter14_reg <= icmp_ln10_reg_1268_pp0_iter13_reg;
                icmp_ln10_reg_1268_pp0_iter15_reg <= icmp_ln10_reg_1268_pp0_iter14_reg;
                icmp_ln10_reg_1268_pp0_iter16_reg <= icmp_ln10_reg_1268_pp0_iter15_reg;
                icmp_ln10_reg_1268_pp0_iter17_reg <= icmp_ln10_reg_1268_pp0_iter16_reg;
                icmp_ln10_reg_1268_pp0_iter18_reg <= icmp_ln10_reg_1268_pp0_iter17_reg;
                icmp_ln10_reg_1268_pp0_iter19_reg <= icmp_ln10_reg_1268_pp0_iter18_reg;
                icmp_ln10_reg_1268_pp0_iter1_reg <= icmp_ln10_reg_1268;
                icmp_ln10_reg_1268_pp0_iter20_reg <= icmp_ln10_reg_1268_pp0_iter19_reg;
                icmp_ln10_reg_1268_pp0_iter21_reg <= icmp_ln10_reg_1268_pp0_iter20_reg;
                icmp_ln10_reg_1268_pp0_iter22_reg <= icmp_ln10_reg_1268_pp0_iter21_reg;
                icmp_ln10_reg_1268_pp0_iter23_reg <= icmp_ln10_reg_1268_pp0_iter22_reg;
                icmp_ln10_reg_1268_pp0_iter24_reg <= icmp_ln10_reg_1268_pp0_iter23_reg;
                icmp_ln10_reg_1268_pp0_iter25_reg <= icmp_ln10_reg_1268_pp0_iter24_reg;
                icmp_ln10_reg_1268_pp0_iter26_reg <= icmp_ln10_reg_1268_pp0_iter25_reg;
                icmp_ln10_reg_1268_pp0_iter27_reg <= icmp_ln10_reg_1268_pp0_iter26_reg;
                icmp_ln10_reg_1268_pp0_iter28_reg <= icmp_ln10_reg_1268_pp0_iter27_reg;
                icmp_ln10_reg_1268_pp0_iter29_reg <= icmp_ln10_reg_1268_pp0_iter28_reg;
                icmp_ln10_reg_1268_pp0_iter2_reg <= icmp_ln10_reg_1268_pp0_iter1_reg;
                icmp_ln10_reg_1268_pp0_iter30_reg <= icmp_ln10_reg_1268_pp0_iter29_reg;
                icmp_ln10_reg_1268_pp0_iter31_reg <= icmp_ln10_reg_1268_pp0_iter30_reg;
                icmp_ln10_reg_1268_pp0_iter32_reg <= icmp_ln10_reg_1268_pp0_iter31_reg;
                icmp_ln10_reg_1268_pp0_iter33_reg <= icmp_ln10_reg_1268_pp0_iter32_reg;
                icmp_ln10_reg_1268_pp0_iter34_reg <= icmp_ln10_reg_1268_pp0_iter33_reg;
                icmp_ln10_reg_1268_pp0_iter35_reg <= icmp_ln10_reg_1268_pp0_iter34_reg;
                icmp_ln10_reg_1268_pp0_iter36_reg <= icmp_ln10_reg_1268_pp0_iter35_reg;
                icmp_ln10_reg_1268_pp0_iter37_reg <= icmp_ln10_reg_1268_pp0_iter36_reg;
                icmp_ln10_reg_1268_pp0_iter38_reg <= icmp_ln10_reg_1268_pp0_iter37_reg;
                icmp_ln10_reg_1268_pp0_iter39_reg <= icmp_ln10_reg_1268_pp0_iter38_reg;
                icmp_ln10_reg_1268_pp0_iter3_reg <= icmp_ln10_reg_1268_pp0_iter2_reg;
                icmp_ln10_reg_1268_pp0_iter40_reg <= icmp_ln10_reg_1268_pp0_iter39_reg;
                icmp_ln10_reg_1268_pp0_iter41_reg <= icmp_ln10_reg_1268_pp0_iter40_reg;
                icmp_ln10_reg_1268_pp0_iter42_reg <= icmp_ln10_reg_1268_pp0_iter41_reg;
                icmp_ln10_reg_1268_pp0_iter43_reg <= icmp_ln10_reg_1268_pp0_iter42_reg;
                icmp_ln10_reg_1268_pp0_iter44_reg <= icmp_ln10_reg_1268_pp0_iter43_reg;
                icmp_ln10_reg_1268_pp0_iter45_reg <= icmp_ln10_reg_1268_pp0_iter44_reg;
                icmp_ln10_reg_1268_pp0_iter46_reg <= icmp_ln10_reg_1268_pp0_iter45_reg;
                icmp_ln10_reg_1268_pp0_iter47_reg <= icmp_ln10_reg_1268_pp0_iter46_reg;
                icmp_ln10_reg_1268_pp0_iter48_reg <= icmp_ln10_reg_1268_pp0_iter47_reg;
                icmp_ln10_reg_1268_pp0_iter49_reg <= icmp_ln10_reg_1268_pp0_iter48_reg;
                icmp_ln10_reg_1268_pp0_iter4_reg <= icmp_ln10_reg_1268_pp0_iter3_reg;
                icmp_ln10_reg_1268_pp0_iter50_reg <= icmp_ln10_reg_1268_pp0_iter49_reg;
                icmp_ln10_reg_1268_pp0_iter51_reg <= icmp_ln10_reg_1268_pp0_iter50_reg;
                icmp_ln10_reg_1268_pp0_iter52_reg <= icmp_ln10_reg_1268_pp0_iter51_reg;
                icmp_ln10_reg_1268_pp0_iter53_reg <= icmp_ln10_reg_1268_pp0_iter52_reg;
                icmp_ln10_reg_1268_pp0_iter54_reg <= icmp_ln10_reg_1268_pp0_iter53_reg;
                icmp_ln10_reg_1268_pp0_iter55_reg <= icmp_ln10_reg_1268_pp0_iter54_reg;
                icmp_ln10_reg_1268_pp0_iter56_reg <= icmp_ln10_reg_1268_pp0_iter55_reg;
                icmp_ln10_reg_1268_pp0_iter57_reg <= icmp_ln10_reg_1268_pp0_iter56_reg;
                icmp_ln10_reg_1268_pp0_iter58_reg <= icmp_ln10_reg_1268_pp0_iter57_reg;
                icmp_ln10_reg_1268_pp0_iter5_reg <= icmp_ln10_reg_1268_pp0_iter4_reg;
                icmp_ln10_reg_1268_pp0_iter6_reg <= icmp_ln10_reg_1268_pp0_iter5_reg;
                icmp_ln10_reg_1268_pp0_iter7_reg <= icmp_ln10_reg_1268_pp0_iter6_reg;
                icmp_ln10_reg_1268_pp0_iter8_reg <= icmp_ln10_reg_1268_pp0_iter7_reg;
                icmp_ln10_reg_1268_pp0_iter9_reg <= icmp_ln10_reg_1268_pp0_iter8_reg;
                icmp_ln21_reg_1258 <= icmp_ln21_fu_611_p2;
                icmp_ln21_reg_1258_pp0_iter10_reg <= icmp_ln21_reg_1258_pp0_iter9_reg;
                icmp_ln21_reg_1258_pp0_iter11_reg <= icmp_ln21_reg_1258_pp0_iter10_reg;
                icmp_ln21_reg_1258_pp0_iter12_reg <= icmp_ln21_reg_1258_pp0_iter11_reg;
                icmp_ln21_reg_1258_pp0_iter13_reg <= icmp_ln21_reg_1258_pp0_iter12_reg;
                icmp_ln21_reg_1258_pp0_iter14_reg <= icmp_ln21_reg_1258_pp0_iter13_reg;
                icmp_ln21_reg_1258_pp0_iter15_reg <= icmp_ln21_reg_1258_pp0_iter14_reg;
                icmp_ln21_reg_1258_pp0_iter16_reg <= icmp_ln21_reg_1258_pp0_iter15_reg;
                icmp_ln21_reg_1258_pp0_iter17_reg <= icmp_ln21_reg_1258_pp0_iter16_reg;
                icmp_ln21_reg_1258_pp0_iter18_reg <= icmp_ln21_reg_1258_pp0_iter17_reg;
                icmp_ln21_reg_1258_pp0_iter19_reg <= icmp_ln21_reg_1258_pp0_iter18_reg;
                icmp_ln21_reg_1258_pp0_iter1_reg <= icmp_ln21_reg_1258;
                icmp_ln21_reg_1258_pp0_iter20_reg <= icmp_ln21_reg_1258_pp0_iter19_reg;
                icmp_ln21_reg_1258_pp0_iter21_reg <= icmp_ln21_reg_1258_pp0_iter20_reg;
                icmp_ln21_reg_1258_pp0_iter22_reg <= icmp_ln21_reg_1258_pp0_iter21_reg;
                icmp_ln21_reg_1258_pp0_iter23_reg <= icmp_ln21_reg_1258_pp0_iter22_reg;
                icmp_ln21_reg_1258_pp0_iter24_reg <= icmp_ln21_reg_1258_pp0_iter23_reg;
                icmp_ln21_reg_1258_pp0_iter25_reg <= icmp_ln21_reg_1258_pp0_iter24_reg;
                icmp_ln21_reg_1258_pp0_iter26_reg <= icmp_ln21_reg_1258_pp0_iter25_reg;
                icmp_ln21_reg_1258_pp0_iter27_reg <= icmp_ln21_reg_1258_pp0_iter26_reg;
                icmp_ln21_reg_1258_pp0_iter28_reg <= icmp_ln21_reg_1258_pp0_iter27_reg;
                icmp_ln21_reg_1258_pp0_iter29_reg <= icmp_ln21_reg_1258_pp0_iter28_reg;
                icmp_ln21_reg_1258_pp0_iter2_reg <= icmp_ln21_reg_1258_pp0_iter1_reg;
                icmp_ln21_reg_1258_pp0_iter30_reg <= icmp_ln21_reg_1258_pp0_iter29_reg;
                icmp_ln21_reg_1258_pp0_iter31_reg <= icmp_ln21_reg_1258_pp0_iter30_reg;
                icmp_ln21_reg_1258_pp0_iter32_reg <= icmp_ln21_reg_1258_pp0_iter31_reg;
                icmp_ln21_reg_1258_pp0_iter33_reg <= icmp_ln21_reg_1258_pp0_iter32_reg;
                icmp_ln21_reg_1258_pp0_iter34_reg <= icmp_ln21_reg_1258_pp0_iter33_reg;
                icmp_ln21_reg_1258_pp0_iter35_reg <= icmp_ln21_reg_1258_pp0_iter34_reg;
                icmp_ln21_reg_1258_pp0_iter3_reg <= icmp_ln21_reg_1258_pp0_iter2_reg;
                icmp_ln21_reg_1258_pp0_iter4_reg <= icmp_ln21_reg_1258_pp0_iter3_reg;
                icmp_ln21_reg_1258_pp0_iter5_reg <= icmp_ln21_reg_1258_pp0_iter4_reg;
                icmp_ln21_reg_1258_pp0_iter6_reg <= icmp_ln21_reg_1258_pp0_iter5_reg;
                icmp_ln21_reg_1258_pp0_iter7_reg <= icmp_ln21_reg_1258_pp0_iter6_reg;
                icmp_ln21_reg_1258_pp0_iter8_reg <= icmp_ln21_reg_1258_pp0_iter7_reg;
                icmp_ln21_reg_1258_pp0_iter9_reg <= icmp_ln21_reg_1258_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                dc_reg_1368 <= grp_fu_334_p1;
                gmem_addr_2_read_reg_1288 <= gmem_RDATA;
                r_reg_1283 <= r_fu_680_p1;
                trunc_ln15_3_reg_1237 <= trunc_ln15_3_fu_560_p1;
                trunc_ln15_3_reg_1237_pp0_iter10_reg <= trunc_ln15_3_reg_1237_pp0_iter9_reg;
                trunc_ln15_3_reg_1237_pp0_iter11_reg <= trunc_ln15_3_reg_1237_pp0_iter10_reg;
                trunc_ln15_3_reg_1237_pp0_iter12_reg <= trunc_ln15_3_reg_1237_pp0_iter11_reg;
                trunc_ln15_3_reg_1237_pp0_iter13_reg <= trunc_ln15_3_reg_1237_pp0_iter12_reg;
                trunc_ln15_3_reg_1237_pp0_iter14_reg <= trunc_ln15_3_reg_1237_pp0_iter13_reg;
                trunc_ln15_3_reg_1237_pp0_iter15_reg <= trunc_ln15_3_reg_1237_pp0_iter14_reg;
                trunc_ln15_3_reg_1237_pp0_iter16_reg <= trunc_ln15_3_reg_1237_pp0_iter15_reg;
                trunc_ln15_3_reg_1237_pp0_iter17_reg <= trunc_ln15_3_reg_1237_pp0_iter16_reg;
                trunc_ln15_3_reg_1237_pp0_iter18_reg <= trunc_ln15_3_reg_1237_pp0_iter17_reg;
                trunc_ln15_3_reg_1237_pp0_iter19_reg <= trunc_ln15_3_reg_1237_pp0_iter18_reg;
                trunc_ln15_3_reg_1237_pp0_iter1_reg <= trunc_ln15_3_reg_1237;
                trunc_ln15_3_reg_1237_pp0_iter20_reg <= trunc_ln15_3_reg_1237_pp0_iter19_reg;
                trunc_ln15_3_reg_1237_pp0_iter21_reg <= trunc_ln15_3_reg_1237_pp0_iter20_reg;
                trunc_ln15_3_reg_1237_pp0_iter22_reg <= trunc_ln15_3_reg_1237_pp0_iter21_reg;
                trunc_ln15_3_reg_1237_pp0_iter23_reg <= trunc_ln15_3_reg_1237_pp0_iter22_reg;
                trunc_ln15_3_reg_1237_pp0_iter24_reg <= trunc_ln15_3_reg_1237_pp0_iter23_reg;
                trunc_ln15_3_reg_1237_pp0_iter2_reg <= trunc_ln15_3_reg_1237_pp0_iter1_reg;
                trunc_ln15_3_reg_1237_pp0_iter3_reg <= trunc_ln15_3_reg_1237_pp0_iter2_reg;
                trunc_ln15_3_reg_1237_pp0_iter4_reg <= trunc_ln15_3_reg_1237_pp0_iter3_reg;
                trunc_ln15_3_reg_1237_pp0_iter5_reg <= trunc_ln15_3_reg_1237_pp0_iter4_reg;
                trunc_ln15_3_reg_1237_pp0_iter6_reg <= trunc_ln15_3_reg_1237_pp0_iter5_reg;
                trunc_ln15_3_reg_1237_pp0_iter7_reg <= trunc_ln15_3_reg_1237_pp0_iter6_reg;
                trunc_ln15_3_reg_1237_pp0_iter8_reg <= trunc_ln15_3_reg_1237_pp0_iter7_reg;
                trunc_ln15_3_reg_1237_pp0_iter9_reg <= trunc_ln15_3_reg_1237_pp0_iter8_reg;
                trunc_ln15_5_reg_1232 <= add_ln15_2_fu_545_p2(63 downto 6);
                trunc_ln15_6_reg_1247 <= trunc_ln15_6_fu_579_p1;
                trunc_ln15_6_reg_1247_pp0_iter10_reg <= trunc_ln15_6_reg_1247_pp0_iter9_reg;
                trunc_ln15_6_reg_1247_pp0_iter11_reg <= trunc_ln15_6_reg_1247_pp0_iter10_reg;
                trunc_ln15_6_reg_1247_pp0_iter12_reg <= trunc_ln15_6_reg_1247_pp0_iter11_reg;
                trunc_ln15_6_reg_1247_pp0_iter13_reg <= trunc_ln15_6_reg_1247_pp0_iter12_reg;
                trunc_ln15_6_reg_1247_pp0_iter14_reg <= trunc_ln15_6_reg_1247_pp0_iter13_reg;
                trunc_ln15_6_reg_1247_pp0_iter15_reg <= trunc_ln15_6_reg_1247_pp0_iter14_reg;
                trunc_ln15_6_reg_1247_pp0_iter16_reg <= trunc_ln15_6_reg_1247_pp0_iter15_reg;
                trunc_ln15_6_reg_1247_pp0_iter17_reg <= trunc_ln15_6_reg_1247_pp0_iter16_reg;
                trunc_ln15_6_reg_1247_pp0_iter18_reg <= trunc_ln15_6_reg_1247_pp0_iter17_reg;
                trunc_ln15_6_reg_1247_pp0_iter19_reg <= trunc_ln15_6_reg_1247_pp0_iter18_reg;
                trunc_ln15_6_reg_1247_pp0_iter1_reg <= trunc_ln15_6_reg_1247;
                trunc_ln15_6_reg_1247_pp0_iter20_reg <= trunc_ln15_6_reg_1247_pp0_iter19_reg;
                trunc_ln15_6_reg_1247_pp0_iter21_reg <= trunc_ln15_6_reg_1247_pp0_iter20_reg;
                trunc_ln15_6_reg_1247_pp0_iter22_reg <= trunc_ln15_6_reg_1247_pp0_iter21_reg;
                trunc_ln15_6_reg_1247_pp0_iter23_reg <= trunc_ln15_6_reg_1247_pp0_iter22_reg;
                trunc_ln15_6_reg_1247_pp0_iter24_reg <= trunc_ln15_6_reg_1247_pp0_iter23_reg;
                trunc_ln15_6_reg_1247_pp0_iter2_reg <= trunc_ln15_6_reg_1247_pp0_iter1_reg;
                trunc_ln15_6_reg_1247_pp0_iter3_reg <= trunc_ln15_6_reg_1247_pp0_iter2_reg;
                trunc_ln15_6_reg_1247_pp0_iter4_reg <= trunc_ln15_6_reg_1247_pp0_iter3_reg;
                trunc_ln15_6_reg_1247_pp0_iter5_reg <= trunc_ln15_6_reg_1247_pp0_iter4_reg;
                trunc_ln15_6_reg_1247_pp0_iter6_reg <= trunc_ln15_6_reg_1247_pp0_iter5_reg;
                trunc_ln15_6_reg_1247_pp0_iter7_reg <= trunc_ln15_6_reg_1247_pp0_iter6_reg;
                trunc_ln15_6_reg_1247_pp0_iter8_reg <= trunc_ln15_6_reg_1247_pp0_iter7_reg;
                trunc_ln15_6_reg_1247_pp0_iter9_reg <= trunc_ln15_6_reg_1247_pp0_iter8_reg;
                trunc_ln15_7_reg_1242 <= add_ln15_3_fu_564_p2(63 downto 6);
                trunc_ln479_reg_1401 <= trunc_ln479_fu_777_p1;
                xs_exp_reg_1382 <= data_1_fu_736_p1(62 downto 52);
                xs_sig_reg_1390 <= xs_sig_fu_758_p1;
                xs_sign_reg_1373 <= data_1_fu_736_p1(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                icmp_ln13_reg_1263 <= icmp_ln13_fu_632_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then
                mul1_reg_1343 <= grp_fu_341_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_1))) then
                mul2_reg_1348 <= grp_fu_341_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then
                mul_reg_1338 <= grp_fu_341_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter59_stage0, ap_idle_pp0_0to58, ap_idle_pp0_1to59, ap_block_pp0_stage1_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to58 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter59_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to59 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln10_1_fu_617_p2 <= std_logic_vector(unsigned(indvar_flatten2_fu_206) + unsigned(ap_const_lv19_1));
    add_ln10_fu_492_p2 <= std_logic_vector(unsigned(i_fu_398_p3) + unsigned(ap_const_lv9_1));
    add_ln15_1_fu_466_p2 <= std_logic_vector(unsigned(add_ln15_fu_460_p2) + unsigned(p_cast_fu_432_p1));
    add_ln15_2_fu_545_p2 <= std_logic_vector(unsigned(add_ln15_reg_1210) + unsigned(p_cast5_fu_520_p1));
    add_ln15_3_fu_564_p2 <= std_logic_vector(unsigned(add_ln15_reg_1210) + unsigned(zext_ln13_fu_531_p1));
    add_ln15_fu_460_p2 <= std_logic_vector(unsigned(zext_ln13_1_fu_456_p1) + unsigned(input_image));
    add_ln36_fu_813_p2 <= std_logic_vector(unsigned(zext_ln28_fu_802_p1) + unsigned(t_fu_806_p3));
    add_ln486_fu_1034_p2 <= std_logic_vector(unsigned(zext_ln486_fu_1030_p1) + unsigned(ap_const_lv12_C01));
    and_ln19_1_fu_929_p2 <= (icmp_ln18_fu_781_p2 and and_ln19_fu_924_p2);
    and_ln19_fu_924_p2 <= (xs_sign_reg_1373 and or_ln19_fu_918_p2);
    and_ln24_fu_890_p2 <= (xor_ln18_fu_884_p2 and icmp_ln24_fu_786_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter59, gmem_ARREADY, ap_block_state1_pp0_stage0_iter0, ap_block_state73_pp0_stage0_iter24, ap_block_state109_io, ap_block_state178_pp0_stage0_iter59)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state178_pp0_stage0_iter59) and (ap_enable_reg_pp0_iter59 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state109_io) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (gmem_ARREADY = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state73_pp0_stage0_iter24)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter59, gmem_ARREADY, ap_block_state1_pp0_stage0_iter0, ap_block_state73_pp0_stage0_iter24, ap_block_state109_io, ap_block_state178_pp0_stage0_iter59)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state178_pp0_stage0_iter59) and (ap_enable_reg_pp0_iter59 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state109_io) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (gmem_ARREADY = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state73_pp0_stage0_iter24)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter24, ap_done_reg, ap_block_state74_pp0_stage1_iter24)
    begin
                ap_block_pp0_stage1_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state74_pp0_stage1_iter24)));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter36, gmem_ARREADY, ap_done_reg, ap_block_state74_pp0_stage1_iter24, ap_block_state110_io)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_const_boolean_1 = ap_block_state110_io) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state74_pp0_stage1_iter24)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (gmem_ARREADY = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter36, gmem_ARREADY, ap_done_reg, ap_block_state74_pp0_stage1_iter24, ap_block_state110_io)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_const_boolean_1 = ap_block_state110_io) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state74_pp0_stage1_iter24)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (gmem_ARREADY = ap_const_logic_0)));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter24, gmem_ARREADY, ap_block_state75_pp0_stage2_iter24)
    begin
                ap_block_pp0_stage2_11001 <= (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state75_pp0_stage2_iter24)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (gmem_ARREADY = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter24, gmem_ARREADY, ap_block_state75_pp0_stage2_iter24)
    begin
                ap_block_pp0_stage2_subdone <= (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state75_pp0_stage2_iter24)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (gmem_ARREADY = ap_const_logic_0)));
    end process;


    ap_block_state109_io_assign_proc : process(gmem_AWREADY, first_iter_0_reg_307_pp0_iter35_reg)
    begin
                ap_block_state109_io <= ((first_iter_0_reg_307_pp0_iter35_reg = ap_const_lv1_1) and (gmem_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state110_io_assign_proc : process(gmem_WREADY, icmp_ln21_reg_1258_pp0_iter35_reg)
    begin
                ap_block_state110_io <= ((icmp_ln21_reg_1258_pp0_iter35_reg = ap_const_lv1_1) and (gmem_WREADY = ap_const_logic_0));
    end process;


    ap_block_state178_pp0_stage0_iter59_assign_proc : process(gmem_BVALID, icmp_ln10_reg_1268_pp0_iter58_reg)
    begin
                ap_block_state178_pp0_stage0_iter59 <= ((icmp_ln10_reg_1268_pp0_iter58_reg = ap_const_lv1_1) and (gmem_BVALID = ap_const_logic_0));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state73_pp0_stage0_iter24_assign_proc : process(gmem_RVALID)
    begin
                ap_block_state73_pp0_stage0_iter24 <= (gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state74_pp0_stage1_iter24_assign_proc : process(gmem_RVALID)
    begin
                ap_block_state74_pp0_stage1_iter24 <= (gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state75_pp0_stage2_iter24_assign_proc : process(gmem_RVALID)
    begin
                ap_block_state75_pp0_stage2_iter24 <= (gmem_RVALID = ap_const_logic_0);
    end process;


    ap_condition_1154_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_1154 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_1848_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln10_reg_1268, ap_block_pp0_stage0)
    begin
                ap_condition_1848 <= ((icmp_ln10_reg_1268 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_condition_1852_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln10_reg_1268, ap_block_pp0_stage0_11001)
    begin
                ap_condition_1852 <= ((icmp_ln10_reg_1268 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_1855_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
                ap_condition_1855 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, icmp_ln10_fu_638_p2)
    begin
        if (((icmp_ln10_fu_638_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter59_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter59, icmp_ln10_reg_1268_pp0_iter58_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln10_reg_1268_pp0_iter58_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter59 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter59_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter59_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter59_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter59_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45, ap_enable_reg_pp0_iter46, ap_enable_reg_pp0_iter47, ap_enable_reg_pp0_iter48, ap_enable_reg_pp0_iter49, ap_enable_reg_pp0_iter50, ap_enable_reg_pp0_iter51, ap_enable_reg_pp0_iter52, ap_enable_reg_pp0_iter53, ap_enable_reg_pp0_iter54, ap_enable_reg_pp0_iter55, ap_enable_reg_pp0_iter56, ap_enable_reg_pp0_iter57, ap_enable_reg_pp0_iter58, ap_enable_reg_pp0_iter59)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) 
    and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter59 = ap_const_logic_0) and (ap_enable_reg_pp0_iter58 = ap_const_logic_0) and (ap_enable_reg_pp0_iter57 = ap_const_logic_0) and (ap_enable_reg_pp0_iter56 = ap_const_logic_0) and (ap_enable_reg_pp0_iter55 = ap_const_logic_0) and (ap_enable_reg_pp0_iter54 = ap_const_logic_0) and (ap_enable_reg_pp0_iter53 = ap_const_logic_0) and (ap_enable_reg_pp0_iter52 = ap_const_logic_0) and (ap_enable_reg_pp0_iter51 = ap_const_logic_0) and (ap_enable_reg_pp0_iter50 = ap_const_logic_0) and (ap_enable_reg_pp0_iter49 = ap_const_logic_0) and (ap_enable_reg_pp0_iter48 = ap_const_logic_0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_0) and (ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 
    = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to58_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45, ap_enable_reg_pp0_iter46, ap_enable_reg_pp0_iter47, ap_enable_reg_pp0_iter48, ap_enable_reg_pp0_iter49, ap_enable_reg_pp0_iter50, ap_enable_reg_pp0_iter51, ap_enable_reg_pp0_iter52, ap_enable_reg_pp0_iter53, ap_enable_reg_pp0_iter54, ap_enable_reg_pp0_iter55, ap_enable_reg_pp0_iter56, ap_enable_reg_pp0_iter57, ap_enable_reg_pp0_iter58)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) 
    and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter58 = ap_const_logic_0) and (ap_enable_reg_pp0_iter57 = ap_const_logic_0) and (ap_enable_reg_pp0_iter56 = ap_const_logic_0) and (ap_enable_reg_pp0_iter55 = ap_const_logic_0) and (ap_enable_reg_pp0_iter54 = ap_const_logic_0) and (ap_enable_reg_pp0_iter53 = ap_const_logic_0) and (ap_enable_reg_pp0_iter52 = ap_const_logic_0) and (ap_enable_reg_pp0_iter51 = ap_const_logic_0) and (ap_enable_reg_pp0_iter50 = ap_const_logic_0) and (ap_enable_reg_pp0_iter49 = ap_const_logic_0) and (ap_enable_reg_pp0_iter48 = ap_const_logic_0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_0) and (ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 
    = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0))) then 
            ap_idle_pp0_0to58 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to58 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to59_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45, ap_enable_reg_pp0_iter46, ap_enable_reg_pp0_iter47, ap_enable_reg_pp0_iter48, ap_enable_reg_pp0_iter49, ap_enable_reg_pp0_iter50, ap_enable_reg_pp0_iter51, ap_enable_reg_pp0_iter52, ap_enable_reg_pp0_iter53, ap_enable_reg_pp0_iter54, ap_enable_reg_pp0_iter55, ap_enable_reg_pp0_iter56, ap_enable_reg_pp0_iter57, ap_enable_reg_pp0_iter58, ap_enable_reg_pp0_iter59)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) 
    and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter59 = ap_const_logic_0) and (ap_enable_reg_pp0_iter58 = ap_const_logic_0) and (ap_enable_reg_pp0_iter57 = ap_const_logic_0) and (ap_enable_reg_pp0_iter56 = ap_const_logic_0) and (ap_enable_reg_pp0_iter55 = ap_const_logic_0) and (ap_enable_reg_pp0_iter54 = ap_const_logic_0) and (ap_enable_reg_pp0_iter53 = ap_const_logic_0) and (ap_enable_reg_pp0_iter52 = ap_const_logic_0) and (ap_enable_reg_pp0_iter51 = ap_const_logic_0) and (ap_enable_reg_pp0_iter50 = ap_const_logic_0) and (ap_enable_reg_pp0_iter49 = ap_const_logic_0) and (ap_enable_reg_pp0_iter48 = ap_const_logic_0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_0) and (ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 
    = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0))) then 
            ap_idle_pp0_1to59 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to59 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_loop_exit_ready_delayed_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, ap_condition_exit_pp0_iter0_stage2_pp0_iter36_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2_pp0_iter36_reg) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_loop_exit_ready_delayed <= ap_const_logic_1;
        else 
            ap_loop_exit_ready_delayed <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_icmp_ln137_phi_fu_323_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln13_reg_1263, ap_loop_init, ap_condition_1848)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
            if ((ap_const_boolean_1 = ap_condition_1848)) then 
                ap_phi_mux_icmp_ln137_phi_fu_323_p4 <= icmp_ln13_reg_1263;
            elsif ((ap_loop_init = ap_const_logic_1)) then 
                ap_phi_mux_icmp_ln137_phi_fu_323_p4 <= ap_const_lv1_0;
            else 
                ap_phi_mux_icmp_ln137_phi_fu_323_p4 <= icmp_ln13_reg_1263;
            end if;
        else 
            ap_phi_mux_icmp_ln137_phi_fu_323_p4 <= icmp_ln13_reg_1263;
        end if; 
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_add_ln108_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, add_ln108_fu_226)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_add_ln108_load <= ap_const_lv9_1;
        else 
            ap_sig_allocacmp_add_ln108_load <= add_ln108_fu_226;
        end if; 
    end process;


    ap_sig_allocacmp_i3_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, i3_fu_210)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i3_load <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_i3_load <= i3_fu_210;
        end if; 
    end process;


    ap_sig_allocacmp_jj4_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, jj4_fu_214)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_jj4_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_jj4_load <= jj4_fu_214;
        end if; 
    end process;

    b_fu_724_p1 <= lshr_ln15_2_fu_719_p2(8 - 1 downto 0);
    data_1_fu_736_p1 <= grp_fu_334_p1;
    data_fu_999_p1 <= dc_1_reg_1406;
    dc_1_fu_945_p10 <= ((and_ln24_fu_890_p2 & xor_ln24_fu_902_p2) & and_ln19_1_fu_929_p2);
    dc_1_fu_945_p4 <= t_4_fu_870_p4;
    dc_1_fu_945_p8 <= t_3_fu_791_p3;
    dc_1_fu_945_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    empty_22_fu_426_p2 <= std_logic_vector(unsigned(p_shl_fu_406_p3) - unsigned(p_shl29_fu_422_p1));
    g_fu_700_p1 <= lshr_ln15_1_fu_695_p2(8 - 1 downto 0);

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, sext_ln15_fu_535_p1, sext_ln15_1_fu_601_p1, sext_ln15_2_fu_654_p1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gmem_ARADDR <= sext_ln15_2_fu_654_p1;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            gmem_ARADDR <= sext_ln15_1_fu_601_p1;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            gmem_ARADDR <= sext_ln15_fu_535_p1;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    gmem_ARLEN <= ap_const_lv64_1(32 - 1 downto 0);

    gmem_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    gmem_AWLEN <= ap_const_lv64_12C0(32 - 1 downto 0);

    gmem_AWVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter36, first_iter_0_reg_307_pp0_iter35_reg, ap_block_pp0_stage0_11001)
    begin
        if (((first_iter_0_reg_307_pp0_iter35_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter59, icmp_ln10_reg_1268_pp0_iter58_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln10_reg_1268_pp0_iter58_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter59 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter24, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_enable_reg_pp0_iter36, ap_CS_fsm_pp0_stage1, icmp_ln21_reg_1258_pp0_iter35_reg, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln21_reg_1258_pp0_iter35_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, m_axi_gmem_ARREADY, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter36, first_iter_0_reg_307_pp0_iter35_reg, m_axi_gmem_AWREADY, ap_block_pp0_stage0)
    begin
        if (((first_iter_0_reg_307_pp0_iter35_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter59, icmp_ln10_reg_1268_pp0_iter58_reg, m_axi_gmem_BVALID, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_1268_pp0_iter58_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter59 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter24, ap_CS_fsm_pp0_stage2, m_axi_gmem_RVALID, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter36, m_axi_gmem_WREADY, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, icmp_ln21_reg_1258_pp0_iter35_reg)
    begin
        if (((icmp_ln21_reg_1258_pp0_iter35_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_331_ce_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_331_ce <= ap_const_logic_1;
        else 
            grp_fu_331_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_334_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_334_ce <= ap_const_logic_1;
        else 
            grp_fu_334_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_337_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_337_ce <= ap_const_logic_1;
        else 
            grp_fu_337_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_337_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter31, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage2, mul_reg_1338, add_reg_1353)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1))) then 
            grp_fu_337_p0 <= add_reg_1353;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_1))) then 
            grp_fu_337_p0 <= mul_reg_1338;
        else 
            grp_fu_337_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_337_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter31, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage2, mul1_reg_1343, mul2_reg_1348_pp0_iter31_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1))) then 
            grp_fu_337_p1 <= mul2_reg_1348_pp0_iter31_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_1))) then 
            grp_fu_337_p1 <= mul1_reg_1343;
        else 
            grp_fu_337_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_341_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_341_ce <= ap_const_logic_1;
        else 
            grp_fu_341_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_341_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage2, conv_reg_1323, conv1_reg_1328, conv2_reg_1333)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            grp_fu_341_p0 <= conv2_reg_1333;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1))) then 
            grp_fu_341_p0 <= conv1_reg_1328;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1))) then 
            grp_fu_341_p0 <= conv_reg_1323;
        else 
            grp_fu_341_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_341_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            grp_fu_341_p1 <= ap_const_lv64_3FBD2F1A9FBE76C9;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1))) then 
            grp_fu_341_p1 <= ap_const_lv64_3FE2C8B439581062;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1))) then 
            grp_fu_341_p1 <= ap_const_lv64_3FD322D0E5604189;
        else 
            grp_fu_341_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_348_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_348_ce <= ap_const_logic_1;
        else 
            grp_fu_348_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_348_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln20_fu_704_p1, zext_ln20_1_fu_728_p1, zext_ln20_2_fu_732_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter25 = ap_const_logic_1))) then 
            grp_fu_348_p0 <= zext_ln20_2_fu_732_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_1))) then 
            grp_fu_348_p0 <= zext_ln20_1_fu_728_p1;
        elsif (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_348_p0 <= zext_ln20_fu_704_p1;
        else 
            grp_fu_348_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_398_p3 <= 
        ap_sig_allocacmp_add_ln108_load when (ap_phi_mux_icmp_ln137_phi_fu_323_p4(0) = '1') else 
        ap_sig_allocacmp_i3_load;
    icmp_ln10_fu_638_p2 <= "1" when (indvar_flatten2_fu_206 = ap_const_lv19_4AFFF) else "0";
    icmp_ln13_fu_632_p2 <= "1" when (j_fu_626_p2 = ap_const_lv10_280) else "0";
    icmp_ln18_fu_781_p2 <= "1" when (unsigned(xs_exp_reg_1382) < unsigned(ap_const_lv11_3FF)) else "0";
    icmp_ln19_1_fu_913_p2 <= "0" when (xs_exp_reg_1382 = ap_const_lv11_0) else "1";
    icmp_ln19_fu_908_p2 <= "0" when (xs_sig_reg_1390 = ap_const_lv52_0) else "1";
    icmp_ln21_fu_611_p2 <= "1" when (trunc_ln13_fu_597_p1 = ap_const_lv6_3F) else "0";
    icmp_ln24_fu_786_p2 <= "1" when (unsigned(xs_exp_reg_1382) > unsigned(ap_const_lv11_433)) else "0";
    index_fu_762_p4 <= data_1_fu_736_p1(57 downto 52);
    j_fu_626_p2 <= std_logic_vector(unsigned(select_ln10_1_fu_589_p3) + unsigned(ap_const_lv10_1));
    jj_fu_486_p2 <= std_logic_vector(unsigned(select_ln10_fu_390_p3) + unsigned(ap_const_lv11_3));
    lshr_ln15_1_fu_695_p2 <= std_logic_vector(shift_right(unsigned(gmem_addr_2_read_reg_1288),to_integer(unsigned('0' & zext_ln15_1_fu_691_p1(31-1 downto 0)))));
    lshr_ln15_2_fu_719_p2 <= std_logic_vector(shift_right(unsigned(gmem_addr_3_read_reg_1298),to_integer(unsigned('0' & zext_ln15_2_fu_715_p1(31-1 downto 0)))));
    lshr_ln15_fu_675_p2 <= std_logic_vector(shift_right(unsigned(gmem_addr_1_read_reg_1278),to_integer(unsigned('0' & zext_ln15_fu_671_p1(31-1 downto 0)))));
    lshr_ln71_fu_1074_p2 <= std_logic_vector(shift_right(unsigned(zext_ln68_fu_1026_p1),to_integer(unsigned('0' & zext_ln71_fu_1070_p1(31-1 downto 0)))));
    mantissa_fu_1016_p4 <= ((ap_const_lv1_1 & trunc_ln505_fu_1012_p1) & ap_const_lv1_0);
    mask_table_address0 <= zext_ln32_fu_772_p1(6 - 1 downto 0);

    mask_table_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter35, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter35 = ap_const_logic_1))) then 
            mask_table_ce0_local <= ap_const_logic_1;
        else 
            mask_table_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    or_ln19_fu_918_p2 <= (icmp_ln19_fu_908_p2 or icmp_ln19_1_fu_913_p2);
    or_ln24_fu_896_p2 <= (icmp_ln24_fu_786_p2 or icmp_ln18_fu_781_p2);
    or_ln_fu_1114_p3 <= (select_ln71_1_fu_1106_p3 & select_ln10_2_fu_991_p3);
    p_cast5_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_513_p3),64));
    p_cast_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_22_fu_426_p2),64));
    p_shl29_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_414_p3),20));
    p_shl_fu_406_p3 <= (i_fu_398_p3 & ap_const_lv11_0);
    r_fu_680_p1 <= lshr_ln15_fu_675_p2(8 - 1 downto 0);
    select_ln10_1_fu_589_p3 <= 
        ap_const_lv10_0 when (icmp_ln137_reg_320(0) = '1') else 
        j5_fu_218;
    select_ln10_2_fu_991_p3 <= 
        ap_const_lv504_lc_1 when (icmp_ln137_reg_320_pp0_iter35_reg(0) = '1') else 
        phi_ln216_fu_222;
    select_ln10_fu_390_p3 <= 
        ap_const_lv11_0 when (ap_phi_mux_icmp_ln137_phi_fu_323_p4(0) = '1') else 
        ap_sig_allocacmp_jj4_load;
    select_ln21_fu_1140_p3 <= 
        ap_const_lv504_lc_1 when (icmp_ln21_reg_1258_pp0_iter35_reg(0) = '1') else 
        tmp_6_fu_1132_p3;
    select_ln71_1_fu_1106_p3 <= 
        tmp_9_fu_1086_p4 when (tmp_7_fu_1040_p3(0) = '1') else 
        tmp_s_fu_1096_p4;
    select_ln71_fu_1058_p3 <= 
        sext_ln71_fu_1054_p1 when (tmp_7_fu_1040_p3(0) = '1') else 
        add_ln486_fu_1034_p2;
        sext_ln10_fu_977_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_968_p4),64));

        sext_ln15_1_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln15_5_reg_1232),64));

        sext_ln15_2_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln15_7_reg_1242),64));

        sext_ln15_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln15_1_reg_1216),64));

        sext_ln71_1_fu_1066_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln71_fu_1058_p3),32));

        sext_ln71_fu_1054_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln71_fu_1048_p2),12));

    shl_ln15_1_fu_684_p3 <= (trunc_ln15_3_reg_1237_pp0_iter24_reg & ap_const_lv3_0);
    shl_ln15_2_fu_708_p3 <= (trunc_ln15_6_reg_1247_pp0_iter24_reg & ap_const_lv3_0);
    shl_ln71_fu_1080_p2 <= std_logic_vector(shift_left(unsigned(zext_ln68_fu_1026_p1),to_integer(unsigned('0' & zext_ln71_fu_1070_p1(31-1 downto 0)))));
    shl_ln_fu_664_p3 <= (trunc_ln15_reg_1221_pp0_iter24_reg & ap_const_lv3_0);
    sub_ln71_fu_1048_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(xs_exp_4_fu_1002_p4));
    t_3_fu_791_p3 <= (xs_sign_reg_1373 & ap_const_lv63_0);
    t_4_fu_870_p4 <= ((xs_sign_2_fu_841_p2 & xs_exp_2_fu_846_p3) & xs_sig_3_fu_864_p2);
    t_fu_806_p3 <= (ap_const_lv1_1 & trunc_ln479_reg_1401);
    tmp_2_fu_513_p3 <= (tmp_1_reg_1200 & ap_const_lv1_1);
    tmp_4_fu_1122_p4 <= select_ln10_2_fu_991_p3(503 downto 8);
    tmp_5_fu_524_p3 <= (tmp_3_reg_1205 & ap_const_lv2_2);
    tmp_6_fu_1132_p3 <= (select_ln71_1_fu_1106_p3 & tmp_4_fu_1122_p4);
    tmp_7_fu_1040_p3 <= add_ln486_fu_1034_p2(11 downto 11);
    tmp_9_fu_1086_p4 <= lshr_ln71_fu_1074_p2(60 downto 53);
    tmp_fu_414_p3 <= (i_fu_398_p3 & ap_const_lv7_0);
    tmp_s_fu_1096_p4 <= shl_ln71_fu_1080_p2(60 downto 53);
    trunc_ln13_fu_597_p1 <= select_ln10_1_fu_589_p3(6 - 1 downto 0);
    trunc_ln15_3_fu_560_p1 <= add_ln15_2_fu_545_p2(6 - 1 downto 0);
    trunc_ln15_6_fu_579_p1 <= add_ln15_3_fu_564_p2(6 - 1 downto 0);
    trunc_ln15_fu_482_p1 <= add_ln15_1_fu_466_p2(6 - 1 downto 0);
    trunc_ln479_fu_777_p1 <= data_1_fu_736_p1(63 - 1 downto 0);
    trunc_ln505_fu_1012_p1 <= data_fu_999_p1(52 - 1 downto 0);
    trunc_ln_fu_968_p4 <= output_image_read_reg_1195_pp0_iter35_reg(63 downto 6);
    xor_ln18_fu_884_p2 <= (icmp_ln18_fu_781_p2 xor ap_const_lv1_1);
    xor_ln24_fu_902_p2 <= (or_ln24_fu_896_p2 xor ap_const_lv1_1);
    xor_ln39_fu_858_p2 <= (mask_table_q0 xor ap_const_lv52_FFFFFFFFFFFFF);
    xs_exp_1_fu_827_p4 <= add_ln36_fu_813_p2(62 downto 52);
    xs_exp_2_fu_846_p3 <= 
        xs_exp_1_fu_827_p4 when (xs_sign_reg_1373(0) = '1') else 
        xs_exp_reg_1382;
    xs_exp_4_fu_1002_p4 <= data_fu_999_p1(62 downto 52);
    xs_sig_1_fu_837_p1 <= add_ln36_fu_813_p2(52 - 1 downto 0);
    xs_sig_2_fu_852_p3 <= 
        xs_sig_1_fu_837_p1 when (xs_sign_reg_1373(0) = '1') else 
        xs_sig_reg_1390;
    xs_sig_3_fu_864_p2 <= (xs_sig_2_fu_852_p3 and xor_ln39_fu_858_p2);
    xs_sig_fu_758_p1 <= data_1_fu_736_p1(52 - 1 downto 0);
    xs_sign_1_fu_819_p3 <= add_ln36_fu_813_p2(63 downto 63);
    xs_sign_2_fu_841_p2 <= (xs_sign_reg_1373 and xs_sign_1_fu_819_p3);
    zext_ln13_1_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln10_fu_390_p3),64));
    zext_ln13_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_524_p3),64));
    zext_ln15_1_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln15_1_fu_684_p3),512));
    zext_ln15_2_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln15_2_fu_708_p3),512));
    zext_ln15_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_664_p3),512));
    zext_ln20_1_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(g_reg_1293),32));
    zext_ln20_2_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_reg_1308),32));
    zext_ln20_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_reg_1283),32));
    zext_ln28_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mask_table_q0),64));
    zext_ln32_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_fu_762_p4),64));
    zext_ln486_fu_1030_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_4_fu_1002_p4),12));
    zext_ln68_fu_1026_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_1016_p4),113));
    zext_ln71_fu_1070_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln71_1_fu_1066_p1),113));
end behav;
