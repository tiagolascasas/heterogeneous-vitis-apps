-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cluster_cluster_Pipeline_VITIS_LOOP_137_1_VITIS_LOOP_140_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sub2_i : IN STD_LOGIC_VECTOR (31 downto 0);
    bound149 : IN STD_LOGIC_VECTOR (63 downto 0);
    sext_ln137_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    integralImg_w_cast : IN STD_LOGIC_VECTOR (31 downto 0);
    integralImg_data : IN STD_LOGIC_VECTOR (63 downto 0);
    sext_ln137 : IN STD_LOGIC_VECTOR (31 downto 0);
    retSAD_data : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_889_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_889_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_889_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_889_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_889_p_ce : OUT STD_LOGIC );
end;


architecture behav of cluster_cluster_Pipeline_VITIS_LOOP_137_1_VITIS_LOOP_140_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv31_2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state76_pp0_stage3_iter18 : BOOLEAN;
    signal ap_block_state168_pp0_stage3_iter41 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal icmp_ln137_reg_777 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage3 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal gmem_blk_n_AW : STD_LOGIC;
    signal gmem_blk_n_W : STD_LOGIC;
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_state77_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln137_cast_fu_217_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal sext_ln137_cast_reg_748 : STD_LOGIC_VECTOR (61 downto 0);
    signal integralImg_w_cast_cast_fu_221_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal integralImg_w_cast_cast_reg_753 : STD_LOGIC_VECTOR (61 downto 0);
    signal sext_ln137_1_cast_fu_225_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln137_1_cast_reg_759 : STD_LOGIC_VECTOR (32 downto 0);
    signal i_2_reg_765 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state78_pp0_stage1_iter19 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln140_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln140_reg_770 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln137_fu_275_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_reg_781 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state79_pp0_stage2_iter19 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal select_ln137_reg_781_pp0_iter1_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_reg_781_pp0_iter2_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_reg_781_pp0_iter3_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_reg_781_pp0_iter4_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_reg_781_pp0_iter5_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_reg_781_pp0_iter6_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_reg_781_pp0_iter7_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_reg_781_pp0_iter8_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_reg_781_pp0_iter9_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_reg_781_pp0_iter10_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_reg_781_pp0_iter11_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_reg_781_pp0_iter12_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_reg_781_pp0_iter13_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_reg_781_pp0_iter14_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_reg_781_pp0_iter15_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_reg_781_pp0_iter16_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_reg_781_pp0_iter17_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_reg_781_pp0_iter18_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_reg_781_pp0_iter19_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_reg_781_pp0_iter20_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_reg_781_pp0_iter21_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_reg_781_pp0_iter22_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_reg_781_pp0_iter23_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln144_fu_213_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal mul_ln144_reg_787 : STD_LOGIC_VECTOR (61 downto 0);
    signal j_load_reg_793 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal indvars_iv_next16_i24162_fu_298_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvars_iv_next16_i24162_reg_798 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_2_fu_304_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_2_reg_803 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_2_reg_803_pp0_iter1_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_2_reg_803_pp0_iter2_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_2_reg_803_pp0_iter3_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_2_reg_803_pp0_iter4_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_2_reg_803_pp0_iter5_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_2_reg_803_pp0_iter6_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_2_reg_803_pp0_iter7_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_2_reg_803_pp0_iter8_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_2_reg_803_pp0_iter9_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_2_reg_803_pp0_iter10_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_2_reg_803_pp0_iter11_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_2_reg_803_pp0_iter12_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_2_reg_803_pp0_iter13_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_2_reg_803_pp0_iter14_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_2_reg_803_pp0_iter15_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_2_reg_803_pp0_iter16_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_2_reg_803_pp0_iter17_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_2_reg_803_pp0_iter18_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_2_reg_803_pp0_iter19_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_2_reg_803_pp0_iter20_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_2_reg_803_pp0_iter21_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_2_reg_803_pp0_iter22_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_2_reg_803_pp0_iter23_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal p_cast27_fu_320_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_cast27_reg_808 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln144_2_reg_813 : STD_LOGIC_VECTOR (60 downto 0);
    signal trunc_ln144_fu_352_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln144_reg_818 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln144_reg_818_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln144_reg_818_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln144_reg_818_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln144_reg_818_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln144_reg_818_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln144_reg_818_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln144_reg_818_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln144_reg_818_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln144_reg_818_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln144_reg_818_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln144_reg_818_pp0_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln144_reg_818_pp0_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln144_reg_818_pp0_iter13_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln144_reg_818_pp0_iter14_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln144_reg_818_pp0_iter15_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln144_reg_818_pp0_iter16_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln144_reg_818_pp0_iter17_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln144_reg_818_pp0_iter18_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_209_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal mul_ln145_reg_823 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln145_2_reg_835 : STD_LOGIC_VECTOR (60 downto 0);
    signal trunc_ln145_fu_429_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln145_reg_840 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln145_reg_840_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln145_reg_840_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln145_reg_840_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln145_reg_840_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln145_reg_840_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln145_reg_840_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln145_reg_840_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln145_reg_840_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln145_reg_840_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln145_reg_840_pp0_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln145_reg_840_pp0_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln145_reg_840_pp0_iter13_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln145_reg_840_pp0_iter14_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln145_reg_840_pp0_iter15_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln145_reg_840_pp0_iter16_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln145_reg_840_pp0_iter17_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln145_reg_840_pp0_iter18_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln145_reg_840_pp0_iter19_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln146_fu_433_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln146_reg_845 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln147_2_reg_850 : STD_LOGIC_VECTOR (60 downto 0);
    signal trunc_ln147_fu_465_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln147_reg_855 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln147_reg_855_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln147_reg_855_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln147_reg_855_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln147_reg_855_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln147_reg_855_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln147_reg_855_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln147_reg_855_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln147_reg_855_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln147_reg_855_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln147_reg_855_pp0_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln147_reg_855_pp0_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln147_reg_855_pp0_iter13_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln147_reg_855_pp0_iter14_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln147_reg_855_pp0_iter15_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln147_reg_855_pp0_iter16_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln147_reg_855_pp0_iter17_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln147_reg_855_pp0_iter18_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln147_reg_855_pp0_iter19_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln146_2_reg_866 : STD_LOGIC_VECTOR (60 downto 0);
    signal trunc_ln146_fu_501_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln146_reg_871 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln146_reg_871_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln146_reg_871_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln146_reg_871_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln146_reg_871_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln146_reg_871_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln146_reg_871_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln146_reg_871_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln146_reg_871_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln146_reg_871_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln146_reg_871_pp0_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln146_reg_871_pp0_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln146_reg_871_pp0_iter13_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln146_reg_871_pp0_iter14_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln146_reg_871_pp0_iter15_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln146_reg_871_pp0_iter16_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln146_reg_871_pp0_iter17_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln146_reg_871_pp0_iter18_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln146_reg_871_pp0_iter19_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_addr_read_reg_888 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln144_1_fu_541_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln144_1_reg_893 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_6_read_reg_898 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln145_1_fu_561_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln145_1_reg_903 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_7_read_reg_908 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln144_fu_565_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln145_fu_569_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln146_1_fu_589_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln146_1_reg_923 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln146_1_reg_923_pp0_iter20_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_8_read_reg_928 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln147_1_fu_609_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln147_1_reg_933 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln147_1_reg_933_pp0_iter20_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln147_1_reg_933_pp0_iter21_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add13_i_reg_938 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln146_fu_613_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub20_i1_reg_948 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln147_fu_617_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub27_i_reg_958 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln143_fu_628_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln143_reg_963 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln143_fu_646_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln143_reg_968 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln143_fu_654_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln143_reg_973 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln143_1_reg_978 : STD_LOGIC_VECTOR (60 downto 0);
    signal shl_ln143_1_fu_688_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln143_1_reg_983 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal sext_ln144_fu_391_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln145_fu_469_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln146_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln147_fu_515_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln143_fu_694_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3_01001 : BOOLEAN;
    signal i_fu_88 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal add_ln145_fu_356_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_92 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal indvar_flatten154_fu_96 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln137_fu_264_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_205_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_205_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_209_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln145_fu_361_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln140_1_fu_624_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_209_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln144_fu_213_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln140_3_fu_250_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln140_2_fu_281_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln144_fu_285_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln137_1_fu_311_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal empty_fu_315_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln144_1_fu_324_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal shl_ln_fu_329_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln144_2_fu_337_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv_next16_i24_mid1_fu_376_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln137_1_fu_381_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln140_fu_387_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln145_1_fu_401_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal shl_ln1_fu_406_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln145_2_fu_414_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln147_fu_437_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal shl_ln3_fu_442_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln147_1_fu_450_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln2_fu_479_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln146_1_fu_486_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln144_1_fu_525_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln144_fu_532_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln144_fu_536_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln145_1_fu_545_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln145_1_fu_552_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln145_fu_556_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln146_1_fu_573_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln146_fu_580_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln146_fu_584_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln147_1_fu_593_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln147_fu_600_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln147_fu_604_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln137_fu_621_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal shl_ln4_fu_634_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln143_1_fu_641_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_1_fu_650_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln143_fu_670_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln143_2_fu_677_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln143_fu_673_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_2_fu_684_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_205_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_block_pp0_stage3_00001 : BOOLEAN;
    signal grp_fu_205_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter31_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter32_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter33_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter34_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter35_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter36_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter37_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter38_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter39_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter40_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to41 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_1275 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component cluster_faddfsub_32ns_32ns_32_6_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cluster_mul_31ns_32s_62_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (61 downto 0) );
    end component;


    component cluster_mul_33s_32s_62_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (61 downto 0) );
    end component;


    component cluster_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_31ns_32s_62_1_1_U53 : component cluster_mul_31ns_32s_62_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 32,
        dout_WIDTH => 62)
    port map (
        din0 => grp_fu_209_p0,
        din1 => grp_fu_209_p1,
        dout => grp_fu_209_p2);

    mul_33s_32s_62_1_1_U54 : component cluster_mul_33s_32s_62_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 32,
        dout_WIDTH => 62)
    port map (
        din0 => add_ln144_fu_285_p2,
        din1 => mul_ln144_fu_213_p1,
        dout => mul_ln144_fu_213_p2);

    flow_control_loop_pipe_sequential_init_U : component cluster_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage3,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_loop_exit_ready_pp0_iter40_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_fu_88 <= ap_const_lv31_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln137_reg_777 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                i_fu_88 <= add_ln145_fu_356_p2;
            end if; 
        end if;
    end process;

    indvar_flatten154_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten154_fu_96 <= ap_const_lv64_0;
            elsif (((icmp_ln137_fu_259_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                indvar_flatten154_fu_96 <= add_ln137_fu_264_p2;
            end if; 
        end if;
    end process;

    j_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_fu_92 <= ap_const_lv31_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln137_reg_777 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                j_fu_92 <= select_ln137_2_fu_304_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add13_i_reg_938 <= grp_fu_889_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln143_reg_963 <= add_ln143_fu_628_p2;
                add_ln146_reg_845 <= add_ln146_fu_433_p2;
                gmem_addr_6_read_reg_898 <= m_axi_gmem_RDATA;
                integralImg_w_cast_cast_reg_753 <= integralImg_w_cast_cast_fu_221_p1;
                sext_ln137_1_cast_reg_759 <= sext_ln137_1_cast_fu_225_p1;
                sext_ln137_cast_reg_748 <= sext_ln137_cast_fu_217_p1;
                trunc_ln144_1_reg_893 <= trunc_ln144_1_fu_541_p1;
                trunc_ln145_2_reg_835 <= add_ln145_2_fu_414_p2(63 downto 3);
                trunc_ln145_reg_840 <= trunc_ln145_fu_429_p1;
                trunc_ln145_reg_840_pp0_iter10_reg <= trunc_ln145_reg_840_pp0_iter9_reg;
                trunc_ln145_reg_840_pp0_iter11_reg <= trunc_ln145_reg_840_pp0_iter10_reg;
                trunc_ln145_reg_840_pp0_iter12_reg <= trunc_ln145_reg_840_pp0_iter11_reg;
                trunc_ln145_reg_840_pp0_iter13_reg <= trunc_ln145_reg_840_pp0_iter12_reg;
                trunc_ln145_reg_840_pp0_iter14_reg <= trunc_ln145_reg_840_pp0_iter13_reg;
                trunc_ln145_reg_840_pp0_iter15_reg <= trunc_ln145_reg_840_pp0_iter14_reg;
                trunc_ln145_reg_840_pp0_iter16_reg <= trunc_ln145_reg_840_pp0_iter15_reg;
                trunc_ln145_reg_840_pp0_iter17_reg <= trunc_ln145_reg_840_pp0_iter16_reg;
                trunc_ln145_reg_840_pp0_iter18_reg <= trunc_ln145_reg_840_pp0_iter17_reg;
                trunc_ln145_reg_840_pp0_iter19_reg <= trunc_ln145_reg_840_pp0_iter18_reg;
                trunc_ln145_reg_840_pp0_iter2_reg <= trunc_ln145_reg_840;
                trunc_ln145_reg_840_pp0_iter3_reg <= trunc_ln145_reg_840_pp0_iter2_reg;
                trunc_ln145_reg_840_pp0_iter4_reg <= trunc_ln145_reg_840_pp0_iter3_reg;
                trunc_ln145_reg_840_pp0_iter5_reg <= trunc_ln145_reg_840_pp0_iter4_reg;
                trunc_ln145_reg_840_pp0_iter6_reg <= trunc_ln145_reg_840_pp0_iter5_reg;
                trunc_ln145_reg_840_pp0_iter7_reg <= trunc_ln145_reg_840_pp0_iter6_reg;
                trunc_ln145_reg_840_pp0_iter8_reg <= trunc_ln145_reg_840_pp0_iter7_reg;
                trunc_ln145_reg_840_pp0_iter9_reg <= trunc_ln145_reg_840_pp0_iter8_reg;
                trunc_ln147_2_reg_850 <= add_ln147_1_fu_450_p2(63 downto 3);
                trunc_ln147_reg_855 <= trunc_ln147_fu_465_p1;
                trunc_ln147_reg_855_pp0_iter10_reg <= trunc_ln147_reg_855_pp0_iter9_reg;
                trunc_ln147_reg_855_pp0_iter11_reg <= trunc_ln147_reg_855_pp0_iter10_reg;
                trunc_ln147_reg_855_pp0_iter12_reg <= trunc_ln147_reg_855_pp0_iter11_reg;
                trunc_ln147_reg_855_pp0_iter13_reg <= trunc_ln147_reg_855_pp0_iter12_reg;
                trunc_ln147_reg_855_pp0_iter14_reg <= trunc_ln147_reg_855_pp0_iter13_reg;
                trunc_ln147_reg_855_pp0_iter15_reg <= trunc_ln147_reg_855_pp0_iter14_reg;
                trunc_ln147_reg_855_pp0_iter16_reg <= trunc_ln147_reg_855_pp0_iter15_reg;
                trunc_ln147_reg_855_pp0_iter17_reg <= trunc_ln147_reg_855_pp0_iter16_reg;
                trunc_ln147_reg_855_pp0_iter18_reg <= trunc_ln147_reg_855_pp0_iter17_reg;
                trunc_ln147_reg_855_pp0_iter19_reg <= trunc_ln147_reg_855_pp0_iter18_reg;
                trunc_ln147_reg_855_pp0_iter2_reg <= trunc_ln147_reg_855;
                trunc_ln147_reg_855_pp0_iter3_reg <= trunc_ln147_reg_855_pp0_iter2_reg;
                trunc_ln147_reg_855_pp0_iter4_reg <= trunc_ln147_reg_855_pp0_iter3_reg;
                trunc_ln147_reg_855_pp0_iter5_reg <= trunc_ln147_reg_855_pp0_iter4_reg;
                trunc_ln147_reg_855_pp0_iter6_reg <= trunc_ln147_reg_855_pp0_iter5_reg;
                trunc_ln147_reg_855_pp0_iter7_reg <= trunc_ln147_reg_855_pp0_iter6_reg;
                trunc_ln147_reg_855_pp0_iter8_reg <= trunc_ln147_reg_855_pp0_iter7_reg;
                trunc_ln147_reg_855_pp0_iter9_reg <= trunc_ln147_reg_855_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
                ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
                ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
                ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
                ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
                ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
                ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
                ap_loop_exit_ready_pp0_iter37_reg <= ap_loop_exit_ready_pp0_iter36_reg;
                ap_loop_exit_ready_pp0_iter38_reg <= ap_loop_exit_ready_pp0_iter37_reg;
                ap_loop_exit_ready_pp0_iter39_reg <= ap_loop_exit_ready_pp0_iter38_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter40_reg <= ap_loop_exit_ready_pp0_iter39_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                gmem_addr_read_reg_888 <= m_axi_gmem_RDATA;
                indvars_iv_next16_i24162_reg_798 <= indvars_iv_next16_i24162_fu_298_p2;
                j_load_reg_793 <= j_fu_92;
                p_cast27_reg_808 <= p_cast27_fu_320_p1;
                select_ln137_2_reg_803 <= select_ln137_2_fu_304_p3;
                select_ln137_2_reg_803_pp0_iter10_reg <= select_ln137_2_reg_803_pp0_iter9_reg;
                select_ln137_2_reg_803_pp0_iter11_reg <= select_ln137_2_reg_803_pp0_iter10_reg;
                select_ln137_2_reg_803_pp0_iter12_reg <= select_ln137_2_reg_803_pp0_iter11_reg;
                select_ln137_2_reg_803_pp0_iter13_reg <= select_ln137_2_reg_803_pp0_iter12_reg;
                select_ln137_2_reg_803_pp0_iter14_reg <= select_ln137_2_reg_803_pp0_iter13_reg;
                select_ln137_2_reg_803_pp0_iter15_reg <= select_ln137_2_reg_803_pp0_iter14_reg;
                select_ln137_2_reg_803_pp0_iter16_reg <= select_ln137_2_reg_803_pp0_iter15_reg;
                select_ln137_2_reg_803_pp0_iter17_reg <= select_ln137_2_reg_803_pp0_iter16_reg;
                select_ln137_2_reg_803_pp0_iter18_reg <= select_ln137_2_reg_803_pp0_iter17_reg;
                select_ln137_2_reg_803_pp0_iter19_reg <= select_ln137_2_reg_803_pp0_iter18_reg;
                select_ln137_2_reg_803_pp0_iter1_reg <= select_ln137_2_reg_803;
                select_ln137_2_reg_803_pp0_iter20_reg <= select_ln137_2_reg_803_pp0_iter19_reg;
                select_ln137_2_reg_803_pp0_iter21_reg <= select_ln137_2_reg_803_pp0_iter20_reg;
                select_ln137_2_reg_803_pp0_iter22_reg <= select_ln137_2_reg_803_pp0_iter21_reg;
                select_ln137_2_reg_803_pp0_iter23_reg <= select_ln137_2_reg_803_pp0_iter22_reg;
                select_ln137_2_reg_803_pp0_iter2_reg <= select_ln137_2_reg_803_pp0_iter1_reg;
                select_ln137_2_reg_803_pp0_iter3_reg <= select_ln137_2_reg_803_pp0_iter2_reg;
                select_ln137_2_reg_803_pp0_iter4_reg <= select_ln137_2_reg_803_pp0_iter3_reg;
                select_ln137_2_reg_803_pp0_iter5_reg <= select_ln137_2_reg_803_pp0_iter4_reg;
                select_ln137_2_reg_803_pp0_iter6_reg <= select_ln137_2_reg_803_pp0_iter5_reg;
                select_ln137_2_reg_803_pp0_iter7_reg <= select_ln137_2_reg_803_pp0_iter6_reg;
                select_ln137_2_reg_803_pp0_iter8_reg <= select_ln137_2_reg_803_pp0_iter7_reg;
                select_ln137_2_reg_803_pp0_iter9_reg <= select_ln137_2_reg_803_pp0_iter8_reg;
                trunc_ln144_2_reg_813 <= add_ln144_2_fu_337_p2(63 downto 3);
                trunc_ln144_reg_818 <= trunc_ln144_fu_352_p1;
                trunc_ln144_reg_818_pp0_iter10_reg <= trunc_ln144_reg_818_pp0_iter9_reg;
                trunc_ln144_reg_818_pp0_iter11_reg <= trunc_ln144_reg_818_pp0_iter10_reg;
                trunc_ln144_reg_818_pp0_iter12_reg <= trunc_ln144_reg_818_pp0_iter11_reg;
                trunc_ln144_reg_818_pp0_iter13_reg <= trunc_ln144_reg_818_pp0_iter12_reg;
                trunc_ln144_reg_818_pp0_iter14_reg <= trunc_ln144_reg_818_pp0_iter13_reg;
                trunc_ln144_reg_818_pp0_iter15_reg <= trunc_ln144_reg_818_pp0_iter14_reg;
                trunc_ln144_reg_818_pp0_iter16_reg <= trunc_ln144_reg_818_pp0_iter15_reg;
                trunc_ln144_reg_818_pp0_iter17_reg <= trunc_ln144_reg_818_pp0_iter16_reg;
                trunc_ln144_reg_818_pp0_iter18_reg <= trunc_ln144_reg_818_pp0_iter17_reg;
                trunc_ln144_reg_818_pp0_iter1_reg <= trunc_ln144_reg_818;
                trunc_ln144_reg_818_pp0_iter2_reg <= trunc_ln144_reg_818_pp0_iter1_reg;
                trunc_ln144_reg_818_pp0_iter3_reg <= trunc_ln144_reg_818_pp0_iter2_reg;
                trunc_ln144_reg_818_pp0_iter4_reg <= trunc_ln144_reg_818_pp0_iter3_reg;
                trunc_ln144_reg_818_pp0_iter5_reg <= trunc_ln144_reg_818_pp0_iter4_reg;
                trunc_ln144_reg_818_pp0_iter6_reg <= trunc_ln144_reg_818_pp0_iter5_reg;
                trunc_ln144_reg_818_pp0_iter7_reg <= trunc_ln144_reg_818_pp0_iter6_reg;
                trunc_ln144_reg_818_pp0_iter8_reg <= trunc_ln144_reg_818_pp0_iter7_reg;
                trunc_ln144_reg_818_pp0_iter9_reg <= trunc_ln144_reg_818_pp0_iter8_reg;
                trunc_ln147_1_reg_933 <= trunc_ln147_1_fu_609_p1;
                trunc_ln147_1_reg_933_pp0_iter20_reg <= trunc_ln147_1_reg_933;
                trunc_ln147_1_reg_933_pp0_iter21_reg <= trunc_ln147_1_reg_933_pp0_iter20_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                gmem_addr_7_read_reg_908 <= m_axi_gmem_RDATA;
                i_2_reg_765 <= i_fu_88;
                icmp_ln137_reg_777 <= icmp_ln137_fu_259_p2;
                icmp_ln140_reg_770 <= icmp_ln140_fu_254_p2;
                shl_ln143_reg_973 <= shl_ln143_fu_654_p2;
                trunc_ln143_1_reg_978 <= add_ln143_1_fu_641_p2(63 downto 3);
                trunc_ln143_reg_968 <= trunc_ln143_fu_646_p1;
                trunc_ln145_1_reg_903 <= trunc_ln145_1_fu_561_p1;
                trunc_ln146_2_reg_866 <= add_ln146_1_fu_486_p2(63 downto 3);
                trunc_ln146_reg_871 <= trunc_ln146_fu_501_p1;
                trunc_ln146_reg_871_pp0_iter10_reg <= trunc_ln146_reg_871_pp0_iter9_reg;
                trunc_ln146_reg_871_pp0_iter11_reg <= trunc_ln146_reg_871_pp0_iter10_reg;
                trunc_ln146_reg_871_pp0_iter12_reg <= trunc_ln146_reg_871_pp0_iter11_reg;
                trunc_ln146_reg_871_pp0_iter13_reg <= trunc_ln146_reg_871_pp0_iter12_reg;
                trunc_ln146_reg_871_pp0_iter14_reg <= trunc_ln146_reg_871_pp0_iter13_reg;
                trunc_ln146_reg_871_pp0_iter15_reg <= trunc_ln146_reg_871_pp0_iter14_reg;
                trunc_ln146_reg_871_pp0_iter16_reg <= trunc_ln146_reg_871_pp0_iter15_reg;
                trunc_ln146_reg_871_pp0_iter17_reg <= trunc_ln146_reg_871_pp0_iter16_reg;
                trunc_ln146_reg_871_pp0_iter18_reg <= trunc_ln146_reg_871_pp0_iter17_reg;
                trunc_ln146_reg_871_pp0_iter19_reg <= trunc_ln146_reg_871_pp0_iter18_reg;
                trunc_ln146_reg_871_pp0_iter2_reg <= trunc_ln146_reg_871;
                trunc_ln146_reg_871_pp0_iter3_reg <= trunc_ln146_reg_871_pp0_iter2_reg;
                trunc_ln146_reg_871_pp0_iter4_reg <= trunc_ln146_reg_871_pp0_iter3_reg;
                trunc_ln146_reg_871_pp0_iter5_reg <= trunc_ln146_reg_871_pp0_iter4_reg;
                trunc_ln146_reg_871_pp0_iter6_reg <= trunc_ln146_reg_871_pp0_iter5_reg;
                trunc_ln146_reg_871_pp0_iter7_reg <= trunc_ln146_reg_871_pp0_iter6_reg;
                trunc_ln146_reg_871_pp0_iter8_reg <= trunc_ln146_reg_871_pp0_iter7_reg;
                trunc_ln146_reg_871_pp0_iter9_reg <= trunc_ln146_reg_871_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                gmem_addr_8_read_reg_928 <= m_axi_gmem_RDATA;
                mul_ln144_reg_787 <= mul_ln144_fu_213_p2;
                select_ln137_reg_781 <= select_ln137_fu_275_p3;
                select_ln137_reg_781_pp0_iter10_reg <= select_ln137_reg_781_pp0_iter9_reg;
                select_ln137_reg_781_pp0_iter11_reg <= select_ln137_reg_781_pp0_iter10_reg;
                select_ln137_reg_781_pp0_iter12_reg <= select_ln137_reg_781_pp0_iter11_reg;
                select_ln137_reg_781_pp0_iter13_reg <= select_ln137_reg_781_pp0_iter12_reg;
                select_ln137_reg_781_pp0_iter14_reg <= select_ln137_reg_781_pp0_iter13_reg;
                select_ln137_reg_781_pp0_iter15_reg <= select_ln137_reg_781_pp0_iter14_reg;
                select_ln137_reg_781_pp0_iter16_reg <= select_ln137_reg_781_pp0_iter15_reg;
                select_ln137_reg_781_pp0_iter17_reg <= select_ln137_reg_781_pp0_iter16_reg;
                select_ln137_reg_781_pp0_iter18_reg <= select_ln137_reg_781_pp0_iter17_reg;
                select_ln137_reg_781_pp0_iter19_reg <= select_ln137_reg_781_pp0_iter18_reg;
                select_ln137_reg_781_pp0_iter1_reg <= select_ln137_reg_781;
                select_ln137_reg_781_pp0_iter20_reg <= select_ln137_reg_781_pp0_iter19_reg;
                select_ln137_reg_781_pp0_iter21_reg <= select_ln137_reg_781_pp0_iter20_reg;
                select_ln137_reg_781_pp0_iter22_reg <= select_ln137_reg_781_pp0_iter21_reg;
                select_ln137_reg_781_pp0_iter23_reg <= select_ln137_reg_781_pp0_iter22_reg;
                select_ln137_reg_781_pp0_iter2_reg <= select_ln137_reg_781_pp0_iter1_reg;
                select_ln137_reg_781_pp0_iter3_reg <= select_ln137_reg_781_pp0_iter2_reg;
                select_ln137_reg_781_pp0_iter4_reg <= select_ln137_reg_781_pp0_iter3_reg;
                select_ln137_reg_781_pp0_iter5_reg <= select_ln137_reg_781_pp0_iter4_reg;
                select_ln137_reg_781_pp0_iter6_reg <= select_ln137_reg_781_pp0_iter5_reg;
                select_ln137_reg_781_pp0_iter7_reg <= select_ln137_reg_781_pp0_iter6_reg;
                select_ln137_reg_781_pp0_iter8_reg <= select_ln137_reg_781_pp0_iter7_reg;
                select_ln137_reg_781_pp0_iter9_reg <= select_ln137_reg_781_pp0_iter8_reg;
                shl_ln143_1_reg_983 <= shl_ln143_1_fu_688_p2;
                trunc_ln146_1_reg_923 <= trunc_ln146_1_fu_589_p1;
                trunc_ln146_1_reg_923_pp0_iter20_reg <= trunc_ln146_1_reg_923;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                mul_ln145_reg_823 <= grp_fu_209_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                sub20_i1_reg_948 <= grp_fu_889_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                sub27_i_reg_958 <= grp_fu_889_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to41, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to41 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln137_fu_264_p2 <= std_logic_vector(unsigned(indvar_flatten154_fu_96) + unsigned(ap_const_lv64_1));
    add_ln143_1_fu_641_p2 <= std_logic_vector(unsigned(shl_ln4_fu_634_p3) + unsigned(retSAD_data));
    add_ln143_fu_628_p2 <= std_logic_vector(unsigned(grp_fu_209_p2) + unsigned(zext_ln137_fu_621_p1));
    add_ln144_1_fu_324_p2 <= std_logic_vector(unsigned(mul_ln144_reg_787) + unsigned(p_cast27_fu_320_p1));
    add_ln144_2_fu_337_p2 <= std_logic_vector(unsigned(shl_ln_fu_329_p3) + unsigned(integralImg_data));
    add_ln144_fu_285_p2 <= std_logic_vector(unsigned(zext_ln140_2_fu_281_p1) + unsigned(sext_ln137_1_cast_reg_759));
    add_ln145_1_fu_401_p2 <= std_logic_vector(unsigned(mul_ln145_reg_823) + unsigned(zext_ln140_fu_387_p1));
    add_ln145_2_fu_414_p2 <= std_logic_vector(unsigned(shl_ln1_fu_406_p3) + unsigned(integralImg_data));
    add_ln145_fu_356_p2 <= std_logic_vector(unsigned(select_ln137_reg_781) + unsigned(ap_const_lv31_1));
    add_ln146_1_fu_486_p2 <= std_logic_vector(unsigned(shl_ln2_fu_479_p3) + unsigned(integralImg_data));
    add_ln146_fu_433_p2 <= std_logic_vector(unsigned(mul_ln145_reg_823) + unsigned(p_cast27_reg_808));
    add_ln147_1_fu_450_p2 <= std_logic_vector(unsigned(shl_ln3_fu_442_p3) + unsigned(integralImg_data));
    add_ln147_fu_437_p2 <= std_logic_vector(unsigned(mul_ln144_reg_787) + unsigned(zext_ln140_fu_387_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_00001_assign_proc : process(ap_enable_reg_pp0_iter19, ap_block_state77_pp0_stage0_iter19)
    begin
                ap_block_pp0_stage0_00001 <= ((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state77_pp0_stage0_iter19));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter19, ap_block_state5_io, ap_block_state77_pp0_stage0_iter19)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state77_pp0_stage0_iter19)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter19, ap_block_state5_io, ap_block_state77_pp0_stage0_iter19)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state77_pp0_stage0_iter19)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter19, m_axi_gmem_ARREADY, ap_block_state78_pp0_stage1_iter19)
    begin
                ap_block_pp0_stage1_11001 <= (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state78_pp0_stage1_iter19)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (m_axi_gmem_ARREADY = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter19, m_axi_gmem_ARREADY, ap_block_state78_pp0_stage1_iter19)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state78_pp0_stage1_iter19)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (m_axi_gmem_ARREADY = ap_const_logic_0)));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_00001_assign_proc : process(ap_enable_reg_pp0_iter19, ap_block_state79_pp0_stage2_iter19)
    begin
                ap_block_pp0_stage2_00001 <= ((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state79_pp0_stage2_iter19));
    end process;


    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter24, m_axi_gmem_AWREADY, m_axi_gmem_ARREADY, ap_block_state79_pp0_stage2_iter19)
    begin
                ap_block_pp0_stage2_11001 <= (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state79_pp0_stage2_iter19)) or ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (m_axi_gmem_AWREADY = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (m_axi_gmem_ARREADY = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter24, m_axi_gmem_AWREADY, m_axi_gmem_ARREADY, ap_block_state79_pp0_stage2_iter19)
    begin
                ap_block_pp0_stage2_subdone <= (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state79_pp0_stage2_iter19)) or ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (m_axi_gmem_AWREADY = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (m_axi_gmem_ARREADY = ap_const_logic_0)));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_00001_assign_proc : process(ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter41, ap_block_state76_pp0_stage3_iter18, ap_block_state168_pp0_stage3_iter41)
    begin
                ap_block_pp0_stage3_00001 <= (((ap_const_boolean_1 = ap_block_state168_pp0_stage3_iter41) and (ap_enable_reg_pp0_iter41 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state76_pp0_stage3_iter18)));
    end process;


    ap_block_pp0_stage3_01001_assign_proc : process(ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter41, ap_block_state76_pp0_stage3_iter18, ap_block_state168_pp0_stage3_iter41)
    begin
                ap_block_pp0_stage3_01001 <= (((ap_const_boolean_1 = ap_block_state168_pp0_stage3_iter41) and (ap_enable_reg_pp0_iter41 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state76_pp0_stage3_iter18)));
    end process;


    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter41, m_axi_gmem_WREADY, m_axi_gmem_ARREADY, ap_block_state76_pp0_stage3_iter18, ap_block_state168_pp0_stage3_iter41)
    begin
                ap_block_pp0_stage3_11001 <= (((ap_const_boolean_1 = ap_block_state168_pp0_stage3_iter41) and (ap_enable_reg_pp0_iter41 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (m_axi_gmem_WREADY = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state76_pp0_stage3_iter18)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (m_axi_gmem_ARREADY = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter41, m_axi_gmem_WREADY, m_axi_gmem_ARREADY, ap_block_state76_pp0_stage3_iter18, ap_block_state168_pp0_stage3_iter41)
    begin
                ap_block_pp0_stage3_subdone <= (((ap_const_boolean_1 = ap_block_state168_pp0_stage3_iter41) and (ap_enable_reg_pp0_iter41 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (m_axi_gmem_WREADY = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state76_pp0_stage3_iter18)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (m_axi_gmem_ARREADY = ap_const_logic_0)));
    end process;


    ap_block_state168_pp0_stage3_iter41_assign_proc : process(m_axi_gmem_BVALID)
    begin
                ap_block_state168_pp0_stage3_iter41 <= (m_axi_gmem_BVALID = ap_const_logic_0);
    end process;


    ap_block_state5_io_assign_proc : process(m_axi_gmem_ARREADY, icmp_ln137_reg_777)
    begin
                ap_block_state5_io <= ((icmp_ln137_reg_777 = ap_const_lv1_0) and (m_axi_gmem_ARREADY = ap_const_logic_0));
    end process;


    ap_block_state76_pp0_stage3_iter18_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state76_pp0_stage3_iter18 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state77_pp0_stage0_iter19_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state77_pp0_stage0_iter19 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state78_pp0_stage1_iter19_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state78_pp0_stage1_iter19 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state79_pp0_stage2_iter19_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state79_pp0_stage2_iter19 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_condition_1275_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln137_reg_777, ap_block_pp0_stage0_11001)
    begin
                ap_condition_1275 <= ((icmp_ln137_reg_777 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, icmp_ln137_reg_777)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln137_reg_777 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter40_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_loop_exit_ready_pp0_iter40_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41)
    begin
        if (((ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) 
    and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 
    = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to41_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41)
    begin
        if (((ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) 
    and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0))) then 
            ap_idle_pp0_1to41 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to41 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage3;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln143_fu_670_p1 <= sub27_i_reg_958;
    bitcast_ln144_fu_565_p1 <= trunc_ln144_1_reg_893;
    bitcast_ln145_fu_569_p1 <= trunc_ln145_1_reg_903;
    bitcast_ln146_fu_613_p1 <= trunc_ln146_1_reg_923_pp0_iter20_reg;
    bitcast_ln147_fu_617_p1 <= trunc_ln147_1_reg_933_pp0_iter21_reg;
    empty_fu_315_p2 <= std_logic_vector(unsigned(zext_ln137_1_fu_311_p1) + unsigned(sext_ln137_1_cast_reg_759));

    gmem_blk_n_AR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, m_axi_gmem_ARREADY, icmp_ln137_reg_777, ap_block_pp0_stage0, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln137_reg_777 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter24, m_axi_gmem_AWREADY, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter41, ap_CS_fsm_pp0_stage3, m_axi_gmem_BVALID, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter41 = ap_const_logic_1))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_CS_fsm_pp0_stage3, m_axi_gmem_RVALID, ap_block_pp0_stage0, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2)
    begin
        if ((((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter24, ap_CS_fsm_pp0_stage3, m_axi_gmem_WREADY, ap_block_pp0_stage3)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_205_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_205_ce <= ap_const_logic_1;
        else 
            grp_fu_205_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_205_opcode_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_00001, ap_block_pp0_stage0_00001, ap_block_pp0_stage3_00001)
    begin
        if ((((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_00001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_00001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            grp_fu_205_opcode <= ap_const_lv2_1;
        elsif (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_00001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_205_opcode <= ap_const_lv2_0;
        else 
            grp_fu_205_opcode <= "XX";
        end if; 
    end process;


    grp_fu_205_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, bitcast_ln144_fu_565_p1, add13_i_reg_938, sub20_i1_reg_948)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_205_p0 <= sub20_i1_reg_948;
        elsif (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_205_p0 <= add13_i_reg_938;
        elsif (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_205_p0 <= bitcast_ln144_fu_565_p1;
        else 
            grp_fu_205_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_205_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, bitcast_ln145_fu_569_p1, bitcast_ln146_fu_613_p1, bitcast_ln147_fu_617_p1)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_205_p1 <= bitcast_ln147_fu_617_p1;
        elsif (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_205_p1 <= bitcast_ln146_fu_613_p1;
        elsif (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_205_p1 <= bitcast_ln145_fu_569_p1;
        else 
            grp_fu_205_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_209_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter24, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage3, zext_ln145_fu_361_p1, zext_ln140_1_fu_624_p1)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_209_p0 <= zext_ln140_1_fu_624_p1(31 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_209_p0 <= zext_ln145_fu_361_p1(31 - 1 downto 0);
        else 
            grp_fu_209_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_209_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter24, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage3, sext_ln137_cast_reg_748, integralImg_w_cast_cast_reg_753)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_209_p1 <= sext_ln137_cast_reg_748(32 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_209_p1 <= integralImg_w_cast_cast_reg_753(32 - 1 downto 0);
        else 
            grp_fu_209_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_889_p_ce <= grp_fu_205_ce;
    grp_fu_889_p_din0 <= grp_fu_205_p0;
    grp_fu_889_p_din1 <= grp_fu_205_p1;
    grp_fu_889_p_opcode <= grp_fu_205_opcode;
    icmp_ln137_fu_259_p2 <= "1" when (indvar_flatten154_fu_96 = bound149) else "0";
    icmp_ln140_fu_254_p2 <= "1" when (signed(zext_ln140_3_fu_250_p1) < signed(sub2_i)) else "0";
    indvars_iv_next16_i24162_fu_298_p2 <= std_logic_vector(unsigned(j_fu_92) + unsigned(ap_const_lv31_1));
    indvars_iv_next16_i24_mid1_fu_376_p2 <= std_logic_vector(unsigned(j_load_reg_793) + unsigned(ap_const_lv31_2));
        integralImg_w_cast_cast_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(integralImg_w_cast),62));

    lshr_ln144_fu_536_p2 <= std_logic_vector(shift_right(unsigned(gmem_addr_read_reg_888),to_integer(unsigned('0' & zext_ln144_fu_532_p1(31-1 downto 0)))));
    lshr_ln145_fu_556_p2 <= std_logic_vector(shift_right(unsigned(gmem_addr_6_read_reg_898),to_integer(unsigned('0' & zext_ln145_1_fu_552_p1(31-1 downto 0)))));
    lshr_ln146_fu_584_p2 <= std_logic_vector(shift_right(unsigned(gmem_addr_7_read_reg_908),to_integer(unsigned('0' & zext_ln146_fu_580_p1(31-1 downto 0)))));
    lshr_ln147_fu_604_p2 <= std_logic_vector(shift_right(unsigned(gmem_addr_8_read_reg_928),to_integer(unsigned('0' & zext_ln147_fu_600_p1(31-1 downto 0)))));

    m_axi_gmem_ARADDR_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, sext_ln144_fu_391_p1, sext_ln145_fu_469_p1, sext_ln146_fu_505_p1, sext_ln147_fu_515_p1, ap_condition_1275)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                m_axi_gmem_ARADDR <= sext_ln147_fu_515_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                m_axi_gmem_ARADDR <= sext_ln146_fu_505_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                m_axi_gmem_ARADDR <= sext_ln145_fu_469_p1;
            elsif ((ap_const_boolean_1 = ap_condition_1275)) then 
                m_axi_gmem_ARADDR <= sext_ln144_fu_391_p1;
            else 
                m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv64_1(32 - 1 downto 0);
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, icmp_ln137_reg_777, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln137_reg_777 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= sext_ln143_fu_694_p1;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv64_1(32 - 1 downto 0);
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter24, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            m_axi_gmem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_BREADY_assign_proc : process(ap_enable_reg_pp0_iter41, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter41 = ap_const_logic_1))) then 
            m_axi_gmem_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= shl_ln143_1_reg_983;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= shl_ln143_reg_973;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(ap_enable_reg_pp0_iter24, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln144_fu_213_p1 <= integralImg_w_cast_cast_reg_753(32 - 1 downto 0);
        p_cast27_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_fu_315_p2),62));

    select_ln137_1_fu_381_p3 <= 
        indvars_iv_next16_i24162_reg_798 when (icmp_ln140_reg_770(0) = '1') else 
        indvars_iv_next16_i24_mid1_fu_376_p2;
    select_ln137_2_fu_304_p3 <= 
        j_fu_92 when (icmp_ln140_reg_770(0) = '1') else 
        indvars_iv_next16_i24162_fu_298_p2;
    select_ln137_fu_275_p3 <= 
        i_2_reg_765 when (icmp_ln140_reg_770(0) = '1') else 
        ap_const_lv31_0;
        sext_ln137_1_cast_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln137_1),33));

        sext_ln137_cast_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln137),62));

        sext_ln143_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln143_1_reg_978),64));

        sext_ln144_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln144_2_reg_813),64));

        sext_ln145_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln145_2_reg_835),64));

        sext_ln146_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln146_2_reg_866),64));

        sext_ln147_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln147_2_reg_850),64));

    shl_ln143_1_fu_688_p2 <= std_logic_vector(shift_left(unsigned(zext_ln143_fu_673_p1),to_integer(unsigned('0' & zext_ln143_2_fu_684_p1(31-1 downto 0)))));
    shl_ln143_2_fu_677_p3 <= (trunc_ln143_reg_968 & ap_const_lv3_0);
    shl_ln143_fu_654_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_F),to_integer(unsigned('0' & zext_ln143_1_fu_650_p1(8-1 downto 0)))));
    shl_ln144_1_fu_525_p3 <= (trunc_ln144_reg_818_pp0_iter18_reg & ap_const_lv3_0);
    shl_ln145_1_fu_545_p3 <= (trunc_ln145_reg_840_pp0_iter19_reg & ap_const_lv3_0);
    shl_ln146_1_fu_573_p3 <= (trunc_ln146_reg_871_pp0_iter19_reg & ap_const_lv3_0);
    shl_ln147_1_fu_593_p3 <= (trunc_ln147_reg_855_pp0_iter19_reg & ap_const_lv3_0);
    shl_ln1_fu_406_p3 <= (add_ln145_1_fu_401_p2 & ap_const_lv2_0);
    shl_ln2_fu_479_p3 <= (add_ln146_reg_845 & ap_const_lv2_0);
    shl_ln3_fu_442_p3 <= (add_ln147_fu_437_p2 & ap_const_lv2_0);
    shl_ln4_fu_634_p3 <= (add_ln143_reg_963 & ap_const_lv2_0);
    shl_ln_fu_329_p3 <= (add_ln144_1_fu_324_p2 & ap_const_lv2_0);
    trunc_ln143_fu_646_p1 <= add_ln143_1_fu_641_p2(3 - 1 downto 0);
    trunc_ln144_1_fu_541_p1 <= lshr_ln144_fu_536_p2(32 - 1 downto 0);
    trunc_ln144_fu_352_p1 <= add_ln144_2_fu_337_p2(3 - 1 downto 0);
    trunc_ln145_1_fu_561_p1 <= lshr_ln145_fu_556_p2(32 - 1 downto 0);
    trunc_ln145_fu_429_p1 <= add_ln145_2_fu_414_p2(3 - 1 downto 0);
    trunc_ln146_1_fu_589_p1 <= lshr_ln146_fu_584_p2(32 - 1 downto 0);
    trunc_ln146_fu_501_p1 <= add_ln146_1_fu_486_p2(3 - 1 downto 0);
    trunc_ln147_1_fu_609_p1 <= lshr_ln147_fu_604_p2(32 - 1 downto 0);
    trunc_ln147_fu_465_p1 <= add_ln147_1_fu_450_p2(3 - 1 downto 0);
    zext_ln137_1_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln137_2_fu_304_p3),33));
    zext_ln137_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln137_2_reg_803_pp0_iter23_reg),62));
    zext_ln140_1_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln137_reg_781_pp0_iter23_reg),62));
    zext_ln140_2_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln137_fu_275_p3),33));
    zext_ln140_3_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_88),32));
    zext_ln140_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln137_1_fu_381_p3),62));
    zext_ln143_1_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln143_fu_646_p1),8));
    zext_ln143_2_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln143_2_fu_677_p3),64));
    zext_ln143_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bitcast_ln143_fu_670_p1),64));
    zext_ln144_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln144_1_fu_525_p3),64));
    zext_ln145_1_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln145_1_fu_545_p3),64));
    zext_ln145_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln145_fu_356_p2),62));
    zext_ln146_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln146_1_fu_573_p3),64));
    zext_ln147_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln147_1_fu_593_p3),64));
end behav;
