-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity vadd is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    event_done : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    event_start : OUT STD_LOGIC;
    stall_start_ext : OUT STD_LOGIC;
    stall_done_ext : OUT STD_LOGIC;
    stall_start_str : OUT STD_LOGIC;
    stall_done_str : OUT STD_LOGIC;
    stall_start_int : OUT STD_LOGIC;
    stall_done_int : OUT STD_LOGIC );
end;


architecture behav of vadd is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "vadd_vadd,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=6.667000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.866910,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1674,HLS_SYN_LUT=1747,HLS_VERSION=2024_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant C_M_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter46 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter47 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter48 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter49 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter50 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter51 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter52 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter53 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter54 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter55 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter56 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter57 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter58 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter59 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter60 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter61 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter62 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter63 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter64 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter65 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter66 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter67 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter68 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter69 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter70 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter71 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal icmp_ln3_1_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_328 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op198_writereq_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_state74_pp0_stage1_iter36 : BOOLEAN;
    signal icmp_ln3_2_reg_348 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter71_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state144_pp0_stage1_iter71 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal in1 : STD_LOGIC_VECTOR (63 downto 0);
    signal in2 : STD_LOGIC_VECTOR (63 downto 0);
    signal out_r : STD_LOGIC_VECTOR (63 downto 0);
    signal size : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal gmem_blk_n_W : STD_LOGIC;
    signal gmem_blk_n_B : STD_LOGIC;
    signal gmem_blk_n_AR : STD_LOGIC;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem_addr_reg_317 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state73_pp0_stage0_iter36 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln3_fu_221_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln3_reg_323 : STD_LOGIC_VECTOR (63 downto 0);
    signal first_iter_0_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_1_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_1_reg_336 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_2_reg_342 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln3_2_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter45_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter46_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter47_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter48_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter49_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter50_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter51_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter52_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter53_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter54_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter55_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter56_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter57_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter58_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter59_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter60_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter61_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter62_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter63_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter64_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter65_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter66_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter67_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter68_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter69_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_2_reg_348_pp0_iter70_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_1_read_reg_352 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_2_read_reg_357 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln4_2_fu_306_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln4_2_reg_362 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal sext_ln3_2_fu_203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln4_fu_265_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln4_1_fu_281_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal i_fu_88 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal add_ln3_fu_249_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln3_fu_165_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln3_1_fu_179_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln3_2_fu_193_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln3_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln3_3_fu_161_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_fu_213_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln3_2_fu_239_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln3_1_fu_255_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln3_fu_175_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln4_fu_259_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln3_1_fu_189_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln4_1_fu_275_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln3_3_fu_291_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter31_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter32_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter33_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter34_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter35_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter36_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter37_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter38_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter39_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter40_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter41_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter42_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter43_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter44_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter45_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter46_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter47_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter48_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter49_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter50_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter51_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter52_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter53_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter54_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter55_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter56_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter57_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter58_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter59_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter60_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter61_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter62_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter63_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter64_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter65_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter66_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter67_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter68_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter69_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter70_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to71 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_ext_blocking_cur_n : STD_LOGIC;
    signal ap_ext_blocking_n : STD_LOGIC;
    signal ap_str_blocking_n : STD_LOGIC;
    signal ap_int_blocking_n : STD_LOGIC;
    signal ap_ext_blocking_n_reg : STD_LOGIC;
    signal ap_str_blocking_n_reg : STD_LOGIC;
    signal ap_int_blocking_n_reg : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_862 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component vadd_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        in1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        in2 : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        size : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        event_start : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component vadd_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        CH0_USER_RFIFONUM_WIDTH : INTEGER;
        CH0_USER_DW : INTEGER;
        CH0_USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_CH0_ARVALID : IN STD_LOGIC;
        I_CH0_ARREADY : OUT STD_LOGIC;
        I_CH0_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_RVALID : OUT STD_LOGIC;
        I_CH0_RREADY : IN STD_LOGIC;
        I_CH0_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_CH0_AWVALID : IN STD_LOGIC;
        I_CH0_AWREADY : OUT STD_LOGIC;
        I_CH0_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_WVALID : IN STD_LOGIC;
        I_CH0_WREADY : OUT STD_LOGIC;
        I_CH0_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_CH0_BVALID : OUT STD_LOGIC;
        I_CH0_BREADY : IN STD_LOGIC );
    end component;


    component vadd_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    control_s_axi_U : component vadd_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        in1 => in1,
        in2 => in2,
        out_r => out_r,
        size => size,
        ap_start => ap_start,
        interrupt => interrupt,
        event_start => event_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle);

    gmem_m_axi_U : component vadd_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 70,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        CH0_USER_RFIFONUM_WIDTH => 9,
        CH0_USER_DW => 32,
        CH0_USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_CH0_ARVALID => gmem_ARVALID,
        I_CH0_ARREADY => gmem_ARREADY,
        I_CH0_ARADDR => gmem_ARADDR,
        I_CH0_ARLEN => gmem_ARLEN,
        I_CH0_RVALID => gmem_RVALID,
        I_CH0_RREADY => gmem_RREADY,
        I_CH0_RDATA => gmem_RDATA,
        I_CH0_RFIFONUM => gmem_RFIFONUM,
        I_CH0_AWVALID => gmem_AWVALID,
        I_CH0_AWREADY => gmem_AWREADY,
        I_CH0_AWADDR => gmem_addr_reg_317,
        I_CH0_AWLEN => gmem_AWLEN,
        I_CH0_WVALID => gmem_WVALID,
        I_CH0_WREADY => gmem_WREADY,
        I_CH0_WDATA => add_ln4_2_reg_362,
        I_CH0_WSTRB => ap_const_lv4_F,
        I_CH0_BVALID => gmem_BVALID,
        I_CH0_BREADY => gmem_BREADY);

    flow_control_loop_pipe_U : component vadd_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_loop_exit_ready_pp0_iter70_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter42 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter43 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter44 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter45 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter46 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter47_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter47 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter48_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter48 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter49_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter49 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter50_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter50 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter51_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter51 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter52_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter52 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter53_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter53 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter54_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter54 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter55_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter55 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter56_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter56 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter56 <= ap_enable_reg_pp0_iter55;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter57_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter57 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter57 <= ap_enable_reg_pp0_iter56;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter58_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter58 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter58 <= ap_enable_reg_pp0_iter57;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter59_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter59 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter59 <= ap_enable_reg_pp0_iter58;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter60_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter60 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter60 <= ap_enable_reg_pp0_iter59;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter61_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter61 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter61 <= ap_enable_reg_pp0_iter60;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter62_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter62 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter62 <= ap_enable_reg_pp0_iter61;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter63_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter63 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter63 <= ap_enable_reg_pp0_iter62;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter64_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter64 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter64 <= ap_enable_reg_pp0_iter63;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter65_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter65 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter65 <= ap_enable_reg_pp0_iter64;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter66_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter66 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter66 <= ap_enable_reg_pp0_iter65;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter67_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter67 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter67 <= ap_enable_reg_pp0_iter66;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter68_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter68 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter68 <= ap_enable_reg_pp0_iter67;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter69_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter69 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter69 <= ap_enable_reg_pp0_iter68;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter70_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter70 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter70 <= ap_enable_reg_pp0_iter69;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter71_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter71 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter71 <= ap_enable_reg_pp0_iter70;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_ext_blocking_n_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ext_blocking_n_reg <= ap_ext_blocking_n;
        end if;
    end process;

    ap_int_blocking_n_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;

    ap_str_blocking_n_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    i_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_862)) then
                if ((icmp_ln3_1_fu_243_p2 = ap_const_lv1_1)) then 
                    i_fu_88 <= add_ln3_fu_249_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_88 <= ap_const_lv31_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln4_2_reg_362 <= add_ln4_2_fu_306_p2;
                first_iter_0_reg_328 <= first_iter_0_fu_233_p2;
                gmem_addr_1_read_reg_352 <= gmem_RDATA;
                gmem_addr_1_reg_336 <= sext_ln4_fu_265_p1;
                gmem_addr_2_reg_342 <= sext_ln4_1_fu_281_p1;
                gmem_addr_reg_317 <= sext_ln3_2_fu_203_p1;
                icmp_ln3_1_reg_332 <= icmp_ln3_1_fu_243_p2;
                icmp_ln3_2_reg_348 <= icmp_ln3_2_fu_295_p2;
                icmp_ln3_2_reg_348_pp0_iter10_reg <= icmp_ln3_2_reg_348_pp0_iter9_reg;
                icmp_ln3_2_reg_348_pp0_iter11_reg <= icmp_ln3_2_reg_348_pp0_iter10_reg;
                icmp_ln3_2_reg_348_pp0_iter12_reg <= icmp_ln3_2_reg_348_pp0_iter11_reg;
                icmp_ln3_2_reg_348_pp0_iter13_reg <= icmp_ln3_2_reg_348_pp0_iter12_reg;
                icmp_ln3_2_reg_348_pp0_iter14_reg <= icmp_ln3_2_reg_348_pp0_iter13_reg;
                icmp_ln3_2_reg_348_pp0_iter15_reg <= icmp_ln3_2_reg_348_pp0_iter14_reg;
                icmp_ln3_2_reg_348_pp0_iter16_reg <= icmp_ln3_2_reg_348_pp0_iter15_reg;
                icmp_ln3_2_reg_348_pp0_iter17_reg <= icmp_ln3_2_reg_348_pp0_iter16_reg;
                icmp_ln3_2_reg_348_pp0_iter18_reg <= icmp_ln3_2_reg_348_pp0_iter17_reg;
                icmp_ln3_2_reg_348_pp0_iter19_reg <= icmp_ln3_2_reg_348_pp0_iter18_reg;
                icmp_ln3_2_reg_348_pp0_iter1_reg <= icmp_ln3_2_reg_348;
                icmp_ln3_2_reg_348_pp0_iter20_reg <= icmp_ln3_2_reg_348_pp0_iter19_reg;
                icmp_ln3_2_reg_348_pp0_iter21_reg <= icmp_ln3_2_reg_348_pp0_iter20_reg;
                icmp_ln3_2_reg_348_pp0_iter22_reg <= icmp_ln3_2_reg_348_pp0_iter21_reg;
                icmp_ln3_2_reg_348_pp0_iter23_reg <= icmp_ln3_2_reg_348_pp0_iter22_reg;
                icmp_ln3_2_reg_348_pp0_iter24_reg <= icmp_ln3_2_reg_348_pp0_iter23_reg;
                icmp_ln3_2_reg_348_pp0_iter25_reg <= icmp_ln3_2_reg_348_pp0_iter24_reg;
                icmp_ln3_2_reg_348_pp0_iter26_reg <= icmp_ln3_2_reg_348_pp0_iter25_reg;
                icmp_ln3_2_reg_348_pp0_iter27_reg <= icmp_ln3_2_reg_348_pp0_iter26_reg;
                icmp_ln3_2_reg_348_pp0_iter28_reg <= icmp_ln3_2_reg_348_pp0_iter27_reg;
                icmp_ln3_2_reg_348_pp0_iter29_reg <= icmp_ln3_2_reg_348_pp0_iter28_reg;
                icmp_ln3_2_reg_348_pp0_iter2_reg <= icmp_ln3_2_reg_348_pp0_iter1_reg;
                icmp_ln3_2_reg_348_pp0_iter30_reg <= icmp_ln3_2_reg_348_pp0_iter29_reg;
                icmp_ln3_2_reg_348_pp0_iter31_reg <= icmp_ln3_2_reg_348_pp0_iter30_reg;
                icmp_ln3_2_reg_348_pp0_iter32_reg <= icmp_ln3_2_reg_348_pp0_iter31_reg;
                icmp_ln3_2_reg_348_pp0_iter33_reg <= icmp_ln3_2_reg_348_pp0_iter32_reg;
                icmp_ln3_2_reg_348_pp0_iter34_reg <= icmp_ln3_2_reg_348_pp0_iter33_reg;
                icmp_ln3_2_reg_348_pp0_iter35_reg <= icmp_ln3_2_reg_348_pp0_iter34_reg;
                icmp_ln3_2_reg_348_pp0_iter36_reg <= icmp_ln3_2_reg_348_pp0_iter35_reg;
                icmp_ln3_2_reg_348_pp0_iter37_reg <= icmp_ln3_2_reg_348_pp0_iter36_reg;
                icmp_ln3_2_reg_348_pp0_iter38_reg <= icmp_ln3_2_reg_348_pp0_iter37_reg;
                icmp_ln3_2_reg_348_pp0_iter39_reg <= icmp_ln3_2_reg_348_pp0_iter38_reg;
                icmp_ln3_2_reg_348_pp0_iter3_reg <= icmp_ln3_2_reg_348_pp0_iter2_reg;
                icmp_ln3_2_reg_348_pp0_iter40_reg <= icmp_ln3_2_reg_348_pp0_iter39_reg;
                icmp_ln3_2_reg_348_pp0_iter41_reg <= icmp_ln3_2_reg_348_pp0_iter40_reg;
                icmp_ln3_2_reg_348_pp0_iter42_reg <= icmp_ln3_2_reg_348_pp0_iter41_reg;
                icmp_ln3_2_reg_348_pp0_iter43_reg <= icmp_ln3_2_reg_348_pp0_iter42_reg;
                icmp_ln3_2_reg_348_pp0_iter44_reg <= icmp_ln3_2_reg_348_pp0_iter43_reg;
                icmp_ln3_2_reg_348_pp0_iter45_reg <= icmp_ln3_2_reg_348_pp0_iter44_reg;
                icmp_ln3_2_reg_348_pp0_iter46_reg <= icmp_ln3_2_reg_348_pp0_iter45_reg;
                icmp_ln3_2_reg_348_pp0_iter47_reg <= icmp_ln3_2_reg_348_pp0_iter46_reg;
                icmp_ln3_2_reg_348_pp0_iter48_reg <= icmp_ln3_2_reg_348_pp0_iter47_reg;
                icmp_ln3_2_reg_348_pp0_iter49_reg <= icmp_ln3_2_reg_348_pp0_iter48_reg;
                icmp_ln3_2_reg_348_pp0_iter4_reg <= icmp_ln3_2_reg_348_pp0_iter3_reg;
                icmp_ln3_2_reg_348_pp0_iter50_reg <= icmp_ln3_2_reg_348_pp0_iter49_reg;
                icmp_ln3_2_reg_348_pp0_iter51_reg <= icmp_ln3_2_reg_348_pp0_iter50_reg;
                icmp_ln3_2_reg_348_pp0_iter52_reg <= icmp_ln3_2_reg_348_pp0_iter51_reg;
                icmp_ln3_2_reg_348_pp0_iter53_reg <= icmp_ln3_2_reg_348_pp0_iter52_reg;
                icmp_ln3_2_reg_348_pp0_iter54_reg <= icmp_ln3_2_reg_348_pp0_iter53_reg;
                icmp_ln3_2_reg_348_pp0_iter55_reg <= icmp_ln3_2_reg_348_pp0_iter54_reg;
                icmp_ln3_2_reg_348_pp0_iter56_reg <= icmp_ln3_2_reg_348_pp0_iter55_reg;
                icmp_ln3_2_reg_348_pp0_iter57_reg <= icmp_ln3_2_reg_348_pp0_iter56_reg;
                icmp_ln3_2_reg_348_pp0_iter58_reg <= icmp_ln3_2_reg_348_pp0_iter57_reg;
                icmp_ln3_2_reg_348_pp0_iter59_reg <= icmp_ln3_2_reg_348_pp0_iter58_reg;
                icmp_ln3_2_reg_348_pp0_iter5_reg <= icmp_ln3_2_reg_348_pp0_iter4_reg;
                icmp_ln3_2_reg_348_pp0_iter60_reg <= icmp_ln3_2_reg_348_pp0_iter59_reg;
                icmp_ln3_2_reg_348_pp0_iter61_reg <= icmp_ln3_2_reg_348_pp0_iter60_reg;
                icmp_ln3_2_reg_348_pp0_iter62_reg <= icmp_ln3_2_reg_348_pp0_iter61_reg;
                icmp_ln3_2_reg_348_pp0_iter63_reg <= icmp_ln3_2_reg_348_pp0_iter62_reg;
                icmp_ln3_2_reg_348_pp0_iter64_reg <= icmp_ln3_2_reg_348_pp0_iter63_reg;
                icmp_ln3_2_reg_348_pp0_iter65_reg <= icmp_ln3_2_reg_348_pp0_iter64_reg;
                icmp_ln3_2_reg_348_pp0_iter66_reg <= icmp_ln3_2_reg_348_pp0_iter65_reg;
                icmp_ln3_2_reg_348_pp0_iter67_reg <= icmp_ln3_2_reg_348_pp0_iter66_reg;
                icmp_ln3_2_reg_348_pp0_iter68_reg <= icmp_ln3_2_reg_348_pp0_iter67_reg;
                icmp_ln3_2_reg_348_pp0_iter69_reg <= icmp_ln3_2_reg_348_pp0_iter68_reg;
                icmp_ln3_2_reg_348_pp0_iter6_reg <= icmp_ln3_2_reg_348_pp0_iter5_reg;
                icmp_ln3_2_reg_348_pp0_iter70_reg <= icmp_ln3_2_reg_348_pp0_iter69_reg;
                icmp_ln3_2_reg_348_pp0_iter71_reg <= icmp_ln3_2_reg_348_pp0_iter70_reg;
                icmp_ln3_2_reg_348_pp0_iter7_reg <= icmp_ln3_2_reg_348_pp0_iter6_reg;
                icmp_ln3_2_reg_348_pp0_iter8_reg <= icmp_ln3_2_reg_348_pp0_iter7_reg;
                icmp_ln3_2_reg_348_pp0_iter9_reg <= icmp_ln3_2_reg_348_pp0_iter8_reg;
                    zext_ln3_reg_323(30 downto 0) <= zext_ln3_fu_221_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
                ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
                ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
                ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
                ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
                ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
                ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
                ap_loop_exit_ready_pp0_iter37_reg <= ap_loop_exit_ready_pp0_iter36_reg;
                ap_loop_exit_ready_pp0_iter38_reg <= ap_loop_exit_ready_pp0_iter37_reg;
                ap_loop_exit_ready_pp0_iter39_reg <= ap_loop_exit_ready_pp0_iter38_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter40_reg <= ap_loop_exit_ready_pp0_iter39_reg;
                ap_loop_exit_ready_pp0_iter41_reg <= ap_loop_exit_ready_pp0_iter40_reg;
                ap_loop_exit_ready_pp0_iter42_reg <= ap_loop_exit_ready_pp0_iter41_reg;
                ap_loop_exit_ready_pp0_iter43_reg <= ap_loop_exit_ready_pp0_iter42_reg;
                ap_loop_exit_ready_pp0_iter44_reg <= ap_loop_exit_ready_pp0_iter43_reg;
                ap_loop_exit_ready_pp0_iter45_reg <= ap_loop_exit_ready_pp0_iter44_reg;
                ap_loop_exit_ready_pp0_iter46_reg <= ap_loop_exit_ready_pp0_iter45_reg;
                ap_loop_exit_ready_pp0_iter47_reg <= ap_loop_exit_ready_pp0_iter46_reg;
                ap_loop_exit_ready_pp0_iter48_reg <= ap_loop_exit_ready_pp0_iter47_reg;
                ap_loop_exit_ready_pp0_iter49_reg <= ap_loop_exit_ready_pp0_iter48_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter50_reg <= ap_loop_exit_ready_pp0_iter49_reg;
                ap_loop_exit_ready_pp0_iter51_reg <= ap_loop_exit_ready_pp0_iter50_reg;
                ap_loop_exit_ready_pp0_iter52_reg <= ap_loop_exit_ready_pp0_iter51_reg;
                ap_loop_exit_ready_pp0_iter53_reg <= ap_loop_exit_ready_pp0_iter52_reg;
                ap_loop_exit_ready_pp0_iter54_reg <= ap_loop_exit_ready_pp0_iter53_reg;
                ap_loop_exit_ready_pp0_iter55_reg <= ap_loop_exit_ready_pp0_iter54_reg;
                ap_loop_exit_ready_pp0_iter56_reg <= ap_loop_exit_ready_pp0_iter55_reg;
                ap_loop_exit_ready_pp0_iter57_reg <= ap_loop_exit_ready_pp0_iter56_reg;
                ap_loop_exit_ready_pp0_iter58_reg <= ap_loop_exit_ready_pp0_iter57_reg;
                ap_loop_exit_ready_pp0_iter59_reg <= ap_loop_exit_ready_pp0_iter58_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter60_reg <= ap_loop_exit_ready_pp0_iter59_reg;
                ap_loop_exit_ready_pp0_iter61_reg <= ap_loop_exit_ready_pp0_iter60_reg;
                ap_loop_exit_ready_pp0_iter62_reg <= ap_loop_exit_ready_pp0_iter61_reg;
                ap_loop_exit_ready_pp0_iter63_reg <= ap_loop_exit_ready_pp0_iter62_reg;
                ap_loop_exit_ready_pp0_iter64_reg <= ap_loop_exit_ready_pp0_iter63_reg;
                ap_loop_exit_ready_pp0_iter65_reg <= ap_loop_exit_ready_pp0_iter64_reg;
                ap_loop_exit_ready_pp0_iter66_reg <= ap_loop_exit_ready_pp0_iter65_reg;
                ap_loop_exit_ready_pp0_iter67_reg <= ap_loop_exit_ready_pp0_iter66_reg;
                ap_loop_exit_ready_pp0_iter68_reg <= ap_loop_exit_ready_pp0_iter67_reg;
                ap_loop_exit_ready_pp0_iter69_reg <= ap_loop_exit_ready_pp0_iter68_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter70_reg <= ap_loop_exit_ready_pp0_iter69_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                gmem_addr_2_read_reg_357 <= gmem_RDATA;
            end if;
        end if;
    end process;
    zext_ln3_reg_323(63 downto 31) <= "000000000000000000000000000000000";
    ap_str_blocking_n_reg <= '1';
    ap_int_blocking_n_reg <= '1';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to71, ap_done_pending_pp0, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to71 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln3_fu_249_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv31_1));
    add_ln4_1_fu_275_p2 <= std_logic_vector(unsigned(zext_ln3_1_fu_255_p1) + unsigned(sext_ln3_1_fu_189_p1));
    add_ln4_2_fu_306_p2 <= std_logic_vector(unsigned(gmem_addr_2_read_reg_357) + unsigned(gmem_addr_1_read_reg_352));
    add_ln4_fu_259_p2 <= std_logic_vector(unsigned(zext_ln3_1_fu_255_p1) + unsigned(sext_ln3_fu_175_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter36, gmem_ARREADY, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state73_pp0_stage0_iter36)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_const_boolean_1 = ap_block_state73_pp0_stage0_iter36) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (gmem_ARREADY = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter36, gmem_ARREADY, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state73_pp0_stage0_iter36)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_const_boolean_1 = ap_block_state73_pp0_stage0_iter36) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (gmem_ARREADY = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter71, ap_block_state74_pp0_stage1_iter36, ap_block_state144_pp0_stage1_iter71)
    begin
                ap_block_pp0_stage1_01001 <= (((ap_const_boolean_1 = ap_block_state144_pp0_stage1_iter71) and (ap_enable_reg_pp0_iter71 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state74_pp0_stage1_iter36) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter71, gmem_WREADY, ap_block_state2_io, ap_block_state74_pp0_stage1_iter36, ap_block_state144_pp0_stage1_iter71)
    begin
                ap_block_pp0_stage1_11001 <= (((ap_const_boolean_1 = ap_block_state144_pp0_stage1_iter71) and (ap_enable_reg_pp0_iter71 = ap_const_logic_1)) or ((gmem_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state74_pp0_stage1_iter36) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter71, gmem_WREADY, ap_block_state2_io, ap_block_state74_pp0_stage1_iter36, ap_block_state144_pp0_stage1_iter71)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_const_boolean_1 = ap_block_state144_pp0_stage1_iter71) and (ap_enable_reg_pp0_iter71 = ap_const_logic_1)) or ((gmem_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state74_pp0_stage1_iter36) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)));
    end process;


    ap_block_state144_pp0_stage1_iter71_assign_proc : process(gmem_BVALID, icmp_ln3_2_reg_348_pp0_iter71_reg)
    begin
                ap_block_state144_pp0_stage1_iter71 <= ((icmp_ln3_2_reg_348_pp0_iter71_reg = ap_const_lv1_0) and (gmem_BVALID = ap_const_logic_0));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_io_assign_proc : process(gmem_AWREADY, gmem_ARREADY, icmp_ln3_1_reg_332, ap_predicate_op198_writereq_state2)
    begin
                ap_block_state2_io <= (((ap_predicate_op198_writereq_state2 = ap_const_boolean_1) and (gmem_AWREADY = ap_const_logic_0)) or ((icmp_ln3_1_reg_332 = ap_const_lv1_1) and (gmem_ARREADY = ap_const_logic_0)));
    end process;


    ap_block_state73_pp0_stage0_iter36_assign_proc : process(gmem_RVALID)
    begin
                ap_block_state73_pp0_stage0_iter36 <= (gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state74_pp0_stage1_iter36_assign_proc : process(gmem_RVALID)
    begin
                ap_block_state74_pp0_stage1_iter36 <= (gmem_RVALID = ap_const_logic_0);
    end process;


    ap_condition_862_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_862 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln3_1_reg_332, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (icmp_ln3_1_reg_332 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter70_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_loop_exit_ready_pp0_iter70_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg, ap_loop_exit_ready_pp0_iter2_reg, ap_loop_exit_ready_pp0_iter3_reg, ap_loop_exit_ready_pp0_iter4_reg, ap_loop_exit_ready_pp0_iter5_reg, ap_loop_exit_ready_pp0_iter6_reg, ap_loop_exit_ready_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg, ap_loop_exit_ready_pp0_iter9_reg, ap_loop_exit_ready_pp0_iter10_reg, ap_loop_exit_ready_pp0_iter11_reg, ap_loop_exit_ready_pp0_iter12_reg, ap_loop_exit_ready_pp0_iter13_reg, ap_loop_exit_ready_pp0_iter14_reg, ap_loop_exit_ready_pp0_iter15_reg, ap_loop_exit_ready_pp0_iter16_reg, ap_loop_exit_ready_pp0_iter17_reg, ap_loop_exit_ready_pp0_iter18_reg, ap_loop_exit_ready_pp0_iter19_reg, ap_loop_exit_ready_pp0_iter20_reg, ap_loop_exit_ready_pp0_iter21_reg, ap_loop_exit_ready_pp0_iter22_reg, ap_loop_exit_ready_pp0_iter23_reg, ap_loop_exit_ready_pp0_iter24_reg, ap_loop_exit_ready_pp0_iter25_reg, ap_loop_exit_ready_pp0_iter26_reg, ap_loop_exit_ready_pp0_iter27_reg, ap_loop_exit_ready_pp0_iter28_reg, ap_loop_exit_ready_pp0_iter29_reg, ap_loop_exit_ready_pp0_iter30_reg, ap_loop_exit_ready_pp0_iter31_reg, ap_loop_exit_ready_pp0_iter32_reg, ap_loop_exit_ready_pp0_iter33_reg, ap_loop_exit_ready_pp0_iter34_reg, ap_loop_exit_ready_pp0_iter35_reg, ap_loop_exit_ready_pp0_iter36_reg, ap_loop_exit_ready_pp0_iter37_reg, ap_loop_exit_ready_pp0_iter38_reg, ap_loop_exit_ready_pp0_iter39_reg, ap_loop_exit_ready_pp0_iter40_reg, ap_loop_exit_ready_pp0_iter41_reg, ap_loop_exit_ready_pp0_iter42_reg, ap_loop_exit_ready_pp0_iter43_reg, ap_loop_exit_ready_pp0_iter44_reg, ap_loop_exit_ready_pp0_iter45_reg, ap_loop_exit_ready_pp0_iter46_reg, ap_loop_exit_ready_pp0_iter47_reg, ap_loop_exit_ready_pp0_iter48_reg, ap_loop_exit_ready_pp0_iter49_reg, ap_loop_exit_ready_pp0_iter50_reg, ap_loop_exit_ready_pp0_iter51_reg, ap_loop_exit_ready_pp0_iter52_reg, ap_loop_exit_ready_pp0_iter53_reg, ap_loop_exit_ready_pp0_iter54_reg, ap_loop_exit_ready_pp0_iter55_reg, ap_loop_exit_ready_pp0_iter56_reg, ap_loop_exit_ready_pp0_iter57_reg, ap_loop_exit_ready_pp0_iter58_reg, ap_loop_exit_ready_pp0_iter59_reg, ap_loop_exit_ready_pp0_iter60_reg, ap_loop_exit_ready_pp0_iter61_reg, ap_loop_exit_ready_pp0_iter62_reg, ap_loop_exit_ready_pp0_iter63_reg, ap_loop_exit_ready_pp0_iter64_reg, ap_loop_exit_ready_pp0_iter65_reg, ap_loop_exit_ready_pp0_iter66_reg, ap_loop_exit_ready_pp0_iter67_reg, ap_loop_exit_ready_pp0_iter68_reg, ap_loop_exit_ready_pp0_iter69_reg, ap_loop_exit_ready_pp0_iter70_reg)
    begin
        if (not(((ap_loop_exit_ready_pp0_iter45_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter44_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter43_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter42_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter41_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter40_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter39_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter38_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter37_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter36_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter35_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter34_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter33_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter32_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter31_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter30_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter29_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter28_reg 
    = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter27_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter26_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter25_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter24_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter23_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter22_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter21_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter20_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter19_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter18_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter17_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter16_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter14_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter13_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_0) and 
    (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0) and (ap_loop_exit_ready = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter70_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter69_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter68_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter67_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter66_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter65_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter64_reg = ap_const_logic_0) 
    and (ap_loop_exit_ready_pp0_iter63_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter62_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter61_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter60_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter59_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter58_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter57_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter56_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter55_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter54_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter53_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter52_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter51_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter50_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter49_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter48_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter47_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter46_reg 
    = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;

    ap_ext_blocking_cur_n <= (gmem_blk_n_W and gmem_blk_n_R and gmem_blk_n_B and gmem_blk_n_AW and gmem_blk_n_AR);
    ap_ext_blocking_n <= (ap_ext_blocking_cur_n and ap_const_logic_1);

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45, ap_enable_reg_pp0_iter46, ap_enable_reg_pp0_iter47, ap_enable_reg_pp0_iter48, ap_enable_reg_pp0_iter49, ap_enable_reg_pp0_iter50, ap_enable_reg_pp0_iter51, ap_enable_reg_pp0_iter52, ap_enable_reg_pp0_iter53, ap_enable_reg_pp0_iter54, ap_enable_reg_pp0_iter55, ap_enable_reg_pp0_iter56, ap_enable_reg_pp0_iter57, ap_enable_reg_pp0_iter58, ap_enable_reg_pp0_iter59, ap_enable_reg_pp0_iter60, ap_enable_reg_pp0_iter61, ap_enable_reg_pp0_iter62, ap_enable_reg_pp0_iter63, ap_enable_reg_pp0_iter64, ap_enable_reg_pp0_iter65, ap_enable_reg_pp0_iter66, ap_enable_reg_pp0_iter67, ap_enable_reg_pp0_iter68, ap_enable_reg_pp0_iter69, ap_enable_reg_pp0_iter70, ap_enable_reg_pp0_iter71)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) 
    and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter71 = ap_const_logic_0) and (ap_enable_reg_pp0_iter70 = ap_const_logic_0) and (ap_enable_reg_pp0_iter69 = ap_const_logic_0) and (ap_enable_reg_pp0_iter68 = ap_const_logic_0) and (ap_enable_reg_pp0_iter67 = ap_const_logic_0) and (ap_enable_reg_pp0_iter66 = ap_const_logic_0) and (ap_enable_reg_pp0_iter65 = ap_const_logic_0) and (ap_enable_reg_pp0_iter64 = ap_const_logic_0) and (ap_enable_reg_pp0_iter63 = ap_const_logic_0) and (ap_enable_reg_pp0_iter62 = ap_const_logic_0) and (ap_enable_reg_pp0_iter61 = ap_const_logic_0) and (ap_enable_reg_pp0_iter60 = ap_const_logic_0) and (ap_enable_reg_pp0_iter59 = ap_const_logic_0) and (ap_enable_reg_pp0_iter58 = ap_const_logic_0) and (ap_enable_reg_pp0_iter57 = ap_const_logic_0) and (ap_enable_reg_pp0_iter56 = ap_const_logic_0) and (ap_enable_reg_pp0_iter55 
    = ap_const_logic_0) and (ap_enable_reg_pp0_iter54 = ap_const_logic_0) and (ap_enable_reg_pp0_iter53 = ap_const_logic_0) and (ap_enable_reg_pp0_iter52 = ap_const_logic_0) and (ap_enable_reg_pp0_iter51 = ap_const_logic_0) and (ap_enable_reg_pp0_iter50 = ap_const_logic_0) and (ap_enable_reg_pp0_iter49 = ap_const_logic_0) and (ap_enable_reg_pp0_iter48 = ap_const_logic_0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_0) and (ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 
    = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to71_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45, ap_enable_reg_pp0_iter46, ap_enable_reg_pp0_iter47, ap_enable_reg_pp0_iter48, ap_enable_reg_pp0_iter49, ap_enable_reg_pp0_iter50, ap_enable_reg_pp0_iter51, ap_enable_reg_pp0_iter52, ap_enable_reg_pp0_iter53, ap_enable_reg_pp0_iter54, ap_enable_reg_pp0_iter55, ap_enable_reg_pp0_iter56, ap_enable_reg_pp0_iter57, ap_enable_reg_pp0_iter58, ap_enable_reg_pp0_iter59, ap_enable_reg_pp0_iter60, ap_enable_reg_pp0_iter61, ap_enable_reg_pp0_iter62, ap_enable_reg_pp0_iter63, ap_enable_reg_pp0_iter64, ap_enable_reg_pp0_iter65, ap_enable_reg_pp0_iter66, ap_enable_reg_pp0_iter67, ap_enable_reg_pp0_iter68, ap_enable_reg_pp0_iter69, ap_enable_reg_pp0_iter70, ap_enable_reg_pp0_iter71)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) 
    and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter71 = ap_const_logic_0) and (ap_enable_reg_pp0_iter70 = ap_const_logic_0) and (ap_enable_reg_pp0_iter69 = ap_const_logic_0) and (ap_enable_reg_pp0_iter68 = ap_const_logic_0) and (ap_enable_reg_pp0_iter67 = ap_const_logic_0) and (ap_enable_reg_pp0_iter66 = ap_const_logic_0) and (ap_enable_reg_pp0_iter65 = ap_const_logic_0) and (ap_enable_reg_pp0_iter64 = ap_const_logic_0) and (ap_enable_reg_pp0_iter63 = ap_const_logic_0) and (ap_enable_reg_pp0_iter62 = ap_const_logic_0) and (ap_enable_reg_pp0_iter61 = ap_const_logic_0) and (ap_enable_reg_pp0_iter60 = ap_const_logic_0) and (ap_enable_reg_pp0_iter59 = ap_const_logic_0) and (ap_enable_reg_pp0_iter58 = ap_const_logic_0) and (ap_enable_reg_pp0_iter57 = ap_const_logic_0) and (ap_enable_reg_pp0_iter56 = ap_const_logic_0) and (ap_enable_reg_pp0_iter55 = ap_const_logic_0) and (ap_enable_reg_pp0_iter54 
    = ap_const_logic_0) and (ap_enable_reg_pp0_iter53 = ap_const_logic_0) and (ap_enable_reg_pp0_iter52 = ap_const_logic_0) and (ap_enable_reg_pp0_iter51 = ap_const_logic_0) and (ap_enable_reg_pp0_iter50 = ap_const_logic_0) and (ap_enable_reg_pp0_iter49 = ap_const_logic_0) and (ap_enable_reg_pp0_iter48 = ap_const_logic_0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_0) and (ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 
    = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0))) then 
            ap_idle_pp0_1to71 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to71 <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);
    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_predicate_op198_writereq_state2_assign_proc : process(icmp_ln3_1_reg_332, first_iter_0_reg_328)
    begin
                ap_predicate_op198_writereq_state2 <= ((first_iter_0_reg_328 = ap_const_lv1_1) and (icmp_ln3_1_reg_332 = ap_const_lv1_1));
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, i_fu_88, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv31_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_88;
        end if; 
    end process;

    ap_str_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);
    empty_fu_213_p3 <= 
        trunc_ln3_3_fu_161_p1 when (icmp_ln3_fu_155_p2(0) = '1') else 
        ap_const_lv31_0;
    event_done <= ap_done;
    first_iter_0_fu_233_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv31_0) else "0";

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln3_1_reg_332, ap_block_pp0_stage0_11001, gmem_addr_1_reg_336, gmem_addr_2_reg_342, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gmem_ARADDR <= gmem_addr_2_reg_342;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln3_1_reg_332 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            gmem_ARADDR <= gmem_addr_1_reg_336;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    gmem_ARLEN <= ap_const_lv64_1(32 - 1 downto 0);

    gmem_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln3_1_reg_332, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln3_1_reg_332 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    gmem_AWLEN <= zext_ln3_reg_323(32 - 1 downto 0);

    gmem_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_predicate_op198_writereq_state2, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_predicate_op198_writereq_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_enable_reg_pp0_iter71, ap_CS_fsm_pp0_stage1, icmp_ln3_2_reg_348_pp0_iter71_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln3_2_reg_348_pp0_iter71_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter71 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter36, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1)))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_enable_reg_pp0_iter37, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln3_1_reg_332, m_axi_gmem_ARREADY, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (icmp_ln3_1_reg_332 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_predicate_op198_writereq_state2, m_axi_gmem_AWREADY, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_predicate_op198_writereq_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter71, ap_CS_fsm_pp0_stage1, icmp_ln3_2_reg_348_pp0_iter71_reg, m_axi_gmem_BVALID, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (icmp_ln3_2_reg_348_pp0_iter71_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter71 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter36, ap_CS_fsm_pp0_stage1, m_axi_gmem_RVALID, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter37, ap_CS_fsm_pp0_stage1, m_axi_gmem_WREADY, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln3_1_fu_243_p2 <= "1" when (signed(zext_ln3_2_fu_239_p1) < signed(size)) else "0";
    icmp_ln3_2_fu_295_p2 <= "1" when (signed(zext_ln3_3_fu_291_p1) < signed(size)) else "0";
    icmp_ln3_fu_155_p2 <= "1" when (signed(size) > signed(ap_const_lv32_0)) else "0";
        sext_ln3_1_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_1_fu_179_p4),63));

        sext_ln3_2_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_2_fu_193_p4),64));

        sext_ln3_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_fu_165_p4),63));

        sext_ln4_1_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln4_1_fu_275_p2),64));

        sext_ln4_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln4_fu_259_p2),64));


    stall_done_ext_assign_proc : process(ap_ext_blocking_n, ap_ext_blocking_n_reg)
    begin
        if (((ap_ext_blocking_n_reg = ap_const_logic_0) and (ap_ext_blocking_n = ap_const_logic_1))) then 
            stall_done_ext <= ap_const_logic_1;
        else 
            stall_done_ext <= ap_const_logic_0;
        end if; 
    end process;


    stall_done_int_assign_proc : process(ap_int_blocking_n, ap_int_blocking_n_reg)
    begin
        if (((ap_int_blocking_n_reg = ap_const_logic_0) and (ap_int_blocking_n = ap_const_logic_1))) then 
            stall_done_int <= ap_const_logic_1;
        else 
            stall_done_int <= ap_const_logic_0;
        end if; 
    end process;


    stall_done_str_assign_proc : process(ap_str_blocking_n, ap_str_blocking_n_reg)
    begin
        if (((ap_str_blocking_n_reg = ap_const_logic_0) and (ap_str_blocking_n = ap_const_logic_1))) then 
            stall_done_str <= ap_const_logic_1;
        else 
            stall_done_str <= ap_const_logic_0;
        end if; 
    end process;


    stall_start_ext_assign_proc : process(ap_ext_blocking_n, ap_ext_blocking_n_reg)
    begin
        if (((ap_ext_blocking_n_reg = ap_const_logic_1) and (ap_ext_blocking_n = ap_const_logic_0))) then 
            stall_start_ext <= ap_const_logic_1;
        else 
            stall_start_ext <= ap_const_logic_0;
        end if; 
    end process;


    stall_start_int_assign_proc : process(ap_int_blocking_n, ap_int_blocking_n_reg)
    begin
        if (((ap_int_blocking_n_reg = ap_const_logic_1) and (ap_int_blocking_n = ap_const_logic_0))) then 
            stall_start_int <= ap_const_logic_1;
        else 
            stall_start_int <= ap_const_logic_0;
        end if; 
    end process;


    stall_start_str_assign_proc : process(ap_str_blocking_n, ap_str_blocking_n_reg)
    begin
        if (((ap_str_blocking_n_reg = ap_const_logic_1) and (ap_str_blocking_n = ap_const_logic_0))) then 
            stall_start_str <= ap_const_logic_1;
        else 
            stall_start_str <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln3_1_fu_179_p4 <= in2(63 downto 2);
    trunc_ln3_2_fu_193_p4 <= out_r(63 downto 2);
    trunc_ln3_3_fu_161_p1 <= size(31 - 1 downto 0);
    trunc_ln3_fu_165_p4 <= in1(63 downto 2);
    zext_ln3_1_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),63));
    zext_ln3_2_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),32));
    zext_ln3_3_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln3_fu_249_p2),32));
    zext_ln3_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_213_p3),64));
end behav;
